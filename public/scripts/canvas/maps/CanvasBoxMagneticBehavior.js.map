{"version":3,"sources":["CanvasBoxMagneticBehavior.coffee"],"names":[],"mappings":"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","file":"CanvasBoxMagneticBehavior.js","sourceRoot":"/source/","sourcesContent":["Load.CanvasBoxBehavior();\nclass CanvasBoxMagneticBehavior extends CanvasBoxBehavior\n\n  ##\n  # Magnetic Force\n  ##\n  intMagnetism: 40\n  \n  ##\n  # Wall Repels Force\n  ##\n  intWallRepelsForce: 0.1\n  \n  ##\n  # Direction Lost\n  ##\n  intDirectionChangeLoss: 100\n  \n  ##\n  # Max Force\n  ##\n  intMaxForce: 10\n  \n  ##\n  # Margin\n  ##\n  intMargin: 10\n  \n  ##\n  # Repelling Force\n  ##\n  intRepelling: 20\n  \n  ##\n  # Escape Force\n  ##\n  intEscapeForce: 0.05\n  \n  ##\n  # Collision Force\n  ##\n  dblCollisionForce: 0\n  \n  ##\n  # Class Name\n  ##\n  strClassName: \"CanvasBoxMagneticBehavior\"\n  \n  toSerialize:()->\n    objResult = Array()\n    objResult.dragdrop = @dragdrop\n    objResult.intMargin = @intMargin\n    objResult.intEscapeForce = @intEscapeForce\n    objResult.dblCollisionForce = @dblCollisionForce\n    objResult.strClassName = @strClassName\n    objResult\n\n  initialize:(objBoxElement)->\n    @objBoxElement = objBoxElement\n    @intMagnetism = 1  unless @intMagnetism\n\n  repelsWalls:(arrVectors)->\n    objVector = undefined\n    dblZoom = undefined\n    if @objBoxElement and @objBoxElement.objBox\n      dblZoom = @objBoxElement.objBox.dblZoom\n    else\n      dblZoom = 1\n    dblWallForce = @intWallRepelsForce * @objBoxElement.objBox.arrElements.length * dblZoom\n    objVector = Array()\n    objVector[\"dx\"] = -1 * (@objBoxElement.x) * dblWallForce\n    objVector[\"dy\"] = 0\n    arrVectors.push objVector\n    objVector = Array()\n    objVector[\"dx\"] = 1 * (@objBoxElement.objBox.width - @objBoxElement.x) * dblWallForce\n    objVector[\"dy\"] = 0\n    arrVectors.push objVector\n    objVector = Array()\n    objVector[\"dx\"] = 0\n    objVector[\"dy\"] = -1 * (@objBoxElement.y) * dblWallForce\n    arrVectors.push objVector\n    objVector = Array()\n    objVector[\"dx\"] = 0\n    objVector[\"dy\"] = 1 * (@objBoxElement.objBox.height - @objBoxElement.y) * dblWallForce\n    arrVectors.push objVector\n    arrVectors\n\n  repelsElements:(arrVectors)->\n    for objElement in @objBoxElement.objBox.arrElements when objElement isnt @objBoxElement\n      objVector = @getElementForce(objElement, @objBoxElement)\n      arrVectors.push objVector  if objVector?\n      objVector = @getConnectorForce(objElement, @objBoxElement)\n      arrVectors.push objVector  if objVector?\n    arrVectors\n\n  keepOnLimits:(arrVectors)->\n    objVector = Array()\n    objVector[\"dx\"] = 0\n    objVector[\"dy\"] = 0\n    objVector[\"dx\"] += 1 * Math.abs(@intEscapeForce + (@objBoxElement.objBox.width - @objBoxElement.x))\n    objVector[\"dx\"] += -1 * Math.abs(@intEscapeForce + (@objBoxElement.x))\n    objVector[\"dy\"] += 1 * Math.abs(@intEscapeForce + (@objBoxElement.objBox.height - @objBoxElement.y))\n    objVector[\"dy\"] += -1 * Math.abs(@intEscapeForce + (@objBoxElement.y))\n    arrVectors.push objVector  if (objVector[\"dx\"] isnt 0) or (objVector[\"dy\"] isnt 0)\n    arrVectors\n\n  hasChanged:()->\n    booChanged = false\n    if @objBoxElement.x < @intMargin\n      @objBoxElement.x = @intMargin\n      booChanged = true\n\n    if @objBoxElement.x + @intMargin > @objBoxElement.objBox.width\n      @objBoxElement.x = Math.round(@objBoxElement.objBox.width - (@intMargin))\n      booChanged = true\n\n    if @objBoxElement.y < @intMargin\n      @objBoxElement.y = @intMargin\n      booChanged = true\n\n    if @objBoxElement.y + @intMargin > @objBoxElement.objBox.height\n      @objBoxElement.y = Math.round(@objBoxElement.objBox.height - (@intMargin))\n      booChanged = true\n\n    return booChanged\n\n  move:()->\n    #@objBoxElement.refresh()\n    return  if @objBoxElement.fixed or @objBoxElement.dragdrop\n    arrVectors = Array()\n    arrVectors = @repelsWalls(arrVectors)\n    arrVectors = @repelsElements(arrVectors)\n    arrVectors = @keepOnLimits(arrVectors)\n    @objBoxElement.dx = Math.round(@objBoxElement.dx)\n    @objBoxElement.dy = Math.round(@objBoxElement.dy)\n    @objBoxElement.dx = 0  if isNaN(@objBoxElement.dx)\n    @objBoxElement.dy = 0  if isNaN(@objBoxElement.dy)\n    @getVectors arrVectors\n    if Math.round(@objBoxElement.dx) isnt 0 or Math.round(@objBoxElement.dy) isnt 0\n      @objBoxElement.objBox.booChanged = true\n      @objBoxElement.x = Math.round(@objBoxElement.x + @objBoxElement.dx)\n      @objBoxElement.y = Math.round(@objBoxElement.y + @objBoxElement.dy)\n    @hasChanged()\n\n  onTimer:()->\n    @move()\n\n  onMouseOver:(event) ->\n    @objBoxElement.drawMouseOver event  if @objBoxElement.drawMouseOver\n\n  onMouseOut:(event)->\n    @objBoxElement.drawMouseOut event  if @objBoxElement.drawMouseOut\n\n  onDblClick:(event) ->\n    @objBoxElement.fixed = not @objBoxElement.fixed\n    @objBoxElement.drawFixed @objBoxElement.fixed  if @objBoxElement.drawFixed\n\n  onDrag:(event)->\n    @objBoxElement.dragdrop = true\n    @objBoxElement.dx = @objBoxElement.objBox.mouseX - @objBoxElement.x\n    @objBoxElement.dy = @objBoxElement.objBox.mouseY - @objBoxElement.y\n    @objBoxElement.x = @objBoxElement.objBox.mouseX\n    @objBoxElement.y = @objBoxElement.objBox.mouseY\n    @objBoxElement.drawDrag()  if @objBoxElement.drawDrag\n\n  onDrop:(event)->\n    @objBoxElement.dragdrop = false\n    @objBoxElement.drawDrop()  if @objBoxElement.drawDrop\n\n  getVectors:(arrVectors)->\n    intQtdVectors = arrVectors.length\n    if arrVectors.length is 0\n      @objBoxElement.dx = 0\n      @objBoxElement.dy = 0\n      return\n    dblX = 0\n    dblY = 0\n    i = 0\n\n    while i < intQtdVectors\n      objVector = arrVectors[i]\n      dblX += objVector.dx\n      dblY += objVector.dy\n      ++i\n    dx = Math.round(dblX / intQtdVectors)\n    dy = Math.round(dblY / intQtdVectors)\n    dx = @intMaxForce  if dx > @intMaxForce\n    dx = -@intMaxForce  if dx < -@intMaxForce\n    dy = @intMaxForce  if dy > @intMaxForce\n    dy = -@intMaxForce  if dy < -@intMaxForce\n    @objBoxElement.dx = dx\n    @objBoxElement.dy = dy\n\n\n  getConnectorForce:( objElementFrom , objElementTo )->\n\n    if !objElementFrom.isConnector and objElementTo.isConnector\n      arrVector = @getConnectorForce( objElementTo , objElementFrom )\n      if arrVector?\n        arrVector[ \"dx\" ] *= -1\n        arrVector[ \"dy\" ] *= -1\n      return arrVector\n\n    if !objElementFrom.isConnector\n      return null\n\n    if( objElementFrom.objElementFrom != objElementTo && \n        objElementFrom.objElementTo != objElementTo )\n      return null\n\n    dblDistanceX = objElementFrom.x - objElementTo.x\n    dblDistanceY =  objElementFrom.y - objElementTo.y\n    dblDistanceX2 = dblDistanceX * dblDistanceX\n    dblDistanceY2 = dblDistanceY * dblDistanceY\n    dblDistance = Math.round( 100 * Math.sqrt( dblDistanceX2 + dblDistanceY2 ) ) / 100\n\n    intConnectorPush = 100\n    intPushFactor = 2\n    intMinForce = 0\n\n    intConnectorForce = Math.round( 100 * dblDistance / intConnectorPush ) / 100\n    intConnectorForce = Math.round( 100 * Math.pow( intConnectorForce , intPushFactor ) ) / 100\n\n    if intConnectorForce > intMinForce\n      intDx = Math.round( 100 * intConnectorForce * Math.round( 100 * dblDistanceX / dblDistance ) ) / 100\n      intDy = Math.round( 100 * intConnectorForce * Math.round( 100 * dblDistanceY / dblDistance ) ) / 100 \n      \n      arrVector = Array()\n      arrVector[\"dx\"] = intDx\n      arrVector[\"dy\"] = intDy\n      return arrVector\n\n    return null\n\n  getElementForce:(objElementFrom, objElementTo)->\n\n    objVector = Array()\n    objVector[\"dx\"] = 0\n    objVector[\"dy\"] = 0\n    \n    booCollision = false\n    \n    intDirectionX = (if (objElementTo.x < objElementFrom.x) then -1 else 1)\n    intDirectionY = (if (objElementTo.y < objElementFrom.y) then -1 else 1)\n    \n    intDifX = objElementTo.x - objElementFrom.x\n    intDifY = objElementTo.y - objElementFrom.y\n    \n    dblDist = Math.sqrt((intDifX * intDifX) + (intDifY * intDifY))\n    \n    if dblDist > 1\n      dblForceX = objElementFrom.objBox.width / (dblDist)\n      dblForceY = objElementFrom.objBox.height / (dblDist)\n    else\n      dblForceX = 0\n      dblForceY = 0\n    \n    if !booCollision and \n        (objElementTo.x1)     and (objElementTo.x0)     and (objElementTo.y1)     and (objElementTo.y0) and \n        (@objBoxElement.x1) and (objElementFrom.x0) and (objElementFrom.y1) and (objElementFrom.y0) and \n        (objElementTo.x0 >= objElementFrom.x0) and (objElementTo.x0 <= objElementFrom.x1) and \n        (objElementTo.y0 >= objElementFrom.y0) and (objElementTo.y0 <= objElementFrom.y1)\n      objVector[\"dx\"] -= @intRepelling + Math.round((objElementFrom.x1 - objElementTo.x0) * @dblCollisionForce)\n      objVector[\"dy\"] -= @intRepelling + Math.round((objElementFrom.y1 - objElementTo.y0) * @dblCollisionForce)\n      booCollision = true\n    \n    if !booCollision and \n        (objElementTo.x1)     and (objElementTo.x0)     and (objElementTo.y1)     and (objElementTo.y0) and \n        (objElementFrom.x1) and (objElementFrom.x0) and (objElementFrom.y1) and (objElementFrom.y0) and \n        (objElementTo.x0 <= objElementFrom.x1) and (objElementTo.x0 >= objElementFrom.x0) and \n        (objElementTo.y1 <= objElementFrom.y1) and (objElementTo.y1 >= objElementFrom.y0)\n      objVector[\"dx\"] -= @intRepelling + Math.round((objElementFrom.x1 - objElementTo.x0) * @dblCollisionForce)\n      objVector[\"dy\"] += @intRepelling + Math.round((objElementTo.y1 - objElementFrom.y0) * @dblCollisionForce)\n      booCollision = true\n    \n    if !booCollision and \n        (objElementTo.x1)     and (objElementTo.x0)     and (objElementTo.y1)     and (objElementTo.y0) and \n        (objElementFrom.x1) and (objElementFrom.x0) and (objElementFrom.y1) and (objElementFrom.y0) and \n        (objElementTo.x1 <= objElementFrom.x1) and (objElementTo.x1 >= objElementFrom.x0) and \n        (objElementTo.y0 <= objElementFrom.y1) and (objElementTo.y0 >= objElementFrom.y0)\n      objVector[\"dx\"] += @intRepelling + Math.round((objElementTo.x1 - objElementFrom.x0) * @dblCollisionForce)\n      objVector[\"dy\"] -= @intRepelling + Math.round((objElementFrom.y0 - objElementTo.y0) * @dblCollisionForce)\n      booCollision = true\n    \n    if !booCollision and \n        (objElementTo.x1)     and (objElementTo.x0)     and (objElementTo.y1)     and (objElementTo.y0) and \n        (objElementFrom.x1) and (objElementFrom.x0) and (objElementFrom.y1) and (objElementFrom.y0) and \n        (objElementTo.x1 >= objElementFrom.x1) and (objElementTo.x1 <= objElementFrom.x0) and \n        (objElementTo.y1 >= objElementFrom.y0) and (objElementTo.y1 <= objElementFrom.y1)\n      objVector[\"dx\"] += @intRepelling + Math.round((objElementTo.x1 - objElementFrom.x0) * @dblCollisionForce)\n      objVector[\"dy\"] += @intRepelling + Math.round((objElementTo.y1 - objElementFrom.y0) * @dblCollisionForce)\n      booCollision = true\n    \n    objVector[\"dx\"] += @intMagnetism * intDirectionX * dblForceX\n    objVector[\"dy\"] += @intMagnetism * intDirectionY * dblForceY\n    \n    dblDirectionChange = Math.round( 100 * Math.sqrt( objVector[\"dx\"] * objVector[\"dx\"] + objVector[\"dy\"] * objVector[\"dy\"] ) ) / 100\n    \n    objVector[\"dx\"] += Math.round( 100 * @intRepelling + ( Math.random( dblDirectionChange ) - ( dblDirectionChange / 2 ) ) / @intDirectionChangeLoss ) / 100\n    objVector[\"dy\"] += Math.round( 100 * @intRepelling + ( Math.random( dblDirectionChange ) - ( dblDirectionChange / 2 ) ) / @intDirectionChangeLoss ) / 100\n    \n    if booCollision\n      objVector[\"dx\"] += Math.round( 100 * ( Math.random() * dblDirectionChange - ( dblDirectionChange / 2 ) ) / @intDirectionChangeLoss ) / 100\n      objVector[\"dy\"] += Math.round( 100 * ( Math.random() * dblDirectionChange - ( dblDirectionChange / 2 ) ) / @intDirectionChangeLoss ) / 100\n      objVector[\"dx\"] += Math.round( 100 * ( Math.random() * dblDirectionChange - ( dblDirectionChange / 2 ) ) / @intDirectionChangeLoss ) / 100\n      objVector[\"dy\"] += Math.round( 100 * ( Math.random() * dblDirectionChange - ( dblDirectionChange / 2 ) ) / @intDirectionChangeLoss ) / 100\n    \n    return objVector\n"]}