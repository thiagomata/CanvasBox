{"version":3,"sources":["CanvasBoxGravityBehavior.coffee"],"names":[],"mappings":"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","file":"CanvasBoxGravityBehavior.js","sourceRoot":"/source/","sourcesContent":["Load.CanvasBoxBehavior();\nclass CanvasBoxGravityBehavior extends CanvasBoxBehavior\n\n  ##\n  # Loss of force by the time\n  # @type double\n  ##\n  dblFriction: 0.8\n  \n  ##\n  # Gravity Force\n  # @type double\n  ##\n  dblGravityForce: 0.5\n \n  ##\n  # Max Force value\n  # @type double\n  ##\n  @dblMaxForce: 10\n  \n  ##\n  # Minimal Gravity Force\n  # @type double\n  ##\n  dblMinimalGravityForce: 3\n  \n  ##\n  # Percent of force witch is returned by the floor impact\n  # @type double\n  ##\n  dblElasticityLoss: 0.99\n  \n  ##\n  # Move the element using gravity rules\n  ##\n  move:()->\n\n    # refresh element position\n    @objBoxElement.refresh()\n    \n    # if element is fixed return\n    return false if @objBoxElement.fixed or @objBoxElement.booDrag\n    \n    \n    # add gravity force\n    if( !@objBoxElement.dy? or isNaN( @objBoxElement.dy ))\n      @objBoxElement.dy = 0\n      \n    if( !@objBoxElement.dx? or isNaN( @objBoxElement.dx ) )\n      @objBoxElement.dx = 0\n    \n\n    # move the element\n    @objBoxElement.x = Math.round(@objBoxElement.x + @objBoxElement.dx)\n    @objBoxElement.y = Math.round(@objBoxElement.y + @objBoxElement.dy)\n\n    # refresh element position\n    @objBoxElement.refresh()\n\n    # is this the last element?\n    booLast = @isLastOne(@objBoxElement)\n\n    if booLast\n      @objBoxElement.dy += @dblGravityForce\n      # last element drop down\n    else\n      # others elements will stop or pull back\n      @objBoxElement.dy = -1 * Math.abs( @objBoxElement.dy ) \n      @objBoxElement.dy *= -@dblFriction\n      # @objBoxElement.dy = 0 if Math.abs(@objBoxElement.dy) < @dblMinimalGravityForce * 2\n\n    # keeps the forces into limits\n    @objBoxElement.dy =  @dblMaxForce  if @objBoxElement.dy > @dblMaxForce\n    @objBoxElement.dy = -@dblMaxForce  if @objBoxElement.dy < -@dblMaxForce\n    @objBoxElement.dx =  @dblMaxForce  if @objBoxElement.dx > @dblMaxForce\n    @objBoxElement.dx = -@dblMaxForce  if @objBoxElement.dx < -@dblMaxForce\n    \n    # if has direction then has changed\n    @objBoxElement.objBox.booChanged = true  if (Math.round(@objBoxElement.dx) isnt 0) or (Math.round(@objBoxElement.dy) isnt 0)\n    \n    # move the element\n    @objBoxElement.x = Math.round(@objBoxElement.x + @objBoxElement.dx)\n    @objBoxElement.y = Math.round(@objBoxElement.y + @objBoxElement.dy)\n    \n    # loss of elasticity\n    @objBoxElement.dx *= @dblElasticityLoss\n    @objBoxElement.dy *= @dblElasticityLoss\n    \n    # keeps the element into box\n    \n    if @objBoxElement.x0 < 0\n      @objBoxElement.x = (@objBoxElement.width / 2)\n      @objBoxElement.dx = -@objBoxElement.dx - 1\n      @objBoxElement.dx = 0 if Math.abs(@objBoxElement.dx) < @dblMinimalGravityForce\n      \n    if @objBoxElement.x1 > @objBoxElement.objBox.width\n      @objBoxElement.x = @objBoxElement.objBox.width - (@objBoxElement.width / 2)\n      @objBoxElement.dx = -@objBoxElement.dx + 1\n      @objBoxElement.dx = 0 if Math.abs(@objBoxElement.dx) < @dblMinimalGravityForce\n      \n    if @objBoxElement.y0 < 0\n      @objBoxElement.y = (@objBoxElement.height / 2)\n      @objBoxElement.dy = -@objBoxElement.dy - 1\n      @objBoxElement.dy = 0 if Math.abs(@objBoxElement.dy) < @dblMinimalGravityForce\n      \n    if @objBoxElement.y1 > @objBoxElement.objBox.height\n      @objBoxElement.y = Math.round(@objBoxElement.objBox.height - (@objBoxElement.height / 2))\n      @objBoxElement.dy = -Math.round(@objBoxElement.dy * 0.8 * 10) / 10\n      @objBoxElement.dy = 0 if Math.abs(@objBoxElement.dy) < @dblMinimalGravityForce\n    \n    # refresh\n    @objBoxElement.refresh()\n\n    super\n\n  ##\n  # Check if there is no element touching this by bottom\n  ##\n  isLastOne:(objActualElement)->\n    arrElements = @objBoxElement.objBox.arrElements\n    intQtdElements = arrElements.length\n    \n    intMyTop = Math.round(objActualElement.y - (objActualElement.height / 2))\n    intMyBottom = Math.round(objActualElement.y + (objActualElement.height / 2))\n    intMyRight = Math.round(objActualElement.x + (objActualElement.width / 2))\n    intMyLeft = Math.round(objActualElement.x - (objActualElement.width / 2))\n    booLast = true\n    intElement = 0\n\n    for objBoxElement in arrElements when !objBoxElement.isConnector and objBoxElement.getId() isnt objActualElement.getId()\n      \n      booColision = false\n\n      if  !booColision and\n          (Math.round(objBoxElement.x + (objBoxElement.width  / 2)) >= intMyLeft) and \n          (Math.round(objBoxElement.x + (objBoxElement.width  / 2)) <= intMyRight) and \n          (Math.round(objBoxElement.y + (objBoxElement.height / 2)) >= intMyTop) and \n          (Math.round(objBoxElement.y + (objBoxElement.height / 2)) <= intMyBottom)\n        booColision = true\n\n\n      if  !booColision and\n          (Math.round(objBoxElement.x - (objBoxElement.width / 2)) >= intMyLeft) and \n          (Math.round(objBoxElement.x - (objBoxElement.width / 2)) <= intMyRight) and \n          (Math.round(objBoxElement.y + (objBoxElement.height / 2)) >= intMyTop) and \n          (Math.round(objBoxElement.y + (objBoxElement.height / 2)) <= intMyBottom)\n        booColision = true\n\n\n      if  !booColision and\n          (Math.round(objBoxElement.x + (objBoxElement.width / 2)) >= intMyLeft) and \n          (Math.round(objBoxElement.x + (objBoxElement.width / 2)) <= intMyRight) and \n          (Math.round(objBoxElement.y - (objBoxElement.height / 2)) >= intMyTop) and \n          (Math.round(objBoxElement.y - (objBoxElement.height / 2)) <= intMyBottom)\n        booColision = true\n\n      if  !booColision and\n          (Math.round(objBoxElement.x - (objBoxElement.width / 2)) >= intMyLeft) and \n          (Math.round(objBoxElement.x - (objBoxElement.width / 2)) <= intMyRight) and \n          (Math.round(objBoxElement.y - (objBoxElement.height / 2)) >= intMyTop) and \n          (Math.round(objBoxElement.y - (objBoxElement.height / 2)) <= intMyBottom)\n        booColision = true\n\n      if booColision\n        booLast = booLast and (objActualElement.y >= objBoxElement.y)\n    return booLast\n\n  ##\n  # And force / speed into drag event\n  ##\n  onDrag:(event) ->\n    @objBoxElement.dx = @objBoxElement.objBox.mouseX - @objBoxElement.x\n    @objBoxElement.dy = @objBoxElement.objBox.mouseY - @objBoxElement.y\n    return super( event );\n"]}