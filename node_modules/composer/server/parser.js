module.exports.parser = (function(){
  /* Generated by PEG.js (http://pegjs.majda.cz/). */

  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input) {
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};

      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')        // backslash
          .replace(/"/g, '\\"')          // closing quote character
          .replace(/\r/g, '\\r')         // carriage return
          .replace(/\u2028/g, '\\u2028') // line separator
          .replace(/\u2029/g, '\\u2029') // paragraph separator
          .replace(/\n/g, '\\n')         // line feed
          + '"';
      }

      function contains(array, value) {
        /*
         * Stupid IE does not have Array.prototype.indexOf, otherwise this
         * function would be a one-liner.
         */
        var length = array.length;
        for (var i = 0; i < length; i++) {
          if (array[i] === value) {
            return true;
          }
        }
        return false;
      }

      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }

        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }

        if (!contains(rightmostMatchFailuresExpected, failure)) {
          rightmostMatchFailuresExpected.push(failure);
        }
      }

      function parse_start() {
        var cacheKey = "start" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse___();
        if (result2 !== null) {
          var result3 = parse_Program();
          if (result3 !== null) {
            var result4 = parse___();
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(program) { return program; })(result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_SourceCharacter() {
        var cacheKey = "SourceCharacter" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.length > pos) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed('any character');
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_WhiteSpace() {
        var cacheKey = "WhiteSpace" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos).match(/^[	  ﻿]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("[	  ﻿]");
          }
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_Zs();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("whitespace");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_LineTerminator() {
        var cacheKey = "LineTerminator" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos).match(/^[\n\r\u2028\u2029]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[\\n\\r\\u2028\\u2029]");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_LineTerminatorSequence() {
        var cacheKey = "LineTerminatorSequence" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos, 1) === "\n") {
          var result5 = "\n";
          pos += 1;
        } else {
          var result5 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\n\"");
          }
        }
        if (result5 !== null) {
          var result0 = result5;
        } else {
          if (input.substr(pos, 2) === "\r\n") {
            var result4 = "\r\n";
            pos += 2;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"\\r\\n\"");
            }
          }
          if (result4 !== null) {
            var result0 = result4;
          } else {
            if (input.substr(pos, 1) === "\r") {
              var result3 = "\r";
              pos += 1;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\r\"");
              }
            }
            if (result3 !== null) {
              var result0 = result3;
            } else {
              if (input.substr(pos, 1) === "\u2028") {
                var result2 = "\u2028";
                pos += 1;
              } else {
                var result2 = null;
                if (reportMatchFailures) {
                  matchFailed("\"\\u2028\"");
                }
              }
              if (result2 !== null) {
                var result0 = result2;
              } else {
                if (input.substr(pos, 1) === "\u2029") {
                  var result1 = "\u2029";
                  pos += 1;
                } else {
                  var result1 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"\\u2029\"");
                  }
                }
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("end of line");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Comment() {
        var cacheKey = "Comment" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result2 = parse_MultiLineComment();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_SingleLineComment();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("comment");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_MultiLineComment() {
        var cacheKey = "MultiLineComment" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 2) === "/*") {
          var result1 = "/*";
          pos += 2;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"/*\"");
          }
        }
        if (result1 !== null) {
          var result2 = [];
          var savedPos1 = pos;
          var savedPos2 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 2) === "*/") {
            var result7 = "*/";
            pos += 2;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("\"*/\"");
            }
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result7 === null) {
            var result5 = '';
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          if (result5 !== null) {
            var result6 = parse_SourceCharacter();
            if (result6 !== null) {
              var result4 = [result5, result6];
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result2.push(result4);
            var savedPos1 = pos;
            var savedPos2 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            if (input.substr(pos, 2) === "*/") {
              var result7 = "*/";
              pos += 2;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"*/\"");
              }
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result7 === null) {
              var result5 = '';
            } else {
              var result5 = null;
              pos = savedPos2;
            }
            if (result5 !== null) {
              var result6 = parse_SourceCharacter();
              if (result6 !== null) {
                var result4 = [result5, result6];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result2 !== null) {
            if (input.substr(pos, 2) === "*/") {
              var result3 = "*/";
              pos += 2;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("\"*/\"");
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_MultiLineCommentNoLineTerminator() {
        var cacheKey = "MultiLineCommentNoLineTerminator" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 2) === "/*") {
          var result1 = "/*";
          pos += 2;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"/*\"");
          }
        }
        if (result1 !== null) {
          var result2 = [];
          var savedPos1 = pos;
          var savedPos2 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 2) === "*/") {
            var result9 = "*/";
            pos += 2;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("\"*/\"");
            }
          }
          if (result9 !== null) {
            var result7 = result9;
          } else {
            var result8 = parse_LineTerminator();
            if (result8 !== null) {
              var result7 = result8;
            } else {
              var result7 = null;;
            };
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result7 === null) {
            var result5 = '';
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          if (result5 !== null) {
            var result6 = parse_SourceCharacter();
            if (result6 !== null) {
              var result4 = [result5, result6];
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result2.push(result4);
            var savedPos1 = pos;
            var savedPos2 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            if (input.substr(pos, 2) === "*/") {
              var result9 = "*/";
              pos += 2;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("\"*/\"");
              }
            }
            if (result9 !== null) {
              var result7 = result9;
            } else {
              var result8 = parse_LineTerminator();
              if (result8 !== null) {
                var result7 = result8;
              } else {
                var result7 = null;;
              };
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result7 === null) {
              var result5 = '';
            } else {
              var result5 = null;
              pos = savedPos2;
            }
            if (result5 !== null) {
              var result6 = parse_SourceCharacter();
              if (result6 !== null) {
                var result4 = [result5, result6];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result2 !== null) {
            if (input.substr(pos, 2) === "*/") {
              var result3 = "*/";
              pos += 2;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("\"*/\"");
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_SingleLineComment() {
        var cacheKey = "SingleLineComment" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 2) === "//") {
          var result1 = "//";
          pos += 2;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"//\"");
          }
        }
        if (result1 !== null) {
          var result2 = [];
          var savedPos1 = pos;
          var savedPos2 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result6 = parse_LineTerminator();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result6 === null) {
            var result4 = '';
          } else {
            var result4 = null;
            pos = savedPos2;
          }
          if (result4 !== null) {
            var result5 = parse_SourceCharacter();
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          while (result3 !== null) {
            result2.push(result3);
            var savedPos1 = pos;
            var savedPos2 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            var result6 = parse_LineTerminator();
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result6 === null) {
              var result4 = '';
            } else {
              var result4 = null;
              pos = savedPos2;
            }
            if (result4 !== null) {
              var result5 = parse_SourceCharacter();
              if (result5 !== null) {
                var result3 = [result4, result5];
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Identifier() {
        var cacheKey = "Identifier" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var savedReportMatchFailuresVar0 = reportMatchFailures;
        reportMatchFailures = false;
        var result4 = parse_ReservedWord();
        reportMatchFailures = savedReportMatchFailuresVar0;
        if (result4 === null) {
          var result2 = '';
        } else {
          var result2 = null;
          pos = savedPos1;
        }
        if (result2 !== null) {
          var result3 = parse_IdentifierName();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(name) { return name; })(result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("identifier");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_IdentifierName() {
        var cacheKey = "IdentifierName" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_IdentifierStart();
        if (result2 !== null) {
          var result3 = [];
          var result4 = parse_IdentifierPart();
          while (result4 !== null) {
            result3.push(result4);
            var result4 = parse_IdentifierPart();
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(start, parts) {
                return start + parts.join("");
              })(result1[0], result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("identifier");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_IdentifierStart() {
        var cacheKey = "IdentifierStart" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result7 = parse_UnicodeLetter();
        if (result7 !== null) {
          var result0 = result7;
        } else {
          if (input.substr(pos, 1) === "$") {
            var result6 = "$";
            pos += 1;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\"$\"");
            }
          }
          if (result6 !== null) {
            var result0 = result6;
          } else {
            if (input.substr(pos, 1) === "_") {
              var result5 = "_";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"_\"");
              }
            }
            if (result5 !== null) {
              var result0 = result5;
            } else {
              var savedPos0 = pos;
              if (input.substr(pos, 1) === "\\") {
                var result3 = "\\";
                pos += 1;
              } else {
                var result3 = null;
                if (reportMatchFailures) {
                  matchFailed("\"\\\\\"");
                }
              }
              if (result3 !== null) {
                var result4 = parse_UnicodeEscapeSequence();
                if (result4 !== null) {
                  var result2 = [result3, result4];
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
              var result1 = result2 !== null
                ? (function(sequence) { return sequence; })(result2[1])
                : null;
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_IdentifierPart() {
        var cacheKey = "IdentifierPart" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result8 = parse_IdentifierStart();
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var result7 = parse_UnicodeCombiningMark();
          if (result7 !== null) {
            var result0 = result7;
          } else {
            var result6 = parse_Nd();
            if (result6 !== null) {
              var result0 = result6;
            } else {
              var result5 = parse_Pc();
              if (result5 !== null) {
                var result0 = result5;
              } else {
                if (input.substr(pos, 1) === "‌") {
                  var result4 = "‌";
                  pos += 1;
                } else {
                  var result4 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"‌\"");
                  }
                }
                var result3 = result4 !== null
                  ? (function() { return "\u200C"; })()
                  : null;
                if (result3 !== null) {
                  var result0 = result3;
                } else {
                  if (input.substr(pos, 1) === "‍") {
                    var result2 = "‍";
                    pos += 1;
                  } else {
                    var result2 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"‍\"");
                    }
                  }
                  var result1 = result2 !== null
                    ? (function() { return "\u200D"; })()
                    : null;
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_UnicodeLetter() {
        var cacheKey = "UnicodeLetter" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result6 = parse_Lu();
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var result5 = parse_Ll();
          if (result5 !== null) {
            var result0 = result5;
          } else {
            var result4 = parse_Lt();
            if (result4 !== null) {
              var result0 = result4;
            } else {
              var result3 = parse_Lm();
              if (result3 !== null) {
                var result0 = result3;
              } else {
                var result2 = parse_Lo();
                if (result2 !== null) {
                  var result0 = result2;
                } else {
                  var result1 = parse_Nl();
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_UnicodeCombiningMark() {
        var cacheKey = "UnicodeCombiningMark" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result2 = parse_Mn();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_Mc();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ReservedWord() {
        var cacheKey = "ReservedWord" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result4 = parse_Keyword();
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var result3 = parse_FutureReservedWord();
          if (result3 !== null) {
            var result0 = result3;
          } else {
            var result2 = parse_NullLiteral();
            if (result2 !== null) {
              var result0 = result2;
            } else {
              var result1 = parse_BooleanLiteral();
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Keyword() {
        var cacheKey = "Keyword" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 5) === "break") {
          var result29 = "break";
          pos += 5;
        } else {
          var result29 = null;
          if (reportMatchFailures) {
            matchFailed("\"break\"");
          }
        }
        if (result29 !== null) {
          var result1 = result29;
        } else {
          if (input.substr(pos, 4) === "case") {
            var result28 = "case";
            pos += 4;
          } else {
            var result28 = null;
            if (reportMatchFailures) {
              matchFailed("\"case\"");
            }
          }
          if (result28 !== null) {
            var result1 = result28;
          } else {
            if (input.substr(pos, 5) === "catch") {
              var result27 = "catch";
              pos += 5;
            } else {
              var result27 = null;
              if (reportMatchFailures) {
                matchFailed("\"catch\"");
              }
            }
            if (result27 !== null) {
              var result1 = result27;
            } else {
              if (input.substr(pos, 8) === "continue") {
                var result26 = "continue";
                pos += 8;
              } else {
                var result26 = null;
                if (reportMatchFailures) {
                  matchFailed("\"continue\"");
                }
              }
              if (result26 !== null) {
                var result1 = result26;
              } else {
                if (input.substr(pos, 8) === "debugger") {
                  var result25 = "debugger";
                  pos += 8;
                } else {
                  var result25 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"debugger\"");
                  }
                }
                if (result25 !== null) {
                  var result1 = result25;
                } else {
                  if (input.substr(pos, 7) === "default") {
                    var result24 = "default";
                    pos += 7;
                  } else {
                    var result24 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"default\"");
                    }
                  }
                  if (result24 !== null) {
                    var result1 = result24;
                  } else {
                    if (input.substr(pos, 6) === "delete") {
                      var result23 = "delete";
                      pos += 6;
                    } else {
                      var result23 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"delete\"");
                      }
                    }
                    if (result23 !== null) {
                      var result1 = result23;
                    } else {
                      if (input.substr(pos, 2) === "do") {
                        var result22 = "do";
                        pos += 2;
                      } else {
                        var result22 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"do\"");
                        }
                      }
                      if (result22 !== null) {
                        var result1 = result22;
                      } else {
                        if (input.substr(pos, 4) === "else") {
                          var result21 = "else";
                          pos += 4;
                        } else {
                          var result21 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"else\"");
                          }
                        }
                        if (result21 !== null) {
                          var result1 = result21;
                        } else {
                          if (input.substr(pos, 7) === "finally") {
                            var result20 = "finally";
                            pos += 7;
                          } else {
                            var result20 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"finally\"");
                            }
                          }
                          if (result20 !== null) {
                            var result1 = result20;
                          } else {
                            if (input.substr(pos, 3) === "for") {
                              var result19 = "for";
                              pos += 3;
                            } else {
                              var result19 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"for\"");
                              }
                            }
                            if (result19 !== null) {
                              var result1 = result19;
                            } else {
                              if (input.substr(pos, 8) === "function") {
                                var result18 = "function";
                                pos += 8;
                              } else {
                                var result18 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"function\"");
                                }
                              }
                              if (result18 !== null) {
                                var result1 = result18;
                              } else {
                                if (input.substr(pos, 2) === "if") {
                                  var result17 = "if";
                                  pos += 2;
                                } else {
                                  var result17 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"if\"");
                                  }
                                }
                                if (result17 !== null) {
                                  var result1 = result17;
                                } else {
                                  if (input.substr(pos, 10) === "instanceof") {
                                    var result16 = "instanceof";
                                    pos += 10;
                                  } else {
                                    var result16 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"instanceof\"");
                                    }
                                  }
                                  if (result16 !== null) {
                                    var result1 = result16;
                                  } else {
                                    if (input.substr(pos, 2) === "in") {
                                      var result15 = "in";
                                      pos += 2;
                                    } else {
                                      var result15 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"in\"");
                                      }
                                    }
                                    if (result15 !== null) {
                                      var result1 = result15;
                                    } else {
                                      if (input.substr(pos, 3) === "new") {
                                        var result14 = "new";
                                        pos += 3;
                                      } else {
                                        var result14 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\"new\"");
                                        }
                                      }
                                      if (result14 !== null) {
                                        var result1 = result14;
                                      } else {
                                        if (input.substr(pos, 6) === "return") {
                                          var result13 = "return";
                                          pos += 6;
                                        } else {
                                          var result13 = null;
                                          if (reportMatchFailures) {
                                            matchFailed("\"return\"");
                                          }
                                        }
                                        if (result13 !== null) {
                                          var result1 = result13;
                                        } else {
                                          if (input.substr(pos, 6) === "switch") {
                                            var result12 = "switch";
                                            pos += 6;
                                          } else {
                                            var result12 = null;
                                            if (reportMatchFailures) {
                                              matchFailed("\"switch\"");
                                            }
                                          }
                                          if (result12 !== null) {
                                            var result1 = result12;
                                          } else {
                                            if (input.substr(pos, 4) === "this") {
                                              var result11 = "this";
                                              pos += 4;
                                            } else {
                                              var result11 = null;
                                              if (reportMatchFailures) {
                                                matchFailed("\"this\"");
                                              }
                                            }
                                            if (result11 !== null) {
                                              var result1 = result11;
                                            } else {
                                              if (input.substr(pos, 5) === "throw") {
                                                var result10 = "throw";
                                                pos += 5;
                                              } else {
                                                var result10 = null;
                                                if (reportMatchFailures) {
                                                  matchFailed("\"throw\"");
                                                }
                                              }
                                              if (result10 !== null) {
                                                var result1 = result10;
                                              } else {
                                                if (input.substr(pos, 3) === "try") {
                                                  var result9 = "try";
                                                  pos += 3;
                                                } else {
                                                  var result9 = null;
                                                  if (reportMatchFailures) {
                                                    matchFailed("\"try\"");
                                                  }
                                                }
                                                if (result9 !== null) {
                                                  var result1 = result9;
                                                } else {
                                                  if (input.substr(pos, 6) === "typeof") {
                                                    var result8 = "typeof";
                                                    pos += 6;
                                                  } else {
                                                    var result8 = null;
                                                    if (reportMatchFailures) {
                                                      matchFailed("\"typeof\"");
                                                    }
                                                  }
                                                  if (result8 !== null) {
                                                    var result1 = result8;
                                                  } else {
                                                    if (input.substr(pos, 3) === "var") {
                                                      var result7 = "var";
                                                      pos += 3;
                                                    } else {
                                                      var result7 = null;
                                                      if (reportMatchFailures) {
                                                        matchFailed("\"var\"");
                                                      }
                                                    }
                                                    if (result7 !== null) {
                                                      var result1 = result7;
                                                    } else {
                                                      if (input.substr(pos, 4) === "void") {
                                                        var result6 = "void";
                                                        pos += 4;
                                                      } else {
                                                        var result6 = null;
                                                        if (reportMatchFailures) {
                                                          matchFailed("\"void\"");
                                                        }
                                                      }
                                                      if (result6 !== null) {
                                                        var result1 = result6;
                                                      } else {
                                                        if (input.substr(pos, 5) === "while") {
                                                          var result5 = "while";
                                                          pos += 5;
                                                        } else {
                                                          var result5 = null;
                                                          if (reportMatchFailures) {
                                                            matchFailed("\"while\"");
                                                          }
                                                        }
                                                        if (result5 !== null) {
                                                          var result1 = result5;
                                                        } else {
                                                          if (input.substr(pos, 4) === "with") {
                                                            var result4 = "with";
                                                            pos += 4;
                                                          } else {
                                                            var result4 = null;
                                                            if (reportMatchFailures) {
                                                              matchFailed("\"with\"");
                                                            }
                                                          }
                                                          if (result4 !== null) {
                                                            var result1 = result4;
                                                          } else {
                                                            var result1 = null;;
                                                          };
                                                        };
                                                      };
                                                    };
                                                  };
                                                };
                                              };
                                            };
                                          };
                                        };
                                      };
                                    };
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_FutureReservedWord() {
        var cacheKey = "FutureReservedWord" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 5) === "class") {
          var result10 = "class";
          pos += 5;
        } else {
          var result10 = null;
          if (reportMatchFailures) {
            matchFailed("\"class\"");
          }
        }
        if (result10 !== null) {
          var result1 = result10;
        } else {
          if (input.substr(pos, 5) === "const") {
            var result9 = "const";
            pos += 5;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("\"const\"");
            }
          }
          if (result9 !== null) {
            var result1 = result9;
          } else {
            if (input.substr(pos, 4) === "enum") {
              var result8 = "enum";
              pos += 4;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("\"enum\"");
              }
            }
            if (result8 !== null) {
              var result1 = result8;
            } else {
              if (input.substr(pos, 6) === "export") {
                var result7 = "export";
                pos += 6;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\"export\"");
                }
              }
              if (result7 !== null) {
                var result1 = result7;
              } else {
                if (input.substr(pos, 7) === "extends") {
                  var result6 = "extends";
                  pos += 7;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"extends\"");
                  }
                }
                if (result6 !== null) {
                  var result1 = result6;
                } else {
                  if (input.substr(pos, 6) === "import") {
                    var result5 = "import";
                    pos += 6;
                  } else {
                    var result5 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"import\"");
                    }
                  }
                  if (result5 !== null) {
                    var result1 = result5;
                  } else {
                    if (input.substr(pos, 5) === "super") {
                      var result4 = "super";
                      pos += 5;
                    } else {
                      var result4 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"super\"");
                      }
                    }
                    if (result4 !== null) {
                      var result1 = result4;
                    } else {
                      var result1 = null;;
                    };
                  };
                };
              };
            };
          };
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Literal() {
        var cacheKey = "Literal" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result7 = parse_NullLiteral();
        if (result7 !== null) {
          var result0 = result7;
        } else {
          var result6 = parse_BooleanLiteral();
          if (result6 !== null) {
            var result0 = result6;
          } else {
            var result5 = parse_NumericLiteral();
            var result4 = result5 !== null
              ? (function(value) {
                    return {
                      type:  "NumericLiteral",
                      value: value
                    };
                  })(result5)
              : null;
            if (result4 !== null) {
              var result0 = result4;
            } else {
              var result3 = parse_StringLiteral();
              var result2 = result3 !== null
                ? (function(value) {
                      return {
                        type:  "StringLiteral",
                        value: value
                      };
                    })(result3)
                : null;
              if (result2 !== null) {
                var result0 = result2;
              } else {
                var result1 = parse_RegularExpressionLiteral();
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_NullLiteral() {
        var cacheKey = "NullLiteral" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result1 = parse_NullToken();
        var result0 = result1 !== null
          ? (function() { return { type: "NullLiteral" }; })()
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_BooleanLiteral() {
        var cacheKey = "BooleanLiteral" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result4 = parse_TrueToken();
        var result3 = result4 !== null
          ? (function() { return { type: "BooleanLiteral", value: true  }; })()
          : null;
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_FalseToken();
          var result1 = result2 !== null
            ? (function() { return { type: "BooleanLiteral", value: false }; })()
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_NumericLiteral() {
        var cacheKey = "NumericLiteral" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result6 = parse_HexIntegerLiteral();
        if (result6 !== null) {
          var result2 = result6;
        } else {
          var result5 = parse_DecimalLiteral();
          if (result5 !== null) {
            var result2 = result5;
          } else {
            var result2 = null;;
          };
        }
        if (result2 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result4 = parse_IdentifierStart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result4 === null) {
            var result3 = '';
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(literal) {
                return literal;
              })(result1[0])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("number");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_DecimalLiteral() {
        var cacheKey = "DecimalLiteral" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos2 = pos;
        var result14 = parse_DecimalIntegerLiteral();
        if (result14 !== null) {
          if (input.substr(pos, 1) === ".") {
            var result15 = ".";
            pos += 1;
          } else {
            var result15 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result15 !== null) {
            var result19 = parse_DecimalDigits();
            var result16 = result19 !== null ? result19 : '';
            if (result16 !== null) {
              var result18 = parse_ExponentPart();
              var result17 = result18 !== null ? result18 : '';
              if (result17 !== null) {
                var result13 = [result14, result15, result16, result17];
              } else {
                var result13 = null;
                pos = savedPos2;
              }
            } else {
              var result13 = null;
              pos = savedPos2;
            }
          } else {
            var result13 = null;
            pos = savedPos2;
          }
        } else {
          var result13 = null;
          pos = savedPos2;
        }
        var result12 = result13 !== null
          ? (function(before, after, exponent) {
                return parseFloat(before + "." + after + exponent);
              })(result13[0], result13[2], result13[3])
          : null;
        if (result12 !== null) {
          var result0 = result12;
        } else {
          var savedPos1 = pos;
          if (input.substr(pos, 1) === ".") {
            var result8 = ".";
            pos += 1;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result8 !== null) {
            var result9 = parse_DecimalDigits();
            if (result9 !== null) {
              var result11 = parse_ExponentPart();
              var result10 = result11 !== null ? result11 : '';
              if (result10 !== null) {
                var result7 = [result8, result9, result10];
              } else {
                var result7 = null;
                pos = savedPos1;
              }
            } else {
              var result7 = null;
              pos = savedPos1;
            }
          } else {
            var result7 = null;
            pos = savedPos1;
          }
          var result6 = result7 !== null
            ? (function(after, exponent) {
                  return parseFloat("." + after + exponent);
                })(result7[1], result7[2])
            : null;
          if (result6 !== null) {
            var result0 = result6;
          } else {
            var savedPos0 = pos;
            var result3 = parse_DecimalIntegerLiteral();
            if (result3 !== null) {
              var result5 = parse_ExponentPart();
              var result4 = result5 !== null ? result5 : '';
              if (result4 !== null) {
                var result2 = [result3, result4];
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
            var result1 = result2 !== null
              ? (function(before, exponent) {
                    return parseFloat(before + exponent);
                  })(result2[0], result2[1])
              : null;
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_DecimalIntegerLiteral() {
        var cacheKey = "DecimalIntegerLiteral" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos, 1) === "0") {
          var result6 = "0";
          pos += 1;
        } else {
          var result6 = null;
          if (reportMatchFailures) {
            matchFailed("\"0\"");
          }
        }
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var savedPos0 = pos;
          var result3 = parse_NonZeroDigit();
          if (result3 !== null) {
            var result5 = parse_DecimalDigits();
            var result4 = result5 !== null ? result5 : '';
            if (result4 !== null) {
              var result2 = [result3, result4];
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(digit, digits) { return digit + digits; })(result2[0], result2[1])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_DecimalDigits() {
        var cacheKey = "DecimalDigits" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result2 = parse_DecimalDigit();
        if (result2 !== null) {
          var result1 = [];
          while (result2 !== null) {
            result1.push(result2);
            var result2 = parse_DecimalDigit();
          }
        } else {
          var result1 = null;
        }
        var result0 = result1 !== null
          ? (function(digits) { return digits.join(""); })(result1)
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_DecimalDigit() {
        var cacheKey = "DecimalDigit" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_NonZeroDigit() {
        var cacheKey = "NonZeroDigit" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos).match(/^[1-9]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[1-9]");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ExponentPart() {
        var cacheKey = "ExponentPart" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_ExponentIndicator();
        if (result2 !== null) {
          var result3 = parse_SignedInteger();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(indicator, integer) {
                return indicator + integer;
              })(result1[0], result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ExponentIndicator() {
        var cacheKey = "ExponentIndicator" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos).match(/^[eE]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[eE]");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_SignedInteger() {
        var cacheKey = "SignedInteger" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos).match(/^[\-+]/) !== null) {
          var result4 = input.charAt(pos);
          pos++;
        } else {
          var result4 = null;
          if (reportMatchFailures) {
            matchFailed("[\\-+]");
          }
        }
        var result2 = result4 !== null ? result4 : '';
        if (result2 !== null) {
          var result3 = parse_DecimalDigits();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(sign, digits) { return sign + digits; })(result1[0], result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_HexIntegerLiteral() {
        var cacheKey = "HexIntegerLiteral" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 1) === "0") {
          var result2 = "0";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"0\"");
          }
        }
        if (result2 !== null) {
          if (input.substr(pos).match(/^[xX]/) !== null) {
            var result3 = input.charAt(pos);
            pos++;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("[xX]");
            }
          }
          if (result3 !== null) {
            var result5 = parse_HexDigit();
            if (result5 !== null) {
              var result4 = [];
              while (result5 !== null) {
                result4.push(result5);
                var result5 = parse_HexDigit();
              }
            } else {
              var result4 = null;
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(digits) { return parseInt("0x" + dgits.join("")); })(result1[2])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_HexDigit() {
        var cacheKey = "HexDigit" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos).match(/^[0-9a-fA-F]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9a-fA-F]");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_StringLiteral() {
        var cacheKey = "StringLiteral" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "\"") {
          var result8 = "\"";
          pos += 1;
        } else {
          var result8 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result8 !== null) {
          var result11 = parse_DoubleStringCharacters();
          var result9 = result11 !== null ? result11 : '';
          if (result9 !== null) {
            if (input.substr(pos, 1) === "\"") {
              var result10 = "\"";
              pos += 1;
            } else {
              var result10 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result10 !== null) {
              var result7 = [result8, result9, result10];
            } else {
              var result7 = null;
              pos = savedPos1;
            }
          } else {
            var result7 = null;
            pos = savedPos1;
          }
        } else {
          var result7 = null;
          pos = savedPos1;
        }
        if (result7 !== null) {
          var result1 = result7;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === "'") {
            var result3 = "'";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"'\"");
            }
          }
          if (result3 !== null) {
            var result6 = parse_SingleStringCharacters();
            var result4 = result6 !== null ? result6 : '';
            if (result4 !== null) {
              if (input.substr(pos, 1) === "'") {
                var result5 = "'";
                pos += 1;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("\"'\"");
                }
              }
              if (result5 !== null) {
                var result2 = [result3, result4, result5];
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          if (result2 !== null) {
            var result1 = result2;
          } else {
            var result1 = null;;
          };
        }
        var result0 = result1 !== null
          ? (function(parts) {
                return parts[1];
              })(result1)
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("string");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_DoubleStringCharacters() {
        var cacheKey = "DoubleStringCharacters" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result2 = parse_DoubleStringCharacter();
        if (result2 !== null) {
          var result1 = [];
          while (result2 !== null) {
            result1.push(result2);
            var result2 = parse_DoubleStringCharacter();
          }
        } else {
          var result1 = null;
        }
        var result0 = result1 !== null
          ? (function(chars) { return chars.join(""); })(result1)
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_SingleStringCharacters() {
        var cacheKey = "SingleStringCharacters" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result2 = parse_SingleStringCharacter();
        if (result2 !== null) {
          var result1 = [];
          while (result2 !== null) {
            result1.push(result2);
            var result2 = parse_SingleStringCharacter();
          }
        } else {
          var result1 = null;
        }
        var result0 = result1 !== null
          ? (function(chars) { return chars.join(""); })(result1)
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_DoubleStringCharacter() {
        var cacheKey = "DoubleStringCharacter" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos1 = pos;
        var savedPos2 = pos;
        var savedReportMatchFailuresVar0 = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos, 1) === "\"") {
          var result13 = "\"";
          pos += 1;
        } else {
          var result13 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result13 !== null) {
          var result10 = result13;
        } else {
          if (input.substr(pos, 1) === "\\") {
            var result12 = "\\";
            pos += 1;
          } else {
            var result12 = null;
            if (reportMatchFailures) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result12 !== null) {
            var result10 = result12;
          } else {
            var result11 = parse_LineTerminator();
            if (result11 !== null) {
              var result10 = result11;
            } else {
              var result10 = null;;
            };
          };
        }
        reportMatchFailures = savedReportMatchFailuresVar0;
        if (result10 === null) {
          var result8 = '';
        } else {
          var result8 = null;
          pos = savedPos2;
        }
        if (result8 !== null) {
          var result9 = parse_SourceCharacter();
          if (result9 !== null) {
            var result7 = [result8, result9];
          } else {
            var result7 = null;
            pos = savedPos1;
          }
        } else {
          var result7 = null;
          pos = savedPos1;
        }
        var result6 = result7 !== null
          ? (function(char_) { return char_;     })(result7[1])
          : null;
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === "\\") {
            var result4 = "\\";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse_EscapeSequence();
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos0;
            }
          } else {
            var result3 = null;
            pos = savedPos0;
          }
          var result2 = result3 !== null
            ? (function(sequence) { return sequence;  })(result3[1])
            : null;
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_LineContinuation();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_SingleStringCharacter() {
        var cacheKey = "SingleStringCharacter" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos1 = pos;
        var savedPos2 = pos;
        var savedReportMatchFailuresVar0 = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos, 1) === "'") {
          var result13 = "'";
          pos += 1;
        } else {
          var result13 = null;
          if (reportMatchFailures) {
            matchFailed("\"'\"");
          }
        }
        if (result13 !== null) {
          var result10 = result13;
        } else {
          if (input.substr(pos, 1) === "\\") {
            var result12 = "\\";
            pos += 1;
          } else {
            var result12 = null;
            if (reportMatchFailures) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result12 !== null) {
            var result10 = result12;
          } else {
            var result11 = parse_LineTerminator();
            if (result11 !== null) {
              var result10 = result11;
            } else {
              var result10 = null;;
            };
          };
        }
        reportMatchFailures = savedReportMatchFailuresVar0;
        if (result10 === null) {
          var result8 = '';
        } else {
          var result8 = null;
          pos = savedPos2;
        }
        if (result8 !== null) {
          var result9 = parse_SourceCharacter();
          if (result9 !== null) {
            var result7 = [result8, result9];
          } else {
            var result7 = null;
            pos = savedPos1;
          }
        } else {
          var result7 = null;
          pos = savedPos1;
        }
        var result6 = result7 !== null
          ? (function(char_) { return char_;     })(result7[1])
          : null;
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === "\\") {
            var result4 = "\\";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse_EscapeSequence();
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos0;
            }
          } else {
            var result3 = null;
            pos = savedPos0;
          }
          var result2 = result3 !== null
            ? (function(sequence) { return sequence;  })(result3[1])
            : null;
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_LineContinuation();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_LineContinuation() {
        var cacheKey = "LineContinuation" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 1) === "\\") {
          var result2 = "\\";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\\\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_LineTerminatorSequence();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(sequence) { return sequence; })(result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_EscapeSequence() {
        var cacheKey = "EscapeSequence" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result8 = parse_CharacterEscapeSequence();
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === "0") {
            var result5 = "0";
            pos += 1;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("\"0\"");
            }
          }
          if (result5 !== null) {
            var savedPos1 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            var result7 = parse_DecimalDigit();
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result7 === null) {
              var result6 = '';
            } else {
              var result6 = null;
              pos = savedPos1;
            }
            if (result6 !== null) {
              var result4 = [result5, result6];
            } else {
              var result4 = null;
              pos = savedPos0;
            }
          } else {
            var result4 = null;
            pos = savedPos0;
          }
          var result3 = result4 !== null
            ? (function() { return "\0"; })()
            : null;
          if (result3 !== null) {
            var result0 = result3;
          } else {
            var result2 = parse_HexEscapeSequence();
            if (result2 !== null) {
              var result0 = result2;
            } else {
              var result1 = parse_UnicodeEscapeSequence();
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_CharacterEscapeSequence() {
        var cacheKey = "CharacterEscapeSequence" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result2 = parse_SingleEscapeCharacter();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_NonEscapeCharacter();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_SingleEscapeCharacter() {
        var cacheKey = "SingleEscapeCharacter" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos).match(/^['"\\bfnrtv]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("['\"\\\\bfnrtv]");
          }
        }
        var result0 = result1 !== null
          ? (function(char_) {
                return char_
                  .replace("b", "\b")
                  .replace("f", "\f")
                  .replace("n", "\n")
                  .replace("r", "\r")
                  .replace("t", "\t")
                  .replace("v", "\x0B") // IE does not recognize "\v".
              })(result1)
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_NonEscapeCharacter() {
        var cacheKey = "NonEscapeCharacter" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var savedReportMatchFailuresVar0 = reportMatchFailures;
        reportMatchFailures = false;
        var result6 = parse_EscapeCharacter();
        reportMatchFailures = savedReportMatchFailuresVar0;
        if (result6 === null) {
          var result5 = '';
        } else {
          var result5 = null;
          pos = savedPos1;
        }
        if (result5 !== null) {
          var result2 = result5;
        } else {
          var result4 = parse_LineTerminator();
          if (result4 !== null) {
            var result2 = result4;
          } else {
            var result2 = null;;
          };
        }
        if (result2 !== null) {
          var result3 = parse_SourceCharacter();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(char_) { return char_; })(result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_EscapeCharacter() {
        var cacheKey = "EscapeCharacter" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result4 = parse_SingleEscapeCharacter();
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var result3 = parse_DecimalDigit();
          if (result3 !== null) {
            var result0 = result3;
          } else {
            if (input.substr(pos, 1) === "x") {
              var result2 = "x";
              pos += 1;
            } else {
              var result2 = null;
              if (reportMatchFailures) {
                matchFailed("\"x\"");
              }
            }
            if (result2 !== null) {
              var result0 = result2;
            } else {
              if (input.substr(pos, 1) === "u") {
                var result1 = "u";
                pos += 1;
              } else {
                var result1 = null;
                if (reportMatchFailures) {
                  matchFailed("\"u\"");
                }
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_HexEscapeSequence() {
        var cacheKey = "HexEscapeSequence" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 1) === "x") {
          var result2 = "x";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"x\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_HexDigit();
          if (result3 !== null) {
            var result4 = parse_HexDigit();
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(h1, h2) {
                return String.fromCharCode(parseInt("0x" + h1 + h2));
              })(result1[1], result1[2])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_UnicodeEscapeSequence() {
        var cacheKey = "UnicodeEscapeSequence" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 1) === "u") {
          var result2 = "u";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"u\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_HexDigit();
          if (result3 !== null) {
            var result4 = parse_HexDigit();
            if (result4 !== null) {
              var result5 = parse_HexDigit();
              if (result5 !== null) {
                var result6 = parse_HexDigit();
                if (result6 !== null) {
                  var result1 = [result2, result3, result4, result5, result6];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(h1, h2, h3, h4) {
                return String.fromCharCode(parseInt("0x" + h1 + h2 + h3 + h4));
              })(result1[1], result1[2], result1[3], result1[4])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_RegularExpressionLiteral() {
        var cacheKey = "RegularExpressionLiteral" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "/") {
          var result2 = "/";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"/\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_RegularExpressionBody();
          if (result3 !== null) {
            if (input.substr(pos, 1) === "/") {
              var result4 = "/";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"/\"");
              }
            }
            if (result4 !== null) {
              var result5 = parse_RegularExpressionFlags();
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(body, flags) {
                return {
                  type:  "RegularExpressionLiteral",
                  body:  body,
                  flags: flags
                };
              })(result1[1], result1[3])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("regular expression");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_RegularExpressionBody() {
        var cacheKey = "RegularExpressionBody" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_RegularExpressionFirstChar();
        if (result2 !== null) {
          var result3 = parse_RegularExpressionChars();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(char_, chars) {
                return char_ + chars;
              })(result1[0], result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_RegularExpressionChars() {
        var cacheKey = "RegularExpressionChars" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result1 = [];
        var result2 = parse_RegularExpressionChar();
        while (result2 !== null) {
          result1.push(result2);
          var result2 = parse_RegularExpressionChar();
        }
        var result0 = result1 !== null
          ? (function(chars) { return chars.join(""); })(result1)
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_RegularExpressionFirstChar() {
        var cacheKey = "RegularExpressionFirstChar" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var savedReportMatchFailuresVar0 = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos).match(/^[*\\\/[]/) !== null) {
          var result7 = input.charAt(pos);
          pos++;
        } else {
          var result7 = null;
          if (reportMatchFailures) {
            matchFailed("[*\\\\\\/[]");
          }
        }
        reportMatchFailures = savedReportMatchFailuresVar0;
        if (result7 === null) {
          var result5 = '';
        } else {
          var result5 = null;
          pos = savedPos1;
        }
        if (result5 !== null) {
          var result6 = parse_RegularExpressionNonTerminator();
          if (result6 !== null) {
            var result4 = [result5, result6];
          } else {
            var result4 = null;
            pos = savedPos0;
          }
        } else {
          var result4 = null;
          pos = savedPos0;
        }
        var result3 = result4 !== null
          ? (function(char_) { return char_; })(result4[1])
          : null;
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_RegularExpressionBackslashSequence();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_RegularExpressionClass();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_RegularExpressionChar() {
        var cacheKey = "RegularExpressionChar" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var savedReportMatchFailuresVar0 = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos).match(/^[\\\/[]/) !== null) {
          var result7 = input.charAt(pos);
          pos++;
        } else {
          var result7 = null;
          if (reportMatchFailures) {
            matchFailed("[\\\\\\/[]");
          }
        }
        reportMatchFailures = savedReportMatchFailuresVar0;
        if (result7 === null) {
          var result5 = '';
        } else {
          var result5 = null;
          pos = savedPos1;
        }
        if (result5 !== null) {
          var result6 = parse_RegularExpressionNonTerminator();
          if (result6 !== null) {
            var result4 = [result5, result6];
          } else {
            var result4 = null;
            pos = savedPos0;
          }
        } else {
          var result4 = null;
          pos = savedPos0;
        }
        var result3 = result4 !== null
          ? (function(char_) { return char_; })(result4[1])
          : null;
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_RegularExpressionBackslashSequence();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_RegularExpressionClass();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_RegularExpressionBackslashSequence() {
        var cacheKey = "RegularExpressionBackslashSequence" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 1) === "\\") {
          var result2 = "\\";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\\\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_RegularExpressionNonTerminator();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(char_) { return "\\" + char_; })(result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_RegularExpressionNonTerminator() {
        var cacheKey = "RegularExpressionNonTerminator" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var savedReportMatchFailuresVar0 = reportMatchFailures;
        reportMatchFailures = false;
        var result4 = parse_LineTerminator();
        reportMatchFailures = savedReportMatchFailuresVar0;
        if (result4 === null) {
          var result2 = '';
        } else {
          var result2 = null;
          pos = savedPos1;
        }
        if (result2 !== null) {
          var result3 = parse_SourceCharacter();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(char_) { return char_; })(result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_RegularExpressionClass() {
        var cacheKey = "RegularExpressionClass" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 1) === "[") {
          var result2 = "[";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"[\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_RegularExpressionClassChars();
          if (result3 !== null) {
            if (input.substr(pos, 1) === "]") {
              var result4 = "]";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"]\"");
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(chars) { return "[" + chars + "]"; })(result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_RegularExpressionClassChars() {
        var cacheKey = "RegularExpressionClassChars" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result1 = [];
        var result2 = parse_RegularExpressionClassChar();
        while (result2 !== null) {
          result1.push(result2);
          var result2 = parse_RegularExpressionClassChar();
        }
        var result0 = result1 !== null
          ? (function(chars) { return chars.join(""); })(result1)
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_RegularExpressionClassChar() {
        var cacheKey = "RegularExpressionClassChar" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var savedReportMatchFailuresVar0 = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos).match(/^[\]\\]/) !== null) {
          var result6 = input.charAt(pos);
          pos++;
        } else {
          var result6 = null;
          if (reportMatchFailures) {
            matchFailed("[\\]\\\\]");
          }
        }
        reportMatchFailures = savedReportMatchFailuresVar0;
        if (result6 === null) {
          var result4 = '';
        } else {
          var result4 = null;
          pos = savedPos1;
        }
        if (result4 !== null) {
          var result5 = parse_RegularExpressionNonTerminator();
          if (result5 !== null) {
            var result3 = [result4, result5];
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        var result2 = result3 !== null
          ? (function(char_) { return char_; })(result3[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_RegularExpressionBackslashSequence();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_RegularExpressionFlags() {
        var cacheKey = "RegularExpressionFlags" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result1 = [];
        var result2 = parse_IdentifierPart();
        while (result2 !== null) {
          result1.push(result2);
          var result2 = parse_IdentifierPart();
        }
        var result0 = result1 !== null
          ? (function(parts) { return parts.join(""); })(result1)
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_BreakToken() {
        var cacheKey = "BreakToken" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 5) === "break") {
          var result1 = "break";
          pos += 5;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"break\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_CaseToken() {
        var cacheKey = "CaseToken" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 4) === "case") {
          var result1 = "case";
          pos += 4;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"case\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_CatchToken() {
        var cacheKey = "CatchToken" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 5) === "catch") {
          var result1 = "catch";
          pos += 5;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"catch\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ContinueToken() {
        var cacheKey = "ContinueToken" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 8) === "continue") {
          var result1 = "continue";
          pos += 8;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"continue\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_DebuggerToken() {
        var cacheKey = "DebuggerToken" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 8) === "debugger") {
          var result1 = "debugger";
          pos += 8;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"debugger\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_DefaultToken() {
        var cacheKey = "DefaultToken" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 7) === "default") {
          var result1 = "default";
          pos += 7;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"default\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_DeleteToken() {
        var cacheKey = "DeleteToken" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 6) === "delete") {
          var result2 = "delete";
          pos += 6;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"delete\"");
          }
        }
        if (result2 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result4 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result4 === null) {
            var result3 = '';
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() { return "delete"; })()
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_DoToken() {
        var cacheKey = "DoToken" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 2) === "do") {
          var result1 = "do";
          pos += 2;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"do\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ElseToken() {
        var cacheKey = "ElseToken" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 4) === "else") {
          var result1 = "else";
          pos += 4;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"else\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_FalseToken() {
        var cacheKey = "FalseToken" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 5) === "false") {
          var result1 = "false";
          pos += 5;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"false\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_FinallyToken() {
        var cacheKey = "FinallyToken" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 7) === "finally") {
          var result1 = "finally";
          pos += 7;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"finally\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ForToken() {
        var cacheKey = "ForToken" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 3) === "for") {
          var result1 = "for";
          pos += 3;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"for\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_FunctionToken() {
        var cacheKey = "FunctionToken" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 8) === "function") {
          var result1 = "function";
          pos += 8;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"function\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_GetToken() {
        var cacheKey = "GetToken" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 3) === "get") {
          var result1 = "get";
          pos += 3;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"get\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_IfToken() {
        var cacheKey = "IfToken" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 2) === "if") {
          var result1 = "if";
          pos += 2;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"if\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_InstanceofToken() {
        var cacheKey = "InstanceofToken" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 10) === "instanceof") {
          var result2 = "instanceof";
          pos += 10;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"instanceof\"");
          }
        }
        if (result2 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result4 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result4 === null) {
            var result3 = '';
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() { return "instanceof"; })()
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_InToken() {
        var cacheKey = "InToken" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 2) === "in") {
          var result2 = "in";
          pos += 2;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"in\"");
          }
        }
        if (result2 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result4 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result4 === null) {
            var result3 = '';
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() { return "in"; })()
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_NewToken() {
        var cacheKey = "NewToken" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 3) === "new") {
          var result1 = "new";
          pos += 3;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"new\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_NullToken() {
        var cacheKey = "NullToken" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 4) === "null") {
          var result1 = "null";
          pos += 4;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"null\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ReturnToken() {
        var cacheKey = "ReturnToken" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 6) === "return") {
          var result1 = "return";
          pos += 6;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"return\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_SetToken() {
        var cacheKey = "SetToken" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 3) === "set") {
          var result1 = "set";
          pos += 3;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"set\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_SwitchToken() {
        var cacheKey = "SwitchToken" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 6) === "switch") {
          var result1 = "switch";
          pos += 6;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"switch\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ThisToken() {
        var cacheKey = "ThisToken" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 4) === "this") {
          var result1 = "this";
          pos += 4;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"this\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ThrowToken() {
        var cacheKey = "ThrowToken" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 5) === "throw") {
          var result1 = "throw";
          pos += 5;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"throw\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_TrueToken() {
        var cacheKey = "TrueToken" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 4) === "true") {
          var result1 = "true";
          pos += 4;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"true\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_TryToken() {
        var cacheKey = "TryToken" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 3) === "try") {
          var result1 = "try";
          pos += 3;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"try\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_TypeofToken() {
        var cacheKey = "TypeofToken" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 6) === "typeof") {
          var result2 = "typeof";
          pos += 6;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"typeof\"");
          }
        }
        if (result2 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result4 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result4 === null) {
            var result3 = '';
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() { return "typeof"; })()
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_VarToken() {
        var cacheKey = "VarToken" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 3) === "var") {
          var result1 = "var";
          pos += 3;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"var\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_VoidToken() {
        var cacheKey = "VoidToken" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 4) === "void") {
          var result2 = "void";
          pos += 4;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"void\"");
          }
        }
        if (result2 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result4 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result4 === null) {
            var result3 = '';
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() { return "void"; })()
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_WhileToken() {
        var cacheKey = "WhileToken" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 5) === "while") {
          var result1 = "while";
          pos += 5;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"while\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_WithToken() {
        var cacheKey = "WithToken" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 4) === "with") {
          var result1 = "with";
          pos += 4;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"with\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Ll() {
        var cacheKey = "Ll" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos).match(/^[abcdefghijklmnopqrstuvwxyzªµºßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿāăąćĉċčďđēĕėęěĝğġģĥħĩīĭįıĳĵķĸĺļľŀłńņňŉŋōŏőœŕŗřśŝşšţťŧũūŭůűųŵŷźżžſƀƃƅƈƌƍƒƕƙƚƛƞơƣƥƨƪƫƭưƴƶƹƺƽƾƿǆǉǌǎǐǒǔǖǘǚǜǝǟǡǣǥǧǩǫǭǯǰǳǵǹǻǽǿȁȃȅȇȉȋȍȏȑȓȕȗșțȝȟȡȣȥȧȩȫȭȯȱȳȴȵȶȷȸȹȼȿɀɂɇɉɋɍɏɐɑɒɓɔɕɖɗɘəɚɛɜɝɞɟɠɡɢɣɤɥɦɧɨɩɪɫɬɭɮɯɰɱɲɳɴɵɶɷɸɹɺɻɼɽɾɿʀʁʂʃʄʅʆʇʈʉʊʋʌʍʎʏʐʑʒʓʕʖʗʘʙʚʛʜʝʞʟʠʡʢʣʤʥʦʧʨʩʪʫʬʭʮʯͱͳͷͻͼͽΐάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώϐϑϕϖϗϙϛϝϟϡϣϥϧϩϫϭϯϰϱϲϳϵϸϻϼабвгдежзийклмнопрстуфхцчшщъыьэюяѐёђѓєѕіїјљњћќѝўџѡѣѥѧѩѫѭѯѱѳѵѷѹѻѽѿҁҋҍҏґғҕҗҙқҝҟҡңҥҧҩҫҭүұҳҵҷҹһҽҿӂӄӆӈӊӌӎӏӑӓӕӗәӛӝӟӡӣӥӧөӫӭӯӱӳӵӷӹӻӽӿԁԃԅԇԉԋԍԏԑԓԕԗԙԛԝԟԡԣաբգդեզէըթժիլխծկհձղճմյնշոչպջռսվտրցւփքօֆևᴀᴁᴂᴃᴄᴅᴆᴇᴈᴉᴊᴋᴌᴍᴎᴏᴐᴑᴒᴓᴔᴕᴖᴗᴘᴙᴚᴛᴜᴝᴞᴟᴠᴡᴢᴣᴤᴥᴦᴧᴨᴩᴪᴫᵢᵣᵤᵥᵦᵧᵨᵩᵪᵫᵬᵭᵮᵯᵰᵱᵲᵳᵴᵵᵶᵷᵹᵺᵻᵼᵽᵾᵿᶀᶁᶂᶃᶄᶅᶆᶇᶈᶉᶊᶋᶌᶍᶎᶏᶐᶑᶒᶓᶔᶕᶖᶗᶘᶙᶚḁḃḅḇḉḋḍḏḑḓḕḗḙḛḝḟḡḣḥḧḩḫḭḯḱḳḵḷḹḻḽḿṁṃṅṇṉṋṍṏṑṓṕṗṙṛṝṟṡṣṥṧṩṫṭṯṱṳṵṷṹṻṽṿẁẃẅẇẉẋẍẏẑẓẕẖẗẘẙẚẛẜẝẟạảấầẩẫậắằẳẵặẹẻẽếềểễệỉịọỏốồổỗộớờởỡợụủứừửữựỳỵỷỹỻỽỿἀἁἂἃἄἅἆἇἐἑἒἓἔἕἠἡἢἣἤἥἦἧἰἱἲἳἴἵἶἷὀὁὂὃὄὅὐὑὒὓὔὕὖὗὠὡὢὣὤὥὦὧὰάὲέὴήὶίὸόὺύὼώᾀᾁᾂᾃᾄᾅᾆᾇᾐᾑᾒᾓᾔᾕᾖᾗᾠᾡᾢᾣᾤᾥᾦᾧᾰᾱᾲᾳᾴᾶᾷιῂῃῄῆῇῐῑῒΐῖῗῠῡῢΰῤῥῦῧῲῳῴῶῷⁱⁿℊℎℏℓℯℴℹℼℽⅆⅇⅈⅉⅎↄⰰⰱⰲⰳⰴⰵⰶⰷⰸⰹⰺⰻⰼⰽⰾⰿⱀⱁⱂⱃⱄⱅⱆⱇⱈⱉⱊⱋⱌⱍⱎⱏⱐⱑⱒⱓⱔⱕⱖⱗⱘⱙⱚⱛⱜⱝⱞⱡⱥⱦⱨⱪⱬⱱⱳⱴⱶⱷⱸⱹⱺⱻⱼⲁⲃⲅⲇⲉⲋⲍⲏⲑⲓⲕⲗⲙⲛⲝⲟⲡⲣⲥⲧⲩⲫⲭⲯⲱⲳⲵⲷⲹⲻⲽⲿⳁⳃⳅⳇⳉⳋⳍⳏⳑⳓⳕⳗⳙⳛⳝⳟⳡⳣⳤⴀⴁⴂⴃⴄⴅⴆⴇⴈⴉⴊⴋⴌⴍⴎⴏⴐⴑⴒⴓⴔⴕⴖⴗⴘⴙⴚⴛⴜⴝⴞⴟⴠⴡⴢⴣⴤⴥꙁꙃꙅꙇꙉꙋꙍꙏꙑꙓꙕꙗꙙꙛꙝꙟꙣꙥꙧꙩꙫꙭꚁꚃꚅꚇꚉꚋꚍꚏꚑꚓꚕꚗꜣꜥꜧꜩꜫꜭꜯꜰꜱꜳꜵꜷꜹꜻꜽꜿꝁꝃꝅꝇꝉꝋꝍꝏꝑꝓꝕꝗꝙꝛꝝꝟꝡꝣꝥꝧꝩꝫꝭꝯꝱꝲꝳꝴꝵꝶꝷꝸꝺꝼꝿꞁꞃꞅꞇꞌﬀﬁﬂﬃﬄﬅﬆﬓﬔﬕﬖﬗａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[abcdefghijklmnopqrstuvwxyzªµºßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿāăąćĉċčďđēĕėęěĝğġģĥħĩīĭįıĳĵķĸĺļľŀłńņňŉŋōŏőœŕŗřśŝşšţťŧũūŭůűųŵŷźżžſƀƃƅƈƌƍƒƕƙƚƛƞơƣƥƨƪƫƭưƴƶƹƺƽƾƿǆǉǌǎǐǒǔǖǘǚǜǝǟǡǣǥǧǩǫǭǯǰǳǵǹǻǽǿȁȃȅȇȉȋȍȏȑȓȕȗșțȝȟȡȣȥȧȩȫȭȯȱȳȴȵȶȷȸȹȼȿɀɂɇɉɋɍɏɐɑɒɓɔɕɖɗɘəɚɛɜɝɞɟɠɡɢɣɤɥɦɧɨɩɪɫɬɭɮɯɰɱɲɳɴɵɶɷɸɹɺɻɼɽɾɿʀʁʂʃʄʅʆʇʈʉʊʋʌʍʎʏʐʑʒʓʕʖʗʘʙʚʛʜʝʞʟʠʡʢʣʤʥʦʧʨʩʪʫʬʭʮʯͱͳͷͻͼͽΐάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώϐϑϕϖϗϙϛϝϟϡϣϥϧϩϫϭϯϰϱϲϳϵϸϻϼабвгдежзийклмнопрстуфхцчшщъыьэюяѐёђѓєѕіїјљњћќѝўџѡѣѥѧѩѫѭѯѱѳѵѷѹѻѽѿҁҋҍҏґғҕҗҙқҝҟҡңҥҧҩҫҭүұҳҵҷҹһҽҿӂӄӆӈӊӌӎӏӑӓӕӗәӛӝӟӡӣӥӧөӫӭӯӱӳӵӷӹӻӽӿԁԃԅԇԉԋԍԏԑԓԕԗԙԛԝԟԡԣաբգդեզէըթժիլխծկհձղճմյնշոչպջռսվտրցւփքօֆևᴀᴁᴂᴃᴄᴅᴆᴇᴈᴉᴊᴋᴌᴍᴎᴏᴐᴑᴒᴓᴔᴕᴖᴗᴘᴙᴚᴛᴜᴝᴞᴟᴠᴡᴢᴣᴤᴥᴦᴧᴨᴩᴪᴫᵢᵣᵤᵥᵦᵧᵨᵩᵪᵫᵬᵭᵮᵯᵰᵱᵲᵳᵴᵵᵶᵷᵹᵺᵻᵼᵽᵾᵿᶀᶁᶂᶃᶄᶅᶆᶇᶈᶉᶊᶋᶌᶍᶎᶏᶐᶑᶒᶓᶔᶕᶖᶗᶘᶙᶚḁḃḅḇḉḋḍḏḑḓḕḗḙḛḝḟḡḣḥḧḩḫḭḯḱḳḵḷḹḻḽḿṁṃṅṇṉṋṍṏṑṓṕṗṙṛṝṟṡṣṥṧṩṫṭṯṱṳṵṷṹṻṽṿẁẃẅẇẉẋẍẏẑẓẕẖẗẘẙẚẛẜẝẟạảấầẩẫậắằẳẵặẹẻẽếềểễệỉịọỏốồổỗộớờởỡợụủứừửữựỳỵỷỹỻỽỿἀἁἂἃἄἅἆἇἐἑἒἓἔἕἠἡἢἣἤἥἦἧἰἱἲἳἴἵἶἷὀὁὂὃὄὅὐὑὒὓὔὕὖὗὠὡὢὣὤὥὦὧὰάὲέὴήὶίὸόὺύὼώᾀᾁᾂᾃᾄᾅᾆᾇᾐᾑᾒᾓᾔᾕᾖᾗᾠᾡᾢᾣᾤᾥᾦᾧᾰᾱᾲᾳᾴᾶᾷιῂῃῄῆῇῐῑῒΐῖῗῠῡῢΰῤῥῦῧῲῳῴῶῷⁱⁿℊℎℏℓℯℴℹℼℽⅆⅇⅈⅉⅎↄⰰⰱⰲⰳⰴⰵⰶⰷⰸⰹⰺⰻⰼⰽⰾⰿⱀⱁⱂⱃⱄⱅⱆⱇⱈⱉⱊⱋⱌⱍⱎⱏⱐⱑⱒⱓⱔⱕⱖⱗⱘⱙⱚⱛⱜⱝⱞⱡⱥⱦⱨⱪⱬⱱⱳⱴⱶⱷⱸⱹⱺⱻⱼⲁⲃⲅⲇⲉⲋⲍⲏⲑⲓⲕⲗⲙⲛⲝⲟⲡⲣⲥⲧⲩⲫⲭⲯⲱⲳⲵⲷⲹⲻⲽⲿⳁⳃⳅⳇⳉⳋⳍⳏⳑⳓⳕⳗⳙⳛⳝⳟⳡⳣⳤⴀⴁⴂⴃⴄⴅⴆⴇⴈⴉⴊⴋⴌⴍⴎⴏⴐⴑⴒⴓⴔⴕⴖⴗⴘⴙⴚⴛⴜⴝⴞⴟⴠⴡⴢⴣⴤⴥꙁꙃꙅꙇꙉꙋꙍꙏꙑꙓꙕꙗꙙꙛꙝꙟꙣꙥꙧꙩꙫꙭꚁꚃꚅꚇꚉꚋꚍꚏꚑꚓꚕꚗꜣꜥꜧꜩꜫꜭꜯꜰꜱꜳꜵꜷꜹꜻꜽꜿꝁꝃꝅꝇꝉꝋꝍꝏꝑꝓꝕꝗꝙꝛꝝꝟꝡꝣꝥꝧꝩꝫꝭꝯꝱꝲꝳꝴꝵꝶꝷꝸꝺꝼꝿꞁꞃꞅꞇꞌﬀﬁﬂﬃﬄﬅﬆﬓﬔﬕﬖﬗａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ]");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Lm() {
        var cacheKey = "Lm" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos).match(/^[ʰʱʲʳʴʵʶʷʸʹʺʻʼʽʾʿˀˁˆˇˈˉˊˋˌˍˎˏːˑˠˡˢˣˤˬˮʹͺՙـۥۦߴߵߺॱๆໆჼៗᡃᱸᱹᱺᱻᱼᱽᴬᴭᴮᴯᴰᴱᴲᴳᴴᴵᴶᴷᴸᴹᴺᴻᴼᴽᴾᴿᵀᵁᵂᵃᵄᵅᵆᵇᵈᵉᵊᵋᵌᵍᵎᵏᵐᵑᵒᵓᵔᵕᵖᵗᵘᵙᵚᵛᵜᵝᵞᵟᵠᵡᵸᶛᶜᶝᶞᶟᶠᶡᶢᶣᶤᶥᶦᶧᶨᶩᶪᶫᶬᶭᶮᶯᶰᶱᶲᶳᶴᶵᶶᶷᶸᶹᶺᶻᶼᶽᶾᶿₐₑₒₓₔⱽⵯⸯ々〱〲〳〴〵〻ゝゞーヽヾꀕꘌꙿꜗꜘꜙꜚꜛꜜꜝꜞꜟꝰꞈｰﾞﾟ]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[ʰʱʲʳʴʵʶʷʸʹʺʻʼʽʾʿˀˁˆˇˈˉˊˋˌˍˎˏːˑˠˡˢˣˤˬˮʹͺՙـۥۦߴߵߺॱๆໆჼៗᡃᱸᱹᱺᱻᱼᱽᴬᴭᴮᴯᴰᴱᴲᴳᴴᴵᴶᴷᴸᴹᴺᴻᴼᴽᴾᴿᵀᵁᵂᵃᵄᵅᵆᵇᵈᵉᵊᵋᵌᵍᵎᵏᵐᵑᵒᵓᵔᵕᵖᵗᵘᵙᵚᵛᵜᵝᵞᵟᵠᵡᵸᶛᶜᶝᶞᶟᶠᶡᶢᶣᶤᶥᶦᶧᶨᶩᶪᶫᶬᶭᶮᶯᶰᶱᶲᶳᶴᶵᶶᶷᶸᶹᶺᶻᶼᶽᶾᶿₐₑₒₓₔⱽⵯⸯ々〱〲〳〴〵〻ゝゞーヽヾꀕꘌꙿꜗꜘꜙꜚꜛꜜꜝꜞꜟꝰꞈｰﾞﾟ]");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Lo() {
        var cacheKey = "Lo" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos).match(/^[ƻǀǁǂǃʔאבגדהוזחטיךכלםמןנסעףפץצקרשתװױײءآأؤإئابةتثجحخدذرزسشصضطظعغػؼؽؾؿفقكلمنهوىيٮٯٱٲٳٴٵٶٷٸٹٺٻټٽپٿڀځڂڃڄڅچڇڈډڊڋڌڍڎڏڐڑڒړڔڕږڗژڙښڛڜڝڞڟڠڡڢڣڤڥڦڧڨکڪګڬڭڮگڰڱڲڳڴڵڶڷڸڹںڻڼڽھڿۀہۂۃۄۅۆۇۈۉۊۋیۍێۏېۑےۓەۮۯۺۻۼۿܐܒܓܔܕܖܗܘܙܚܛܜܝܞܟܠܡܢܣܤܥܦܧܨܩܪܫܬܭܮܯݍݎݏݐݑݒݓݔݕݖݗݘݙݚݛݜݝݞݟݠݡݢݣݤݥݦݧݨݩݪݫݬݭݮݯݰݱݲݳݴݵݶݷݸݹݺݻݼݽݾݿހށނރބޅކއވމފދތލގޏސޑޒޓޔޕޖޗޘޙޚޛޜޝޞޟޠޡޢޣޤޥޱߊߋߌߍߎߏߐߑߒߓߔߕߖߗߘߙߚߛߜߝߞߟߠߡߢߣߤߥߦߧߨߩߪऄअआइईउऊऋऌऍऎएऐऑऒओऔकखगघङचछजझञटठडढणतथदधनऩपफबभमयरऱलळऴवशषसहऽॐक़ख़ग़ज़ड़ढ़फ़य़ॠॡॲॻॼॽॾॿঅআইঈউঊঋঌএঐওঔকখগঘঙচছজঝঞটঠডঢণতথদধনপফবভমযরলশষসহঽৎড়ঢ়য়ৠৡৰৱਅਆਇਈਉਊਏਐਓਔਕਖਗਘਙਚਛਜਝਞਟਠਡਢਣਤਥਦਧਨਪਫਬਭਮਯਰਲਲ਼ਵਸ਼ਸਹਖ਼ਗ਼ਜ਼ੜਫ਼ੲੳੴઅઆઇઈઉઊઋઌઍએઐઑઓઔકખગઘઙચછજઝઞટઠડઢણતથદધનપફબભમયરલળવશષસહઽૐૠૡଅଆଇଈଉଊଋଌଏଐଓଔକଖଗଘଙଚଛଜଝଞଟଠଡଢଣତଥଦଧନପଫବଭମଯରଲଳଵଶଷସହଽଡ଼ଢ଼ୟୠୡୱஃஅஆஇஈஉஊஎஏஐஒஓஔகஙசஜஞடணதநனபமயரறலளழவஶஷஸஹௐఅఆఇఈఉఊఋఌఎఏఐఒఓఔకఖగఘఙచఛజఝఞటఠడఢణతథదధనపఫబభమయరఱలళవశషసహఽౘౙౠౡಅಆಇಈಉಊಋಌಎಏಐಒಓಔಕಖಗಘಙಚಛಜಝಞಟಠಡಢಣತಥದಧನಪಫಬಭಮಯರಱಲಳವಶಷಸಹಽೞೠೡഅആഇഈഉഊഋഌഎഏഐഒഓഔകഖഗഘങചഛജഝഞടഠഡഢണതഥദധനപഫബഭമയരറലളഴവശഷസഹഽൠൡൺൻർൽൾൿඅආඇඈඉඊඋඌඍඎඏඐඑඒඓඔඕඖකඛගඝඞඟචඡජඣඤඥඦටඨඩඪණඬතථදධනඳපඵබභමඹයරලවශෂසහළෆกขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะาำเแโใไๅກຂຄງຈຊຍດຕຖທນບປຜຝພຟມຢຣລວສຫອຮຯະາຳຽເແໂໃໄໜໝༀཀཁགགྷངཅཆཇཉཊཋཌཌྷཎཏཐདདྷནཔཕབབྷམཙཚཛཛྷཝཞཟའཡརལཤཥསཧཨཀྵཪཫཬྈྉྊྋကခဂဃငစဆဇဈဉညဋဌဍဎဏတထဒဓနပဖဗဘမယရလဝသဟဠအဢဣဤဥဦဧဨဩဪဿၐၑၒၓၔၕၚၛၜၝၡၥၦၮၯၰၵၶၷၸၹၺၻၼၽၾၿႀႁႎაბგდევზთიკლმნოპჟრსტუფქღყშჩცძწჭხჯჰჱჲჳჴჵჶჷჸჹჺᄀᄁᄂᄃᄄᄅᄆᄇᄈᄉᄊᄋᄌᄍᄎᄏᄐᄑᄒᄓᄔᄕᄖᄗᄘᄙᄚᄛᄜᄝᄞᄟᄠᄡᄢᄣᄤᄥᄦᄧᄨᄩᄪᄫᄬᄭᄮᄯᄰᄱᄲᄳᄴᄵᄶᄷᄸᄹᄺᄻᄼᄽᄾᄿᅀᅁᅂᅃᅄᅅᅆᅇᅈᅉᅊᅋᅌᅍᅎᅏᅐᅑᅒᅓᅔᅕᅖᅗᅘᅙᅟᅠᅡᅢᅣᅤᅥᅦᅧᅨᅩᅪᅫᅬᅭᅮᅯᅰᅱᅲᅳᅴᅵᅶᅷᅸᅹᅺᅻᅼᅽᅾᅿᆀᆁᆂᆃᆄᆅᆆᆇᆈᆉᆊᆋᆌᆍᆎᆏᆐᆑᆒᆓᆔᆕᆖᆗᆘᆙᆚᆛᆜᆝᆞᆟᆠᆡᆢᆨᆩᆪᆫᆬᆭᆮᆯᆰᆱᆲᆳᆴᆵᆶᆷᆸᆹᆺᆻᆼᆽᆾᆿᇀᇁᇂᇃᇄᇅᇆᇇᇈᇉᇊᇋᇌᇍᇎᇏᇐᇑᇒᇓᇔᇕᇖᇗᇘᇙᇚᇛᇜᇝᇞᇟᇠᇡᇢᇣᇤᇥᇦᇧᇨᇩᇪᇫᇬᇭᇮᇯᇰᇱᇲᇳᇴᇵᇶᇷᇸᇹሀሁሂሃሄህሆሇለሉሊላሌልሎሏሐሑሒሓሔሕሖሗመሙሚማሜምሞሟሠሡሢሣሤሥሦሧረሩሪራሬርሮሯሰሱሲሳሴስሶሷሸሹሺሻሼሽሾሿቀቁቂቃቄቅቆቇቈቊቋቌቍቐቑቒቓቔቕቖቘቚቛቜቝበቡቢባቤብቦቧቨቩቪቫቬቭቮቯተቱቲታቴትቶቷቸቹቺቻቼችቾቿኀኁኂኃኄኅኆኇኈኊኋኌኍነኑኒናኔንኖኗኘኙኚኛኜኝኞኟአኡኢኣኤእኦኧከኩኪካኬክኮኯኰኲኳኴኵኸኹኺኻኼኽኾዀዂዃዄዅወዉዊዋዌውዎዏዐዑዒዓዔዕዖዘዙዚዛዜዝዞዟዠዡዢዣዤዥዦዧየዩዪያዬይዮዯደዱዲዳዴድዶዷዸዹዺዻዼዽዾዿጀጁጂጃጄጅጆጇገጉጊጋጌግጎጏጐጒጓጔጕጘጙጚጛጜጝጞጟጠጡጢጣጤጥጦጧጨጩጪጫጬጭጮጯጰጱጲጳጴጵጶጷጸጹጺጻጼጽጾጿፀፁፂፃፄፅፆፇፈፉፊፋፌፍፎፏፐፑፒፓፔፕፖፗፘፙፚᎀᎁᎂᎃᎄᎅᎆᎇᎈᎉᎊᎋᎌᎍᎎᎏᎠᎡᎢᎣᎤᎥᎦᎧᎨᎩᎪᎫᎬᎭᎮᎯᎰᎱᎲᎳᎴᎵᎶᎷᎸᎹᎺᎻᎼᎽᎾᎿᏀᏁᏂᏃᏄᏅᏆᏇᏈᏉᏊᏋᏌᏍᏎᏏᏐᏑᏒᏓᏔᏕᏖᏗᏘᏙᏚᏛᏜᏝᏞᏟᏠᏡᏢᏣᏤᏥᏦᏧᏨᏩᏪᏫᏬᏭᏮᏯᏰᏱᏲᏳᏴᐁᐂᐃᐄᐅᐆᐇᐈᐉᐊᐋᐌᐍᐎᐏᐐᐑᐒᐓᐔᐕᐖᐗᐘᐙᐚᐛᐜᐝᐞᐟᐠᐡᐢᐣᐤᐥᐦᐧᐨᐩᐪᐫᐬᐭᐮᐯᐰᐱᐲᐳᐴᐵᐶᐷᐸᐹᐺᐻᐼᐽᐾᐿᑀᑁᑂᑃᑄᑅᑆᑇᑈᑉᑊᑋᑌᑍᑎᑏᑐᑑᑒᑓᑔᑕᑖᑗᑘᑙᑚᑛᑜᑝᑞᑟᑠᑡᑢᑣᑤᑥᑦᑧᑨᑩᑪᑫᑬᑭᑮᑯᑰᑱᑲᑳᑴᑵᑶᑷᑸᑹᑺᑻᑼᑽᑾᑿᒀᒁᒂᒃᒄᒅᒆᒇᒈᒉᒊᒋᒌᒍᒎᒏᒐᒑᒒᒓᒔᒕᒖᒗᒘᒙᒚᒛᒜᒝᒞᒟᒠᒡᒢᒣᒤᒥᒦᒧᒨᒩᒪᒫᒬᒭᒮᒯᒰᒱᒲᒳᒴᒵᒶᒷᒸᒹᒺᒻᒼᒽᒾᒿᓀᓁᓂᓃᓄᓅᓆᓇᓈᓉᓊᓋᓌᓍᓎᓏᓐᓑᓒᓓᓔᓕᓖᓗᓘᓙᓚᓛᓜᓝᓞᓟᓠᓡᓢᓣᓤᓥᓦᓧᓨᓩᓪᓫᓬᓭᓮᓯᓰᓱᓲᓳᓴᓵᓶᓷᓸᓹᓺᓻᓼᓽᓾᓿᔀᔁᔂᔃᔄᔅᔆᔇᔈᔉᔊᔋᔌᔍᔎᔏᔐᔑᔒᔓᔔᔕᔖᔗᔘᔙᔚᔛᔜᔝᔞᔟᔠᔡᔢᔣᔤᔥᔦᔧᔨᔩᔪᔫᔬᔭᔮᔯᔰᔱᔲᔳᔴᔵᔶᔷᔸᔹᔺᔻᔼᔽᔾᔿᕀᕁᕂᕃᕄᕅᕆᕇᕈᕉᕊᕋᕌᕍᕎᕏᕐᕑᕒᕓᕔᕕᕖᕗᕘᕙᕚᕛᕜᕝᕞᕟᕠᕡᕢᕣᕤᕥᕦᕧᕨᕩᕪᕫᕬᕭᕮᕯᕰᕱᕲᕳᕴᕵᕶᕷᕸᕹᕺᕻᕼᕽᕾᕿᖀᖁᖂᖃᖄᖅᖆᖇᖈᖉᖊᖋᖌᖍᖎᖏᖐᖑᖒᖓᖔᖕᖖᖗᖘᖙᖚᖛᖜᖝᖞᖟᖠᖡᖢᖣᖤᖥᖦᖧᖨᖩᖪᖫᖬᖭᖮᖯᖰᖱᖲᖳᖴᖵᖶᖷᖸᖹᖺᖻᖼᖽᖾᖿᗀᗁᗂᗃᗄᗅᗆᗇᗈᗉᗊᗋᗌᗍᗎᗏᗐᗑᗒᗓᗔᗕᗖᗗᗘᗙᗚᗛᗜᗝᗞᗟᗠᗡᗢᗣᗤᗥᗦᗧᗨᗩᗪᗫᗬᗭᗮᗯᗰᗱᗲᗳᗴᗵᗶᗷᗸᗹᗺᗻᗼᗽᗾᗿᘀᘁᘂᘃᘄᘅᘆᘇᘈᘉᘊᘋᘌᘍᘎᘏᘐᘑᘒᘓᘔᘕᘖᘗᘘᘙᘚᘛᘜᘝᘞᘟᘠᘡᘢᘣᘤᘥᘦᘧᘨᘩᘪᘫᘬᘭᘮᘯᘰᘱᘲᘳᘴᘵᘶᘷᘸᘹᘺᘻᘼᘽᘾᘿᙀᙁᙂᙃᙄᙅᙆᙇᙈᙉᙊᙋᙌᙍᙎᙏᙐᙑᙒᙓᙔᙕᙖᙗᙘᙙᙚᙛᙜᙝᙞᙟᙠᙡᙢᙣᙤᙥᙦᙧᙨᙩᙪᙫᙬᙯᙰᙱᙲᙳᙴᙵᙶᚁᚂᚃᚄᚅᚆᚇᚈᚉᚊᚋᚌᚍᚎᚏᚐᚑᚒᚓᚔᚕᚖᚗᚘᚙᚚᚠᚡᚢᚣᚤᚥᚦᚧᚨᚩᚪᚫᚬᚭᚮᚯᚰᚱᚲᚳᚴᚵᚶᚷᚸᚹᚺᚻᚼᚽᚾᚿᛀᛁᛂᛃᛄᛅᛆᛇᛈᛉᛊᛋᛌᛍᛎᛏᛐᛑᛒᛓᛔᛕᛖᛗᛘᛙᛚᛛᛜᛝᛞᛟᛠᛡᛢᛣᛤᛥᛦᛧᛨᛩᛪᜀᜁᜂᜃᜄᜅᜆᜇᜈᜉᜊᜋᜌᜎᜏᜐᜑᜠᜡᜢᜣᜤᜥᜦᜧᜨᜩᜪᜫᜬᜭᜮᜯᜰᜱᝀᝁᝂᝃᝄᝅᝆᝇᝈᝉᝊᝋᝌᝍᝎᝏᝐᝑᝠᝡᝢᝣᝤᝥᝦᝧᝨᝩᝪᝫᝬᝮᝯᝰកខគឃងចឆជឈញដឋឌឍណតថទធនបផពភមយរលវឝឞសហឡអឣឤឥឦឧឨឩឪឫឬឭឮឯឰឱឲឳៜᠠᠡᠢᠣᠤᠥᠦᠧᠨᠩᠪᠫᠬᠭᠮᠯᠰᠱᠲᠳᠴᠵᠶᠷᠸᠹᠺᠻᠼᠽᠾᠿᡀᡁᡂᡄᡅᡆᡇᡈᡉᡊᡋᡌᡍᡎᡏᡐᡑᡒᡓᡔᡕᡖᡗᡘᡙᡚᡛᡜᡝᡞᡟᡠᡡᡢᡣᡤᡥᡦᡧᡨᡩᡪᡫᡬᡭᡮᡯᡰᡱᡲᡳᡴᡵᡶᡷᢀᢁᢂᢃᢄᢅᢆᢇᢈᢉᢊᢋᢌᢍᢎᢏᢐᢑᢒᢓᢔᢕᢖᢗᢘᢙᢚᢛᢜᢝᢞᢟᢠᢡᢢᢣᢤᢥᢦᢧᢨᢪᤀᤁᤂᤃᤄᤅᤆᤇᤈᤉᤊᤋᤌᤍᤎᤏᤐᤑᤒᤓᤔᤕᤖᤗᤘᤙᤚᤛᤜᥐᥑᥒᥓᥔᥕᥖᥗᥘᥙᥚᥛᥜᥝᥞᥟᥠᥡᥢᥣᥤᥥᥦᥧᥨᥩᥪᥫᥬᥭᥰᥱᥲᥳᥴᦀᦁᦂᦃᦄᦅᦆᦇᦈᦉᦊᦋᦌᦍᦎᦏᦐᦑᦒᦓᦔᦕᦖᦗᦘᦙᦚᦛᦜᦝᦞᦟᦠᦡᦢᦣᦤᦥᦦᦧᦨᦩᧁᧂᧃᧄᧅᧆᧇᨀᨁᨂᨃᨄᨅᨆᨇᨈᨉᨊᨋᨌᨍᨎᨏᨐᨑᨒᨓᨔᨕᨖᬅᬆᬇᬈᬉᬊᬋᬌᬍᬎᬏᬐᬑᬒᬓᬔᬕᬖᬗᬘᬙᬚᬛᬜᬝᬞᬟᬠᬡᬢᬣᬤᬥᬦᬧᬨᬩᬪᬫᬬᬭᬮᬯᬰᬱᬲᬳᭅᭆᭇᭈᭉᭊᭋᮃᮄᮅᮆᮇᮈᮉᮊᮋᮌᮍᮎᮏᮐᮑᮒᮓᮔᮕᮖᮗᮘᮙᮚᮛᮜᮝᮞᮟᮠᮮᮯᰀᰁᰂᰃᰄᰅᰆᰇᰈᰉᰊᰋᰌᰍᰎᰏᰐᰑᰒᰓᰔᰕᰖᰗᰘᰙᰚᰛᰜᰝᰞᰟᰠᰡᰢᰣᱍᱎᱏᱚᱛᱜᱝᱞᱟᱠᱡᱢᱣᱤᱥᱦᱧᱨᱩᱪᱫᱬᱭᱮᱯᱰᱱᱲᱳᱴᱵᱶᱷℵℶℷℸⴰⴱⴲⴳⴴⴵⴶⴷⴸⴹⴺⴻⴼⴽⴾⴿⵀⵁⵂⵃⵄⵅⵆⵇⵈⵉⵊⵋⵌⵍⵎⵏⵐⵑⵒⵓⵔⵕⵖⵗⵘⵙⵚⵛⵜⵝⵞⵟⵠⵡⵢⵣⵤⵥⶀⶁⶂⶃⶄⶅⶆⶇⶈⶉⶊⶋⶌⶍⶎⶏⶐⶑⶒⶓⶔⶕⶖⶠⶡⶢⶣⶤⶥⶦⶨⶩⶪⶫⶬⶭⶮⶰⶱⶲⶳⶴⶵⶶⶸⶹⶺⶻⶼⶽⶾⷀⷁⷂⷃⷄⷅⷆⷈⷉⷊⷋⷌⷍⷎⷐⷑⷒⷓⷔⷕⷖⷘⷙⷚⷛⷜⷝⷞ〆〼ぁあぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎわゐゑをんゔゕゖゟァアィイゥウェエォオカガキギクグケゲコゴサザシジスズセゼソゾタダチヂッツヅテデトドナニヌネノハバパヒビピフブプヘベペホボポマミムメモャヤュユョヨラリルレロヮワヰヱヲンヴヵヶヷヸヹヺヿㄅㄆㄇㄈㄉㄊㄋㄌㄍㄎㄏㄐㄑㄒㄓㄔㄕㄖㄗㄘㄙㄚㄛㄜㄝㄞㄟㄠㄡㄢㄣㄤㄥㄦㄧㄨㄩㄪㄫㄬㄭㄱㄲㄳㄴㄵㄶㄷㄸㄹㄺㄻㄼㄽㄾㄿㅀㅁㅂㅃㅄㅅㅆㅇㅈㅉㅊㅋㅌㅍㅎㅏㅐㅑㅒㅓㅔㅕㅖㅗㅘㅙㅚㅛㅜㅝㅞㅟㅠㅡㅢㅣㅤㅥㅦㅧㅨㅩㅪㅫㅬㅭㅮㅯㅰㅱㅲㅳㅴㅵㅶㅷㅸㅹㅺㅻㅼㅽㅾㅿㆀㆁㆂㆃㆄㆅㆆㆇㆈㆉㆊㆋㆌㆍㆎㆠㆡㆢㆣㆤㆥㆦㆧㆨㆩㆪㆫㆬㆭㆮㆯㆰㆱㆲㆳㆴㆵㆶㆷㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ㐀䶵一鿃ꀀꀁꀂꀃꀄꀅꀆꀇꀈꀉꀊꀋꀌꀍꀎꀏꀐꀑꀒꀓꀔꀖꀗꀘꀙꀚꀛꀜꀝꀞꀟꀠꀡꀢꀣꀤꀥꀦꀧꀨꀩꀪꀫꀬꀭꀮꀯꀰꀱꀲꀳꀴꀵꀶꀷꀸꀹꀺꀻꀼꀽꀾꀿꁀꁁꁂꁃꁄꁅꁆꁇꁈꁉꁊꁋꁌꁍꁎꁏꁐꁑꁒꁓꁔꁕꁖꁗꁘꁙꁚꁛꁜꁝꁞꁟꁠꁡꁢꁣꁤꁥꁦꁧꁨꁩꁪꁫꁬꁭꁮꁯꁰꁱꁲꁳꁴꁵꁶꁷꁸꁹꁺꁻꁼꁽꁾꁿꂀꂁꂂꂃꂄꂅꂆꂇꂈꂉꂊꂋꂌꂍꂎꂏꂐꂑꂒꂓꂔꂕꂖꂗꂘꂙꂚꂛꂜꂝꂞꂟꂠꂡꂢꂣꂤꂥꂦꂧꂨꂩꂪꂫꂬꂭꂮꂯꂰꂱꂲꂳꂴꂵꂶꂷꂸꂹꂺꂻꂼꂽꂾꂿꃀꃁꃂꃃꃄꃅꃆꃇꃈꃉꃊꃋꃌꃍꃎꃏꃐꃑꃒꃓꃔꃕꃖꃗꃘꃙꃚꃛꃜꃝꃞꃟꃠꃡꃢꃣꃤꃥꃦꃧꃨꃩꃪꃫꃬꃭꃮꃯꃰꃱꃲꃳꃴꃵꃶꃷꃸꃹꃺꃻꃼꃽꃾꃿꄀꄁꄂꄃꄄꄅꄆꄇꄈꄉꄊꄋꄌꄍꄎꄏꄐꄑꄒꄓꄔꄕꄖꄗꄘꄙꄚꄛꄜꄝꄞꄟꄠꄡꄢꄣꄤꄥꄦꄧꄨꄩꄪꄫꄬꄭꄮꄯꄰꄱꄲꄳꄴꄵꄶꄷꄸꄹꄺꄻꄼꄽꄾꄿꅀꅁꅂꅃꅄꅅꅆꅇꅈꅉꅊꅋꅌꅍꅎꅏꅐꅑꅒꅓꅔꅕꅖꅗꅘꅙꅚꅛꅜꅝꅞꅟꅠꅡꅢꅣꅤꅥꅦꅧꅨꅩꅪꅫꅬꅭꅮꅯꅰꅱꅲꅳꅴꅵꅶꅷꅸꅹꅺꅻꅼꅽꅾꅿꆀꆁꆂꆃꆄꆅꆆꆇꆈꆉꆊꆋꆌꆍꆎꆏꆐꆑꆒꆓꆔꆕꆖꆗꆘꆙꆚꆛꆜꆝꆞꆟꆠꆡꆢꆣꆤꆥꆦꆧꆨꆩꆪꆫꆬꆭꆮꆯꆰꆱꆲꆳꆴꆵꆶꆷꆸꆹꆺꆻꆼꆽꆾꆿꇀꇁꇂꇃꇄꇅꇆꇇꇈꇉꇊꇋꇌꇍꇎꇏꇐꇑꇒꇓꇔꇕꇖꇗꇘꇙꇚꇛꇜꇝꇞꇟꇠꇡꇢꇣꇤꇥꇦꇧꇨꇩꇪꇫꇬꇭꇮꇯꇰꇱꇲꇳꇴꇵꇶꇷꇸꇹꇺꇻꇼꇽꇾꇿꈀꈁꈂꈃꈄꈅꈆꈇꈈꈉꈊꈋꈌꈍꈎꈏꈐꈑꈒꈓꈔꈕꈖꈗꈘꈙꈚꈛꈜꈝꈞꈟꈠꈡꈢꈣꈤꈥꈦꈧꈨꈩꈪꈫꈬꈭꈮꈯꈰꈱꈲꈳꈴꈵꈶꈷꈸꈹꈺꈻꈼꈽꈾꈿꉀꉁꉂꉃꉄꉅꉆꉇꉈꉉꉊꉋꉌꉍꉎꉏꉐꉑꉒꉓꉔꉕꉖꉗꉘꉙꉚꉛꉜꉝꉞꉟꉠꉡꉢꉣꉤꉥꉦꉧꉨꉩꉪꉫꉬꉭꉮꉯꉰꉱꉲꉳꉴꉵꉶꉷꉸꉹꉺꉻꉼꉽꉾꉿꊀꊁꊂꊃꊄꊅꊆꊇꊈꊉꊊꊋꊌꊍꊎꊏꊐꊑꊒꊓꊔꊕꊖꊗꊘꊙꊚꊛꊜꊝꊞꊟꊠꊡꊢꊣꊤꊥꊦꊧꊨꊩꊪꊫꊬꊭꊮꊯꊰꊱꊲꊳꊴꊵꊶꊷꊸꊹꊺꊻꊼꊽꊾꊿꋀꋁꋂꋃꋄꋅꋆꋇꋈꋉꋊꋋꋌꋍꋎꋏꋐꋑꋒꋓꋔꋕꋖꋗꋘꋙꋚꋛꋜꋝꋞꋟꋠꋡꋢꋣꋤꋥꋦꋧꋨꋩꋪꋫꋬꋭꋮꋯꋰꋱꋲꋳꋴꋵꋶꋷꋸꋹꋺꋻꋼꋽꋾꋿꌀꌁꌂꌃꌄꌅꌆꌇꌈꌉꌊꌋꌌꌍꌎꌏꌐꌑꌒꌓꌔꌕꌖꌗꌘꌙꌚꌛꌜꌝꌞꌟꌠꌡꌢꌣꌤꌥꌦꌧꌨꌩꌪꌫꌬꌭꌮꌯꌰꌱꌲꌳꌴꌵꌶꌷꌸꌹꌺꌻꌼꌽꌾꌿꍀꍁꍂꍃꍄꍅꍆꍇꍈꍉꍊꍋꍌꍍꍎꍏꍐꍑꍒꍓꍔꍕꍖꍗꍘꍙꍚꍛꍜꍝꍞꍟꍠꍡꍢꍣꍤꍥꍦꍧꍨꍩꍪꍫꍬꍭꍮꍯꍰꍱꍲꍳꍴꍵꍶꍷꍸꍹꍺꍻꍼꍽꍾꍿꎀꎁꎂꎃꎄꎅꎆꎇꎈꎉꎊꎋꎌꎍꎎꎏꎐꎑꎒꎓꎔꎕꎖꎗꎘꎙꎚꎛꎜꎝꎞꎟꎠꎡꎢꎣꎤꎥꎦꎧꎨꎩꎪꎫꎬꎭꎮꎯꎰꎱꎲꎳꎴꎵꎶꎷꎸꎹꎺꎻꎼꎽꎾꎿꏀꏁꏂꏃꏄꏅꏆꏇꏈꏉꏊꏋꏌꏍꏎꏏꏐꏑꏒꏓꏔꏕꏖꏗꏘꏙꏚꏛꏜꏝꏞꏟꏠꏡꏢꏣꏤꏥꏦꏧꏨꏩꏪꏫꏬꏭꏮꏯꏰꏱꏲꏳꏴꏵꏶꏷꏸꏹꏺꏻꏼꏽꏾꏿꐀꐁꐂꐃꐄꐅꐆꐇꐈꐉꐊꐋꐌꐍꐎꐏꐐꐑꐒꐓꐔꐕꐖꐗꐘꐙꐚꐛꐜꐝꐞꐟꐠꐡꐢꐣꐤꐥꐦꐧꐨꐩꐪꐫꐬꐭꐮꐯꐰꐱꐲꐳꐴꐵꐶꐷꐸꐹꐺꐻꐼꐽꐾꐿꑀꑁꑂꑃꑄꑅꑆꑇꑈꑉꑊꑋꑌꑍꑎꑏꑐꑑꑒꑓꑔꑕꑖꑗꑘꑙꑚꑛꑜꑝꑞꑟꑠꑡꑢꑣꑤꑥꑦꑧꑨꑩꑪꑫꑬꑭꑮꑯꑰꑱꑲꑳꑴꑵꑶꑷꑸꑹꑺꑻꑼꑽꑾꑿꒀꒁꒂꒃꒄꒅꒆꒇꒈꒉꒊꒋꒌꔀꔁꔂꔃꔄꔅꔆꔇꔈꔉꔊꔋꔌꔍꔎꔏꔐꔑꔒꔓꔔꔕꔖꔗꔘꔙꔚꔛꔜꔝꔞꔟꔠꔡꔢꔣꔤꔥꔦꔧꔨꔩꔪꔫꔬꔭꔮꔯꔰꔱꔲꔳꔴꔵꔶꔷꔸꔹꔺꔻꔼꔽꔾꔿꕀꕁꕂꕃꕄꕅꕆꕇꕈꕉꕊꕋꕌꕍꕎꕏꕐꕑꕒꕓꕔꕕꕖꕗꕘꕙꕚꕛꕜꕝꕞꕟꕠꕡꕢꕣꕤꕥꕦꕧꕨꕩꕪꕫꕬꕭꕮꕯꕰꕱꕲꕳꕴꕵꕶꕷꕸꕹꕺꕻꕼꕽꕾꕿꖀꖁꖂꖃꖄꖅꖆꖇꖈꖉꖊꖋꖌꖍꖎꖏꖐꖑꖒꖓꖔꖕꖖꖗꖘꖙꖚꖛꖜꖝꖞꖟꖠꖡꖢꖣꖤꖥꖦꖧꖨꖩꖪꖫꖬꖭꖮꖯꖰꖱꖲꖳꖴꖵꖶꖷꖸꖹꖺꖻꖼꖽꖾꖿꗀꗁꗂꗃꗄꗅꗆꗇꗈꗉꗊꗋꗌꗍꗎꗏꗐꗑꗒꗓꗔꗕꗖꗗꗘꗙꗚꗛꗜꗝꗞꗟꗠꗡꗢꗣꗤꗥꗦꗧꗨꗩꗪꗫꗬꗭꗮꗯꗰꗱꗲꗳꗴꗵꗶꗷꗸꗹꗺꗻꗼꗽꗾꗿꘀꘁꘂꘃꘄꘅꘆꘇꘈꘉꘊꘋꘐꘑꘒꘓꘔꘕꘖꘗꘘꘙꘚꘛꘜꘝꘞꘟꘪꘫꙮꟻꟼꟽꟾꟿꠀꠁꠃꠄꠅꠇꠈꠉꠊꠌꠍꠎꠏꠐꠑꠒꠓꠔꠕꠖꠗꠘꠙꠚꠛꠜꠝꠞꠟꠠꠡꠢꡀꡁꡂꡃꡄꡅꡆꡇꡈꡉꡊꡋꡌꡍꡎꡏꡐꡑꡒꡓꡔꡕꡖꡗꡘꡙꡚꡛꡜꡝꡞꡟꡠꡡꡢꡣꡤꡥꡦꡧꡨꡩꡪꡫꡬꡭꡮꡯꡰꡱꡲꡳꢂꢃꢄꢅꢆꢇꢈꢉꢊꢋꢌꢍꢎꢏꢐꢑꢒꢓꢔꢕꢖꢗꢘꢙꢚꢛꢜꢝꢞꢟꢠꢡꢢꢣꢤꢥꢦꢧꢨꢩꢪꢫꢬꢭꢮꢯꢰꢱꢲꢳꤊꤋꤌꤍꤎꤏꤐꤑꤒꤓꤔꤕꤖꤗꤘꤙꤚꤛꤜꤝꤞꤟꤠꤡꤢꤣꤤꤥꤰꤱꤲꤳꤴꤵꤶꤷꤸꤹꤺꤻꤼꤽꤾꤿꥀꥁꥂꥃꥄꥅꥆꨀꨁꨂꨃꨄꨅꨆꨇꨈꨉꨊꨋꨌꨍꨎꨏꨐꨑꨒꨓꨔꨕꨖꨗꨘꨙꨚꨛꨜꨝꨞꨟꨠꨡꨢꨣꨤꨥꨦꨧꨨꩀꩁꩂꩄꩅꩆꩇꩈꩉꩊꩋ가힣豈更車賈滑串句龜龜契金喇奈懶癩羅蘿螺裸邏樂洛烙珞落酪駱亂卵欄爛蘭鸞嵐濫藍襤拉臘蠟廊朗浪狼郎來冷勞擄櫓爐盧老蘆虜路露魯鷺碌祿綠菉錄鹿論壟弄籠聾牢磊賂雷壘屢樓淚漏累縷陋勒肋凜凌稜綾菱陵讀拏樂諾丹寧怒率異北磻便復不泌數索參塞省葉說殺辰沈拾若掠略亮兩凉梁糧良諒量勵呂女廬旅濾礪閭驪麗黎力曆歷轢年憐戀撚漣煉璉秊練聯輦蓮連鍊列劣咽烈裂說廉念捻殮簾獵令囹寧嶺怜玲瑩羚聆鈴零靈領例禮醴隸惡了僚寮尿料樂燎療蓼遼龍暈阮劉杻柳流溜琉留硫紐類六戮陸倫崙淪輪律慄栗率隆利吏履易李梨泥理痢罹裏裡里離匿溺吝燐璘藺隣鱗麟林淋臨立笠粒狀炙識什茶刺切度拓糖宅洞暴輻行降見廓兀嗀﨎﨏塚﨑晴﨓﨔凞猪益礼神祥福靖精羽﨟蘒﨡諸﨣﨤逸都﨧﨨﨩飯飼館鶴侮僧免勉勤卑喝嘆器塀墨層屮悔慨憎懲敏既暑梅海渚漢煮爫琢碑社祉祈祐祖祝禍禎穀突節練縉繁署者臭艹艹著褐視謁謹賓贈辶逸難響頻並况全侀充冀勇勺喝啕喙嗢塚墳奄奔婢嬨廒廙彩徭惘慎愈憎慠懲戴揄搜摒敖晴朗望杖歹殺流滛滋漢瀞煮瞧爵犯猪瑱甆画瘝瘟益盛直睊着磌窱節类絛練缾者荒華蝹襁覆視調諸請謁諾諭謹變贈輸遲醙鉶陼難靖韛響頋頻鬒龜𢡊𢡄𣏕㮝䀘䀹𥉉𥳐𧻓齃龎יִײַﬠﬡﬢﬣﬤﬥﬦﬧﬨשׁשׂשּׁשּׂאַאָאּבּגּדּהּוּזּטּיּךּכּלּמּנּסּףּפּצּקּרּשּתּוֹבֿכֿפֿﭏﭐﭑﭒﭓﭔﭕﭖﭗﭘﭙﭚﭛﭜﭝﭞﭟﭠﭡﭢﭣﭤﭥﭦﭧﭨﭩﭪﭫﭬﭭﭮﭯﭰﭱﭲﭳﭴﭵﭶﭷﭸﭹﭺﭻﭼﭽﭾﭿﮀﮁﮂﮃﮄﮅﮆﮇﮈﮉﮊﮋﮌﮍﮎﮏﮐﮑﮒﮓﮔﮕﮖﮗﮘﮙﮚﮛﮜﮝﮞﮟﮠﮡﮢﮣﮤﮥﮦﮧﮨﮩﮪﮫﮬﮭﮮﮯﮰﮱﯓﯔﯕﯖﯗﯘﯙﯚﯛﯜﯝﯞﯟﯠﯡﯢﯣﯤﯥﯦﯧﯨﯩﯪﯫﯬﯭﯮﯯﯰﯱﯲﯳﯴﯵﯶﯷﯸﯹﯺﯻﯼﯽﯾﯿﰀﰁﰂﰃﰄﰅﰆﰇﰈﰉﰊﰋﰌﰍﰎﰏﰐﰑﰒﰓﰔﰕﰖﰗﰘﰙﰚﰛﰜﰝﰞﰟﰠﰡﰢﰣﰤﰥﰦﰧﰨﰩﰪﰫﰬﰭﰮﰯﰰﰱﰲﰳﰴﰵﰶﰷﰸﰹﰺﰻﰼﰽﰾﰿﱀﱁﱂﱃﱄﱅﱆﱇﱈﱉﱊﱋﱌﱍﱎﱏﱐﱑﱒﱓﱔﱕﱖﱗﱘﱙﱚﱛﱜﱝﱞﱟﱠﱡﱢﱣﱤﱥﱦﱧﱨﱩﱪﱫﱬﱭﱮﱯﱰﱱﱲﱳﱴﱵﱶﱷﱸﱹﱺﱻﱼﱽﱾﱿﲀﲁﲂﲃﲄﲅﲆﲇﲈﲉﲊﲋﲌﲍﲎﲏﲐﲑﲒﲓﲔﲕﲖﲗﲘﲙﲚﲛﲜﲝﲞﲟﲠﲡﲢﲣﲤﲥﲦﲧﲨﲩﲪﲫﲬﲭﲮﲯﲰﲱﲲﲳﲴﲵﲶﲷﲸﲹﲺﲻﲼﲽﲾﲿﳀﳁﳂﳃﳄﳅﳆﳇﳈﳉﳊﳋﳌﳍﳎﳏﳐﳑﳒﳓﳔﳕﳖﳗﳘﳙﳚﳛﳜﳝﳞﳟﳠﳡﳢﳣﳤﳥﳦﳧﳨﳩﳪﳫﳬﳭﳮﳯﳰﳱﳲﳳﳴﳵﳶﳷﳸﳹﳺﳻﳼﳽﳾﳿﴀﴁﴂﴃﴄﴅﴆﴇﴈﴉﴊﴋﴌﴍﴎﴏﴐﴑﴒﴓﴔﴕﴖﴗﴘﴙﴚﴛﴜﴝﴞﴟﴠﴡﴢﴣﴤﴥﴦﴧﴨﴩﴪﴫﴬﴭﴮﴯﴰﴱﴲﴳﴴﴵﴶﴷﴸﴹﴺﴻﴼﴽﵐﵑﵒﵓﵔﵕﵖﵗﵘﵙﵚﵛﵜﵝﵞﵟﵠﵡﵢﵣﵤﵥﵦﵧﵨﵩﵪﵫﵬﵭﵮﵯﵰﵱﵲﵳﵴﵵﵶﵷﵸﵹﵺﵻﵼﵽﵾﵿﶀﶁﶂﶃﶄﶅﶆﶇﶈﶉﶊﶋﶌﶍﶎﶏﶒﶓﶔﶕﶖﶗﶘﶙﶚﶛﶜﶝﶞﶟﶠﶡﶢﶣﶤﶥﶦﶧﶨﶩﶪﶫﶬﶭﶮﶯﶰﶱﶲﶳﶴﶵﶶﶷﶸﶹﶺﶻﶼﶽﶾﶿﷀﷁﷂﷃﷄﷅﷆﷇﷰﷱﷲﷳﷴﷵﷶﷷﷸﷹﷺﷻﹰﹱﹲﹳﹴﹶﹷﹸﹹﹺﹻﹼﹽﹾﹿﺀﺁﺂﺃﺄﺅﺆﺇﺈﺉﺊﺋﺌﺍﺎﺏﺐﺑﺒﺓﺔﺕﺖﺗﺘﺙﺚﺛﺜﺝﺞﺟﺠﺡﺢﺣﺤﺥﺦﺧﺨﺩﺪﺫﺬﺭﺮﺯﺰﺱﺲﺳﺴﺵﺶﺷﺸﺹﺺﺻﺼﺽﺾﺿﻀﻁﻂﻃﻄﻅﻆﻇﻈﻉﻊﻋﻌﻍﻎﻏﻐﻑﻒﻓﻔﻕﻖﻗﻘﻙﻚﻛﻜﻝﻞﻟﻠﻡﻢﻣﻤﻥﻦﻧﻨﻩﻪﻫﻬﻭﻮﻯﻰﻱﻲﻳﻴﻵﻶﻷﻸﻹﻺﻻﻼｦｧｨｩｪｫｬｭｮｯｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜﾝﾠﾡﾢﾣﾤﾥﾦﾧﾨﾩﾪﾫﾬﾭﾮﾯﾰﾱﾲﾳﾴﾵﾶﾷﾸﾹﾺﾻﾼﾽﾾￂￃￄￅￆￇￊￋￌￍￎￏￒￓￔￕￖￗￚￛￜ]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[ƻǀǁǂǃʔאבגדהוזחטיךכלםמןנסעףפץצקרשתװױײءآأؤإئابةتثجحخدذرزسشصضطظعغػؼؽؾؿفقكلمنهوىيٮٯٱٲٳٴٵٶٷٸٹٺٻټٽپٿڀځڂڃڄڅچڇڈډڊڋڌڍڎڏڐڑڒړڔڕږڗژڙښڛڜڝڞڟڠڡڢڣڤڥڦڧڨکڪګڬڭڮگڰڱڲڳڴڵڶڷڸڹںڻڼڽھڿۀہۂۃۄۅۆۇۈۉۊۋیۍێۏېۑےۓەۮۯۺۻۼۿܐܒܓܔܕܖܗܘܙܚܛܜܝܞܟܠܡܢܣܤܥܦܧܨܩܪܫܬܭܮܯݍݎݏݐݑݒݓݔݕݖݗݘݙݚݛݜݝݞݟݠݡݢݣݤݥݦݧݨݩݪݫݬݭݮݯݰݱݲݳݴݵݶݷݸݹݺݻݼݽݾݿހށނރބޅކއވމފދތލގޏސޑޒޓޔޕޖޗޘޙޚޛޜޝޞޟޠޡޢޣޤޥޱߊߋߌߍߎߏߐߑߒߓߔߕߖߗߘߙߚߛߜߝߞߟߠߡߢߣߤߥߦߧߨߩߪऄअआइईउऊऋऌऍऎएऐऑऒओऔकखगघङचछजझञटठडढणतथदधनऩपफबभमयरऱलळऴवशषसहऽॐक़ख़ग़ज़ड़ढ़फ़य़ॠॡॲॻॼॽॾॿঅআইঈউঊঋঌএঐওঔকখগঘঙচছজঝঞটঠডঢণতথদধনপফবভমযরলশষসহঽৎড়ঢ়য়ৠৡৰৱਅਆਇਈਉਊਏਐਓਔਕਖਗਘਙਚਛਜਝਞਟਠਡਢਣਤਥਦਧਨਪਫਬਭਮਯਰਲਲ਼ਵਸ਼ਸਹਖ਼ਗ਼ਜ਼ੜਫ਼ੲੳੴઅઆઇઈઉઊઋઌઍએઐઑઓઔકખગઘઙચછજઝઞટઠડઢણતથદધનપફબભમયરલળવશષસહઽૐૠૡଅଆଇଈଉଊଋଌଏଐଓଔକଖଗଘଙଚଛଜଝଞଟଠଡଢଣତଥଦଧନପଫବଭମଯରଲଳଵଶଷସହଽଡ଼ଢ଼ୟୠୡୱஃஅஆஇஈஉஊஎஏஐஒஓஔகஙசஜஞடணதநனபமயரறலளழவஶஷஸஹௐఅఆఇఈఉఊఋఌఎఏఐఒఓఔకఖగఘఙచఛజఝఞటఠడఢణతథదధనపఫబభమయరఱలళవశషసహఽౘౙౠౡಅಆಇಈಉಊಋಌಎಏಐಒಓಔಕಖಗಘಙಚಛಜಝಞಟಠಡಢಣತಥದಧನಪಫಬಭಮಯರಱಲಳವಶಷಸಹಽೞೠೡഅആഇഈഉഊഋഌഎഏഐഒഓഔകഖഗഘങചഛജഝഞടഠഡഢണതഥദധനപഫബഭമയരറലളഴവശഷസഹഽൠൡൺൻർൽൾൿඅආඇඈඉඊඋඌඍඎඏඐඑඒඓඔඕඖකඛගඝඞඟචඡජඣඤඥඦටඨඩඪණඬතථදධනඳපඵබභමඹයරලවශෂසහළෆกขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะาำเแโใไๅກຂຄງຈຊຍດຕຖທນບປຜຝພຟມຢຣລວສຫອຮຯະາຳຽເແໂໃໄໜໝༀཀཁགགྷངཅཆཇཉཊཋཌཌྷཎཏཐདདྷནཔཕབབྷམཙཚཛཛྷཝཞཟའཡརལཤཥསཧཨཀྵཪཫཬྈྉྊྋကခဂဃငစဆဇဈဉညဋဌဍဎဏတထဒဓနပဖဗဘမယရလဝသဟဠအဢဣဤဥဦဧဨဩဪဿၐၑၒၓၔၕၚၛၜၝၡၥၦၮၯၰၵၶၷၸၹၺၻၼၽၾၿႀႁႎაბგდევზთიკლმნოპჟრსტუფქღყშჩცძწჭხჯჰჱჲჳჴჵჶჷჸჹჺᄀᄁᄂᄃᄄᄅᄆᄇᄈᄉᄊᄋᄌᄍᄎᄏᄐᄑᄒᄓᄔᄕᄖᄗᄘᄙᄚᄛᄜᄝᄞᄟᄠᄡᄢᄣᄤᄥᄦᄧᄨᄩᄪᄫᄬᄭᄮᄯᄰᄱᄲᄳᄴᄵᄶᄷᄸᄹᄺᄻᄼᄽᄾᄿᅀᅁᅂᅃᅄᅅᅆᅇᅈᅉᅊᅋᅌᅍᅎᅏᅐᅑᅒᅓᅔᅕᅖᅗᅘᅙᅟᅠᅡᅢᅣᅤᅥᅦᅧᅨᅩᅪᅫᅬᅭᅮᅯᅰᅱᅲᅳᅴᅵᅶᅷᅸᅹᅺᅻᅼᅽᅾᅿᆀᆁᆂᆃᆄᆅᆆᆇᆈᆉᆊᆋᆌᆍᆎᆏᆐᆑᆒᆓᆔᆕᆖᆗᆘᆙᆚᆛᆜᆝᆞᆟᆠᆡᆢᆨᆩᆪᆫᆬᆭᆮᆯᆰᆱᆲᆳᆴᆵᆶᆷᆸᆹᆺᆻᆼᆽᆾᆿᇀᇁᇂᇃᇄᇅᇆᇇᇈᇉᇊᇋᇌᇍᇎᇏᇐᇑᇒᇓᇔᇕᇖᇗᇘᇙᇚᇛᇜᇝᇞᇟᇠᇡᇢᇣᇤᇥᇦᇧᇨᇩᇪᇫᇬᇭᇮᇯᇰᇱᇲᇳᇴᇵᇶᇷᇸᇹሀሁሂሃሄህሆሇለሉሊላሌልሎሏሐሑሒሓሔሕሖሗመሙሚማሜምሞሟሠሡሢሣሤሥሦሧረሩሪራሬርሮሯሰሱሲሳሴስሶሷሸሹሺሻሼሽሾሿቀቁቂቃቄቅቆቇቈቊቋቌቍቐቑቒቓቔቕቖቘቚቛቜቝበቡቢባቤብቦቧቨቩቪቫቬቭቮቯተቱቲታቴትቶቷቸቹቺቻቼችቾቿኀኁኂኃኄኅኆኇኈኊኋኌኍነኑኒናኔንኖኗኘኙኚኛኜኝኞኟአኡኢኣኤእኦኧከኩኪካኬክኮኯኰኲኳኴኵኸኹኺኻኼኽኾዀዂዃዄዅወዉዊዋዌውዎዏዐዑዒዓዔዕዖዘዙዚዛዜዝዞዟዠዡዢዣዤዥዦዧየዩዪያዬይዮዯደዱዲዳዴድዶዷዸዹዺዻዼዽዾዿጀጁጂጃጄጅጆጇገጉጊጋጌግጎጏጐጒጓጔጕጘጙጚጛጜጝጞጟጠጡጢጣጤጥጦጧጨጩጪጫጬጭጮጯጰጱጲጳጴጵጶጷጸጹጺጻጼጽጾጿፀፁፂፃፄፅፆፇፈፉፊፋፌፍፎፏፐፑፒፓፔፕፖፗፘፙፚᎀᎁᎂᎃᎄᎅᎆᎇᎈᎉᎊᎋᎌᎍᎎᎏᎠᎡᎢᎣᎤᎥᎦᎧᎨᎩᎪᎫᎬᎭᎮᎯᎰᎱᎲᎳᎴᎵᎶᎷᎸᎹᎺᎻᎼᎽᎾᎿᏀᏁᏂᏃᏄᏅᏆᏇᏈᏉᏊᏋᏌᏍᏎᏏᏐᏑᏒᏓᏔᏕᏖᏗᏘᏙᏚᏛᏜᏝᏞᏟᏠᏡᏢᏣᏤᏥᏦᏧᏨᏩᏪᏫᏬᏭᏮᏯᏰᏱᏲᏳᏴᐁᐂᐃᐄᐅᐆᐇᐈᐉᐊᐋᐌᐍᐎᐏᐐᐑᐒᐓᐔᐕᐖᐗᐘᐙᐚᐛᐜᐝᐞᐟᐠᐡᐢᐣᐤᐥᐦᐧᐨᐩᐪᐫᐬᐭᐮᐯᐰᐱᐲᐳᐴᐵᐶᐷᐸᐹᐺᐻᐼᐽᐾᐿᑀᑁᑂᑃᑄᑅᑆᑇᑈᑉᑊᑋᑌᑍᑎᑏᑐᑑᑒᑓᑔᑕᑖᑗᑘᑙᑚᑛᑜᑝᑞᑟᑠᑡᑢᑣᑤᑥᑦᑧᑨᑩᑪᑫᑬᑭᑮᑯᑰᑱᑲᑳᑴᑵᑶᑷᑸᑹᑺᑻᑼᑽᑾᑿᒀᒁᒂᒃᒄᒅᒆᒇᒈᒉᒊᒋᒌᒍᒎᒏᒐᒑᒒᒓᒔᒕᒖᒗᒘᒙᒚᒛᒜᒝᒞᒟᒠᒡᒢᒣᒤᒥᒦᒧᒨᒩᒪᒫᒬᒭᒮᒯᒰᒱᒲᒳᒴᒵᒶᒷᒸᒹᒺᒻᒼᒽᒾᒿᓀᓁᓂᓃᓄᓅᓆᓇᓈᓉᓊᓋᓌᓍᓎᓏᓐᓑᓒᓓᓔᓕᓖᓗᓘᓙᓚᓛᓜᓝᓞᓟᓠᓡᓢᓣᓤᓥᓦᓧᓨᓩᓪᓫᓬᓭᓮᓯᓰᓱᓲᓳᓴᓵᓶᓷᓸᓹᓺᓻᓼᓽᓾᓿᔀᔁᔂᔃᔄᔅᔆᔇᔈᔉᔊᔋᔌᔍᔎᔏᔐᔑᔒᔓᔔᔕᔖᔗᔘᔙᔚᔛᔜᔝᔞᔟᔠᔡᔢᔣᔤᔥᔦᔧᔨᔩᔪᔫᔬᔭᔮᔯᔰᔱᔲᔳᔴᔵᔶᔷᔸᔹᔺᔻᔼᔽᔾᔿᕀᕁᕂᕃᕄᕅᕆᕇᕈᕉᕊᕋᕌᕍᕎᕏᕐᕑᕒᕓᕔᕕᕖᕗᕘᕙᕚᕛᕜᕝᕞᕟᕠᕡᕢᕣᕤᕥᕦᕧᕨᕩᕪᕫᕬᕭᕮᕯᕰᕱᕲᕳᕴᕵᕶᕷᕸᕹᕺᕻᕼᕽᕾᕿᖀᖁᖂᖃᖄᖅᖆᖇᖈᖉᖊᖋᖌᖍᖎᖏᖐᖑᖒᖓᖔᖕᖖᖗᖘᖙᖚᖛᖜᖝᖞᖟᖠᖡᖢᖣᖤᖥᖦᖧᖨᖩᖪᖫᖬᖭᖮᖯᖰᖱᖲᖳᖴᖵᖶᖷᖸᖹᖺᖻᖼᖽᖾᖿᗀᗁᗂᗃᗄᗅᗆᗇᗈᗉᗊᗋᗌᗍᗎᗏᗐᗑᗒᗓᗔᗕᗖᗗᗘᗙᗚᗛᗜᗝᗞᗟᗠᗡᗢᗣᗤᗥᗦᗧᗨᗩᗪᗫᗬᗭᗮᗯᗰᗱᗲᗳᗴᗵᗶᗷᗸᗹᗺᗻᗼᗽᗾᗿᘀᘁᘂᘃᘄᘅᘆᘇᘈᘉᘊᘋᘌᘍᘎᘏᘐᘑᘒᘓᘔᘕᘖᘗᘘᘙᘚᘛᘜᘝᘞᘟᘠᘡᘢᘣᘤᘥᘦᘧᘨᘩᘪᘫᘬᘭᘮᘯᘰᘱᘲᘳᘴᘵᘶᘷᘸᘹᘺᘻᘼᘽᘾᘿᙀᙁᙂᙃᙄᙅᙆᙇᙈᙉᙊᙋᙌᙍᙎᙏᙐᙑᙒᙓᙔᙕᙖᙗᙘᙙᙚᙛᙜᙝᙞᙟᙠᙡᙢᙣᙤᙥᙦᙧᙨᙩᙪᙫᙬᙯᙰᙱᙲᙳᙴᙵᙶᚁᚂᚃᚄᚅᚆᚇᚈᚉᚊᚋᚌᚍᚎᚏᚐᚑᚒᚓᚔᚕᚖᚗᚘᚙᚚᚠᚡᚢᚣᚤᚥᚦᚧᚨᚩᚪᚫᚬᚭᚮᚯᚰᚱᚲᚳᚴᚵᚶᚷᚸᚹᚺᚻᚼᚽᚾᚿᛀᛁᛂᛃᛄᛅᛆᛇᛈᛉᛊᛋᛌᛍᛎᛏᛐᛑᛒᛓᛔᛕᛖᛗᛘᛙᛚᛛᛜᛝᛞᛟᛠᛡᛢᛣᛤᛥᛦᛧᛨᛩᛪᜀᜁᜂᜃᜄᜅᜆᜇᜈᜉᜊᜋᜌᜎᜏᜐᜑᜠᜡᜢᜣᜤᜥᜦᜧᜨᜩᜪᜫᜬᜭᜮᜯᜰᜱᝀᝁᝂᝃᝄᝅᝆᝇᝈᝉᝊᝋᝌᝍᝎᝏᝐᝑᝠᝡᝢᝣᝤᝥᝦᝧᝨᝩᝪᝫᝬᝮᝯᝰកខគឃងចឆជឈញដឋឌឍណតថទធនបផពភមយរលវឝឞសហឡអឣឤឥឦឧឨឩឪឫឬឭឮឯឰឱឲឳៜᠠᠡᠢᠣᠤᠥᠦᠧᠨᠩᠪᠫᠬᠭᠮᠯᠰᠱᠲᠳᠴᠵᠶᠷᠸᠹᠺᠻᠼᠽᠾᠿᡀᡁᡂᡄᡅᡆᡇᡈᡉᡊᡋᡌᡍᡎᡏᡐᡑᡒᡓᡔᡕᡖᡗᡘᡙᡚᡛᡜᡝᡞᡟᡠᡡᡢᡣᡤᡥᡦᡧᡨᡩᡪᡫᡬᡭᡮᡯᡰᡱᡲᡳᡴᡵᡶᡷᢀᢁᢂᢃᢄᢅᢆᢇᢈᢉᢊᢋᢌᢍᢎᢏᢐᢑᢒᢓᢔᢕᢖᢗᢘᢙᢚᢛᢜᢝᢞᢟᢠᢡᢢᢣᢤᢥᢦᢧᢨᢪᤀᤁᤂᤃᤄᤅᤆᤇᤈᤉᤊᤋᤌᤍᤎᤏᤐᤑᤒᤓᤔᤕᤖᤗᤘᤙᤚᤛᤜᥐᥑᥒᥓᥔᥕᥖᥗᥘᥙᥚᥛᥜᥝᥞᥟᥠᥡᥢᥣᥤᥥᥦᥧᥨᥩᥪᥫᥬᥭᥰᥱᥲᥳᥴᦀᦁᦂᦃᦄᦅᦆᦇᦈᦉᦊᦋᦌᦍᦎᦏᦐᦑᦒᦓᦔᦕᦖᦗᦘᦙᦚᦛᦜᦝᦞᦟᦠᦡᦢᦣᦤᦥᦦᦧᦨᦩᧁᧂᧃᧄᧅᧆᧇᨀᨁᨂᨃᨄᨅᨆᨇᨈᨉᨊᨋᨌᨍᨎᨏᨐᨑᨒᨓᨔᨕᨖᬅᬆᬇᬈᬉᬊᬋᬌᬍᬎᬏᬐᬑᬒᬓᬔᬕᬖᬗᬘᬙᬚᬛᬜᬝᬞᬟᬠᬡᬢᬣᬤᬥᬦᬧᬨᬩᬪᬫᬬᬭᬮᬯᬰᬱᬲᬳᭅᭆᭇᭈᭉᭊᭋᮃᮄᮅᮆᮇᮈᮉᮊᮋᮌᮍᮎᮏᮐᮑᮒᮓᮔᮕᮖᮗᮘᮙᮚᮛᮜᮝᮞᮟᮠᮮᮯᰀᰁᰂᰃᰄᰅᰆᰇᰈᰉᰊᰋᰌᰍᰎᰏᰐᰑᰒᰓᰔᰕᰖᰗᰘᰙᰚᰛᰜᰝᰞᰟᰠᰡᰢᰣᱍᱎᱏᱚᱛᱜᱝᱞᱟᱠᱡᱢᱣᱤᱥᱦᱧᱨᱩᱪᱫᱬᱭᱮᱯᱰᱱᱲᱳᱴᱵᱶᱷℵℶℷℸⴰⴱⴲⴳⴴⴵⴶⴷⴸⴹⴺⴻⴼⴽⴾⴿⵀⵁⵂⵃⵄⵅⵆⵇⵈⵉⵊⵋⵌⵍⵎⵏⵐⵑⵒⵓⵔⵕⵖⵗⵘⵙⵚⵛⵜⵝⵞⵟⵠⵡⵢⵣⵤⵥⶀⶁⶂⶃⶄⶅⶆⶇⶈⶉⶊⶋⶌⶍⶎⶏⶐⶑⶒⶓⶔⶕⶖⶠⶡⶢⶣⶤⶥⶦⶨⶩⶪⶫⶬⶭⶮⶰⶱⶲⶳⶴⶵⶶⶸⶹⶺⶻⶼⶽⶾⷀⷁⷂⷃⷄⷅⷆⷈⷉⷊⷋⷌⷍⷎⷐⷑⷒⷓⷔⷕⷖⷘⷙⷚⷛⷜⷝⷞ〆〼ぁあぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎわゐゑをんゔゕゖゟァアィイゥウェエォオカガキギクグケゲコゴサザシジスズセゼソゾタダチヂッツヅテデトドナニヌネノハバパヒビピフブプヘベペホボポマミムメモャヤュユョヨラリルレロヮワヰヱヲンヴヵヶヷヸヹヺヿㄅㄆㄇㄈㄉㄊㄋㄌㄍㄎㄏㄐㄑㄒㄓㄔㄕㄖㄗㄘㄙㄚㄛㄜㄝㄞㄟㄠㄡㄢㄣㄤㄥㄦㄧㄨㄩㄪㄫㄬㄭㄱㄲㄳㄴㄵㄶㄷㄸㄹㄺㄻㄼㄽㄾㄿㅀㅁㅂㅃㅄㅅㅆㅇㅈㅉㅊㅋㅌㅍㅎㅏㅐㅑㅒㅓㅔㅕㅖㅗㅘㅙㅚㅛㅜㅝㅞㅟㅠㅡㅢㅣㅤㅥㅦㅧㅨㅩㅪㅫㅬㅭㅮㅯㅰㅱㅲㅳㅴㅵㅶㅷㅸㅹㅺㅻㅼㅽㅾㅿㆀㆁㆂㆃㆄㆅㆆㆇㆈㆉㆊㆋㆌㆍㆎㆠㆡㆢㆣㆤㆥㆦㆧㆨㆩㆪㆫㆬㆭㆮㆯㆰㆱㆲㆳㆴㆵㆶㆷㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ㐀䶵一鿃ꀀꀁꀂꀃꀄꀅꀆꀇꀈꀉꀊꀋꀌꀍꀎꀏꀐꀑꀒꀓꀔꀖꀗꀘꀙꀚꀛꀜꀝꀞꀟꀠꀡꀢꀣꀤꀥꀦꀧꀨꀩꀪꀫꀬꀭꀮꀯꀰꀱꀲꀳꀴꀵꀶꀷꀸꀹꀺꀻꀼꀽꀾꀿꁀꁁꁂꁃꁄꁅꁆꁇꁈꁉꁊꁋꁌꁍꁎꁏꁐꁑꁒꁓꁔꁕꁖꁗꁘꁙꁚꁛꁜꁝꁞꁟꁠꁡꁢꁣꁤꁥꁦꁧꁨꁩꁪꁫꁬꁭꁮꁯꁰꁱꁲꁳꁴꁵꁶꁷꁸꁹꁺꁻꁼꁽꁾꁿꂀꂁꂂꂃꂄꂅꂆꂇꂈꂉꂊꂋꂌꂍꂎꂏꂐꂑꂒꂓꂔꂕꂖꂗꂘꂙꂚꂛꂜꂝꂞꂟꂠꂡꂢꂣꂤꂥꂦꂧꂨꂩꂪꂫꂬꂭꂮꂯꂰꂱꂲꂳꂴꂵꂶꂷꂸꂹꂺꂻꂼꂽꂾꂿꃀꃁꃂꃃꃄꃅꃆꃇꃈꃉꃊꃋꃌꃍꃎꃏꃐꃑꃒꃓꃔꃕꃖꃗꃘꃙꃚꃛꃜꃝꃞꃟꃠꃡꃢꃣꃤꃥꃦꃧꃨꃩꃪꃫꃬꃭꃮꃯꃰꃱꃲꃳꃴꃵꃶꃷꃸꃹꃺꃻꃼꃽꃾꃿꄀꄁꄂꄃꄄꄅꄆꄇꄈꄉꄊꄋꄌꄍꄎꄏꄐꄑꄒꄓꄔꄕꄖꄗꄘꄙꄚꄛꄜꄝꄞꄟꄠꄡꄢꄣꄤꄥꄦꄧꄨꄩꄪꄫꄬꄭꄮꄯꄰꄱꄲꄳꄴꄵꄶꄷꄸꄹꄺꄻꄼꄽꄾꄿꅀꅁꅂꅃꅄꅅꅆꅇꅈꅉꅊꅋꅌꅍꅎꅏꅐꅑꅒꅓꅔꅕꅖꅗꅘꅙꅚꅛꅜꅝꅞꅟꅠꅡꅢꅣꅤꅥꅦꅧꅨꅩꅪꅫꅬꅭꅮꅯꅰꅱꅲꅳꅴꅵꅶꅷꅸꅹꅺꅻꅼꅽꅾꅿꆀꆁꆂꆃꆄꆅꆆꆇꆈꆉꆊꆋꆌꆍꆎꆏꆐꆑꆒꆓꆔꆕꆖꆗꆘꆙꆚꆛꆜꆝꆞꆟꆠꆡꆢꆣꆤꆥꆦꆧꆨꆩꆪꆫꆬꆭꆮꆯꆰꆱꆲꆳꆴꆵꆶꆷꆸꆹꆺꆻꆼꆽꆾꆿꇀꇁꇂꇃꇄꇅꇆꇇꇈꇉꇊꇋꇌꇍꇎꇏꇐꇑꇒꇓꇔꇕꇖꇗꇘꇙꇚꇛꇜꇝꇞꇟꇠꇡꇢꇣꇤꇥꇦꇧꇨꇩꇪꇫꇬꇭꇮꇯꇰꇱꇲꇳꇴꇵꇶꇷꇸꇹꇺꇻꇼꇽꇾꇿꈀꈁꈂꈃꈄꈅꈆꈇꈈꈉꈊꈋꈌꈍꈎꈏꈐꈑꈒꈓꈔꈕꈖꈗꈘꈙꈚꈛꈜꈝꈞꈟꈠꈡꈢꈣꈤꈥꈦꈧꈨꈩꈪꈫꈬꈭꈮꈯꈰꈱꈲꈳꈴꈵꈶꈷꈸꈹꈺꈻꈼꈽꈾꈿꉀꉁꉂꉃꉄꉅꉆꉇꉈꉉꉊꉋꉌꉍꉎꉏꉐꉑꉒꉓꉔꉕꉖꉗꉘꉙꉚꉛꉜꉝꉞꉟꉠꉡꉢꉣꉤꉥꉦꉧꉨꉩꉪꉫꉬꉭꉮꉯꉰꉱꉲꉳꉴꉵꉶꉷꉸꉹꉺꉻꉼꉽꉾꉿꊀꊁꊂꊃꊄꊅꊆꊇꊈꊉꊊꊋꊌꊍꊎꊏꊐꊑꊒꊓꊔꊕꊖꊗꊘꊙꊚꊛꊜꊝꊞꊟꊠꊡꊢꊣꊤꊥꊦꊧꊨꊩꊪꊫꊬꊭꊮꊯꊰꊱꊲꊳꊴꊵꊶꊷꊸꊹꊺꊻꊼꊽꊾꊿꋀꋁꋂꋃꋄꋅꋆꋇꋈꋉꋊꋋꋌꋍꋎꋏꋐꋑꋒꋓꋔꋕꋖꋗꋘꋙꋚꋛꋜꋝꋞꋟꋠꋡꋢꋣꋤꋥꋦꋧꋨꋩꋪꋫꋬꋭꋮꋯꋰꋱꋲꋳꋴꋵꋶꋷꋸꋹꋺꋻꋼꋽꋾꋿꌀꌁꌂꌃꌄꌅꌆꌇꌈꌉꌊꌋꌌꌍꌎꌏꌐꌑꌒꌓꌔꌕꌖꌗꌘꌙꌚꌛꌜꌝꌞꌟꌠꌡꌢꌣꌤꌥꌦꌧꌨꌩꌪꌫꌬꌭꌮꌯꌰꌱꌲꌳꌴꌵꌶꌷꌸꌹꌺꌻꌼꌽꌾꌿꍀꍁꍂꍃꍄꍅꍆꍇꍈꍉꍊꍋꍌꍍꍎꍏꍐꍑꍒꍓꍔꍕꍖꍗꍘꍙꍚꍛꍜꍝꍞꍟꍠꍡꍢꍣꍤꍥꍦꍧꍨꍩꍪꍫꍬꍭꍮꍯꍰꍱꍲꍳꍴꍵꍶꍷꍸꍹꍺꍻꍼꍽꍾꍿꎀꎁꎂꎃꎄꎅꎆꎇꎈꎉꎊꎋꎌꎍꎎꎏꎐꎑꎒꎓꎔꎕꎖꎗꎘꎙꎚꎛꎜꎝꎞꎟꎠꎡꎢꎣꎤꎥꎦꎧꎨꎩꎪꎫꎬꎭꎮꎯꎰꎱꎲꎳꎴꎵꎶꎷꎸꎹꎺꎻꎼꎽꎾꎿꏀꏁꏂꏃꏄꏅꏆꏇꏈꏉꏊꏋꏌꏍꏎꏏꏐꏑꏒꏓꏔꏕꏖꏗꏘꏙꏚꏛꏜꏝꏞꏟꏠꏡꏢꏣꏤꏥꏦꏧꏨꏩꏪꏫꏬꏭꏮꏯꏰꏱꏲꏳꏴꏵꏶꏷꏸꏹꏺꏻꏼꏽꏾꏿꐀꐁꐂꐃꐄꐅꐆꐇꐈꐉꐊꐋꐌꐍꐎꐏꐐꐑꐒꐓꐔꐕꐖꐗꐘꐙꐚꐛꐜꐝꐞꐟꐠꐡꐢꐣꐤꐥꐦꐧꐨꐩꐪꐫꐬꐭꐮꐯꐰꐱꐲꐳꐴꐵꐶꐷꐸꐹꐺꐻꐼꐽꐾꐿꑀꑁꑂꑃꑄꑅꑆꑇꑈꑉꑊꑋꑌꑍꑎꑏꑐꑑꑒꑓꑔꑕꑖꑗꑘꑙꑚꑛꑜꑝꑞꑟꑠꑡꑢꑣꑤꑥꑦꑧꑨꑩꑪꑫꑬꑭꑮꑯꑰꑱꑲꑳꑴꑵꑶꑷꑸꑹꑺꑻꑼꑽꑾꑿꒀꒁꒂꒃꒄꒅꒆꒇꒈꒉꒊꒋꒌꔀꔁꔂꔃꔄꔅꔆꔇꔈꔉꔊꔋꔌꔍꔎꔏꔐꔑꔒꔓꔔꔕꔖꔗꔘꔙꔚꔛꔜꔝꔞꔟꔠꔡꔢꔣꔤꔥꔦꔧꔨꔩꔪꔫꔬꔭꔮꔯꔰꔱꔲꔳꔴꔵꔶꔷꔸꔹꔺꔻꔼꔽꔾꔿꕀꕁꕂꕃꕄꕅꕆꕇꕈꕉꕊꕋꕌꕍꕎꕏꕐꕑꕒꕓꕔꕕꕖꕗꕘꕙꕚꕛꕜꕝꕞꕟꕠꕡꕢꕣꕤꕥꕦꕧꕨꕩꕪꕫꕬꕭꕮꕯꕰꕱꕲꕳꕴꕵꕶꕷꕸꕹꕺꕻꕼꕽꕾꕿꖀꖁꖂꖃꖄꖅꖆꖇꖈꖉꖊꖋꖌꖍꖎꖏꖐꖑꖒꖓꖔꖕꖖꖗꖘꖙꖚꖛꖜꖝꖞꖟꖠꖡꖢꖣꖤꖥꖦꖧꖨꖩꖪꖫꖬꖭꖮꖯꖰꖱꖲꖳꖴꖵꖶꖷꖸꖹꖺꖻꖼꖽꖾꖿꗀꗁꗂꗃꗄꗅꗆꗇꗈꗉꗊꗋꗌꗍꗎꗏꗐꗑꗒꗓꗔꗕꗖꗗꗘꗙꗚꗛꗜꗝꗞꗟꗠꗡꗢꗣꗤꗥꗦꗧꗨꗩꗪꗫꗬꗭꗮꗯꗰꗱꗲꗳꗴꗵꗶꗷꗸꗹꗺꗻꗼꗽꗾꗿꘀꘁꘂꘃꘄꘅꘆꘇꘈꘉꘊꘋꘐꘑꘒꘓꘔꘕꘖꘗꘘꘙꘚꘛꘜꘝꘞꘟꘪꘫꙮꟻꟼꟽꟾꟿꠀꠁꠃꠄꠅꠇꠈꠉꠊꠌꠍꠎꠏꠐꠑꠒꠓꠔꠕꠖꠗꠘꠙꠚꠛꠜꠝꠞꠟꠠꠡꠢꡀꡁꡂꡃꡄꡅꡆꡇꡈꡉꡊꡋꡌꡍꡎꡏꡐꡑꡒꡓꡔꡕꡖꡗꡘꡙꡚꡛꡜꡝꡞꡟꡠꡡꡢꡣꡤꡥꡦꡧꡨꡩꡪꡫꡬꡭꡮꡯꡰꡱꡲꡳꢂꢃꢄꢅꢆꢇꢈꢉꢊꢋꢌꢍꢎꢏꢐꢑꢒꢓꢔꢕꢖꢗꢘꢙꢚꢛꢜꢝꢞꢟꢠꢡꢢꢣꢤꢥꢦꢧꢨꢩꢪꢫꢬꢭꢮꢯꢰꢱꢲꢳꤊꤋꤌꤍꤎꤏꤐꤑꤒꤓꤔꤕꤖꤗꤘꤙꤚꤛꤜꤝꤞꤟꤠꤡꤢꤣꤤꤥꤰꤱꤲꤳꤴꤵꤶꤷꤸꤹꤺꤻꤼꤽꤾꤿꥀꥁꥂꥃꥄꥅꥆꨀꨁꨂꨃꨄꨅꨆꨇꨈꨉꨊꨋꨌꨍꨎꨏꨐꨑꨒꨓꨔꨕꨖꨗꨘꨙꨚꨛꨜꨝꨞꨟꨠꨡꨢꨣꨤꨥꨦꨧꨨꩀꩁꩂꩄꩅꩆꩇꩈꩉꩊꩋ가힣豈更車賈滑串句龜龜契金喇奈懶癩羅蘿螺裸邏樂洛烙珞落酪駱亂卵欄爛蘭鸞嵐濫藍襤拉臘蠟廊朗浪狼郎來冷勞擄櫓爐盧老蘆虜路露魯鷺碌祿綠菉錄鹿論壟弄籠聾牢磊賂雷壘屢樓淚漏累縷陋勒肋凜凌稜綾菱陵讀拏樂諾丹寧怒率異北磻便復不泌數索參塞省葉說殺辰沈拾若掠略亮兩凉梁糧良諒量勵呂女廬旅濾礪閭驪麗黎力曆歷轢年憐戀撚漣煉璉秊練聯輦蓮連鍊列劣咽烈裂說廉念捻殮簾獵令囹寧嶺怜玲瑩羚聆鈴零靈領例禮醴隸惡了僚寮尿料樂燎療蓼遼龍暈阮劉杻柳流溜琉留硫紐類六戮陸倫崙淪輪律慄栗率隆利吏履易李梨泥理痢罹裏裡里離匿溺吝燐璘藺隣鱗麟林淋臨立笠粒狀炙識什茶刺切度拓糖宅洞暴輻行降見廓兀嗀﨎﨏塚﨑晴﨓﨔凞猪益礼神祥福靖精羽﨟蘒﨡諸﨣﨤逸都﨧﨨﨩飯飼館鶴侮僧免勉勤卑喝嘆器塀墨層屮悔慨憎懲敏既暑梅海渚漢煮爫琢碑社祉祈祐祖祝禍禎穀突節練縉繁署者臭艹艹著褐視謁謹賓贈辶逸難響頻並况全侀充冀勇勺喝啕喙嗢塚墳奄奔婢嬨廒廙彩徭惘慎愈憎慠懲戴揄搜摒敖晴朗望杖歹殺流滛滋漢瀞煮瞧爵犯猪瑱甆画瘝瘟益盛直睊着磌窱節类絛練缾者荒華蝹襁覆視調諸請謁諾諭謹變贈輸遲醙鉶陼難靖韛響頋頻鬒龜𢡊𢡄𣏕㮝䀘䀹𥉉𥳐𧻓齃龎יִײַﬠﬡﬢﬣﬤﬥﬦﬧﬨשׁשׂשּׁשּׂאַאָאּבּגּדּהּוּזּטּיּךּכּלּמּנּסּףּפּצּקּרּשּתּוֹבֿכֿפֿﭏﭐﭑﭒﭓﭔﭕﭖﭗﭘﭙﭚﭛﭜﭝﭞﭟﭠﭡﭢﭣﭤﭥﭦﭧﭨﭩﭪﭫﭬﭭﭮﭯﭰﭱﭲﭳﭴﭵﭶﭷﭸﭹﭺﭻﭼﭽﭾﭿﮀﮁﮂﮃﮄﮅﮆﮇﮈﮉﮊﮋﮌﮍﮎﮏﮐﮑﮒﮓﮔﮕﮖﮗﮘﮙﮚﮛﮜﮝﮞﮟﮠﮡﮢﮣﮤﮥﮦﮧﮨﮩﮪﮫﮬﮭﮮﮯﮰﮱﯓﯔﯕﯖﯗﯘﯙﯚﯛﯜﯝﯞﯟﯠﯡﯢﯣﯤﯥﯦﯧﯨﯩﯪﯫﯬﯭﯮﯯﯰﯱﯲﯳﯴﯵﯶﯷﯸﯹﯺﯻﯼﯽﯾﯿﰀﰁﰂﰃﰄﰅﰆﰇﰈﰉﰊﰋﰌﰍﰎﰏﰐﰑﰒﰓﰔﰕﰖﰗﰘﰙﰚﰛﰜﰝﰞﰟﰠﰡﰢﰣﰤﰥﰦﰧﰨﰩﰪﰫﰬﰭﰮﰯﰰﰱﰲﰳﰴﰵﰶﰷﰸﰹﰺﰻﰼﰽﰾﰿﱀﱁﱂﱃﱄﱅﱆﱇﱈﱉﱊﱋﱌﱍﱎﱏﱐﱑﱒﱓﱔﱕﱖﱗﱘﱙﱚﱛﱜﱝﱞﱟﱠﱡﱢﱣﱤﱥﱦﱧﱨﱩﱪﱫﱬﱭﱮﱯﱰﱱﱲﱳﱴﱵﱶﱷﱸﱹﱺﱻﱼﱽﱾﱿﲀﲁﲂﲃﲄﲅﲆﲇﲈﲉﲊﲋﲌﲍﲎﲏﲐﲑﲒﲓﲔﲕﲖﲗﲘﲙﲚﲛﲜﲝﲞﲟﲠﲡﲢﲣﲤﲥﲦﲧﲨﲩﲪﲫﲬﲭﲮﲯﲰﲱﲲﲳﲴﲵﲶﲷﲸﲹﲺﲻﲼﲽﲾﲿﳀﳁﳂﳃﳄﳅﳆﳇﳈﳉﳊﳋﳌﳍﳎﳏﳐﳑﳒﳓﳔﳕﳖﳗﳘﳙﳚﳛﳜﳝﳞﳟﳠﳡﳢﳣﳤﳥﳦﳧﳨﳩﳪﳫﳬﳭﳮﳯﳰﳱﳲﳳﳴﳵﳶﳷﳸﳹﳺﳻﳼﳽﳾﳿﴀﴁﴂﴃﴄﴅﴆﴇﴈﴉﴊﴋﴌﴍﴎﴏﴐﴑﴒﴓﴔﴕﴖﴗﴘﴙﴚﴛﴜﴝﴞﴟﴠﴡﴢﴣﴤﴥﴦﴧﴨﴩﴪﴫﴬﴭﴮﴯﴰﴱﴲﴳﴴﴵﴶﴷﴸﴹﴺﴻﴼﴽﵐﵑﵒﵓﵔﵕﵖﵗﵘﵙﵚﵛﵜﵝﵞﵟﵠﵡﵢﵣﵤﵥﵦﵧﵨﵩﵪﵫﵬﵭﵮﵯﵰﵱﵲﵳﵴﵵﵶﵷﵸﵹﵺﵻﵼﵽﵾﵿﶀﶁﶂﶃﶄﶅﶆﶇﶈﶉﶊﶋﶌﶍﶎﶏﶒﶓﶔﶕﶖﶗﶘﶙﶚﶛﶜﶝﶞﶟﶠﶡﶢﶣﶤﶥﶦﶧﶨﶩﶪﶫﶬﶭﶮﶯﶰﶱﶲﶳﶴﶵﶶﶷﶸﶹﶺﶻﶼﶽﶾﶿﷀﷁﷂﷃﷄﷅﷆﷇﷰﷱﷲﷳﷴﷵﷶﷷﷸﷹﷺﷻﹰﹱﹲﹳﹴﹶﹷﹸﹹﹺﹻﹼﹽﹾﹿﺀﺁﺂﺃﺄﺅﺆﺇﺈﺉﺊﺋﺌﺍﺎﺏﺐﺑﺒﺓﺔﺕﺖﺗﺘﺙﺚﺛﺜﺝﺞﺟﺠﺡﺢﺣﺤﺥﺦﺧﺨﺩﺪﺫﺬﺭﺮﺯﺰﺱﺲﺳﺴﺵﺶﺷﺸﺹﺺﺻﺼﺽﺾﺿﻀﻁﻂﻃﻄﻅﻆﻇﻈﻉﻊﻋﻌﻍﻎﻏﻐﻑﻒﻓﻔﻕﻖﻗﻘﻙﻚﻛﻜﻝﻞﻟﻠﻡﻢﻣﻤﻥﻦﻧﻨﻩﻪﻫﻬﻭﻮﻯﻰﻱﻲﻳﻴﻵﻶﻷﻸﻹﻺﻻﻼｦｧｨｩｪｫｬｭｮｯｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜﾝﾠﾡﾢﾣﾤﾥﾦﾧﾨﾩﾪﾫﾬﾭﾮﾯﾰﾱﾲﾳﾴﾵﾶﾷﾸﾹﾺﾻﾼﾽﾾￂￃￄￅￆￇￊￋￌￍￎￏￒￓￔￕￖￗￚￛￜ]");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Lt() {
        var cacheKey = "Lt" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos).match(/^[ǅǈǋǲᾈᾉᾊᾋᾌᾍᾎᾏᾘᾙᾚᾛᾜᾝᾞᾟᾨᾩᾪᾫᾬᾭᾮᾯᾼῌῼ]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[ǅǈǋǲᾈᾉᾊᾋᾌᾍᾎᾏᾘᾙᾚᾛᾜᾝᾞᾟᾨᾩᾪᾫᾬᾭᾮᾯᾼῌῼ]");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Lu() {
        var cacheKey = "Lu" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos).match(/^[ABCDEFGHIJKLMNOPQRSTUVWXYZÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞĀĂĄĆĈĊČĎĐĒĔĖĘĚĜĞĠĢĤĦĨĪĬĮİĲĴĶĹĻĽĿŁŃŅŇŊŌŎŐŒŔŖŘŚŜŞŠŢŤŦŨŪŬŮŰŲŴŶŸŹŻŽƁƂƄƆƇƉƊƋƎƏƐƑƓƔƖƗƘƜƝƟƠƢƤƦƧƩƬƮƯƱƲƳƵƷƸƼǄǇǊǍǏǑǓǕǗǙǛǞǠǢǤǦǨǪǬǮǱǴǶǷǸǺǼǾȀȂȄȆȈȊȌȎȐȒȔȖȘȚȜȞȠȢȤȦȨȪȬȮȰȲȺȻȽȾɁɃɄɅɆɈɊɌɎͰͲͶΆΈΉΊΌΎΏΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩΪΫϏϒϓϔϘϚϜϞϠϢϤϦϨϪϬϮϴϷϹϺϽϾϿЀЁЂЃЄЅІЇЈЉЊЋЌЍЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯѠѢѤѦѨѪѬѮѰѲѴѶѸѺѼѾҀҊҌҎҐҒҔҖҘҚҜҞҠҢҤҦҨҪҬҮҰҲҴҶҸҺҼҾӀӁӃӅӇӉӋӍӐӒӔӖӘӚӜӞӠӢӤӦӨӪӬӮӰӲӴӶӸӺӼӾԀԂԄԆԈԊԌԎԐԒԔԖԘԚԜԞԠԢԱԲԳԴԵԶԷԸԹԺԻԼԽԾԿՀՁՂՃՄՅՆՇՈՉՊՋՌՍՎՏՐՑՒՓՔՕՖႠႡႢႣႤႥႦႧႨႩႪႫႬႭႮႯႰႱႲႳႴႵႶႷႸႹႺႻႼႽႾႿჀჁჂჃჄჅḀḂḄḆḈḊḌḎḐḒḔḖḘḚḜḞḠḢḤḦḨḪḬḮḰḲḴḶḸḺḼḾṀṂṄṆṈṊṌṎṐṒṔṖṘṚṜṞṠṢṤṦṨṪṬṮṰṲṴṶṸṺṼṾẀẂẄẆẈẊẌẎẐẒẔẞẠẢẤẦẨẪẬẮẰẲẴẶẸẺẼẾỀỂỄỆỈỊỌỎỐỒỔỖỘỚỜỞỠỢỤỦỨỪỬỮỰỲỴỶỸỺỼỾἈἉἊἋἌἍἎἏἘἙἚἛἜἝἨἩἪἫἬἭἮἯἸἹἺἻἼἽἾἿὈὉὊὋὌὍὙὛὝὟὨὩὪὫὬὭὮὯᾸᾹᾺΆῈΈῊΉῘῙῚΊῨῩῪΎῬῸΌῺΏℂℇℋℌℍℐℑℒℕℙℚℛℜℝℤΩℨKÅℬℭℰℱℲℳℾℿⅅↃⰀⰁⰂⰃⰄⰅⰆⰇⰈⰉⰊⰋⰌⰍⰎⰏⰐⰑⰒⰓⰔⰕⰖⰗⰘⰙⰚⰛⰜⰝⰞⰟⰠⰡⰢⰣⰤⰥⰦⰧⰨⰩⰪⰫⰬⰭⰮⱠⱢⱣⱤⱧⱩⱫⱭⱮⱯⱲⱵⲀⲂⲄⲆⲈⲊⲌⲎⲐⲒⲔⲖⲘⲚⲜⲞⲠⲢⲤⲦⲨⲪⲬⲮⲰⲲⲴⲶⲸⲺⲼⲾⳀⳂⳄⳆⳈⳊⳌⳎⳐⳒⳔⳖⳘⳚⳜⳞⳠⳢꙀꙂꙄꙆꙈꙊꙌꙎꙐꙒꙔꙖꙘꙚꙜꙞꙢꙤꙦꙨꙪꙬꚀꚂꚄꚆꚈꚊꚌꚎꚐꚒꚔꚖꜢꜤꜦꜨꜪꜬꜮꜲꜴꜶꜸꜺꜼꜾꝀꝂꝄꝆꝈꝊꝌꝎꝐꝒꝔꝖꝘꝚꝜꝞꝠꝢꝤꝦꝨꝪꝬꝮꝹꝻꝽꝾꞀꞂꞄꞆꞋＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[ABCDEFGHIJKLMNOPQRSTUVWXYZÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞĀĂĄĆĈĊČĎĐĒĔĖĘĚĜĞĠĢĤĦĨĪĬĮİĲĴĶĹĻĽĿŁŃŅŇŊŌŎŐŒŔŖŘŚŜŞŠŢŤŦŨŪŬŮŰŲŴŶŸŹŻŽƁƂƄƆƇƉƊƋƎƏƐƑƓƔƖƗƘƜƝƟƠƢƤƦƧƩƬƮƯƱƲƳƵƷƸƼǄǇǊǍǏǑǓǕǗǙǛǞǠǢǤǦǨǪǬǮǱǴǶǷǸǺǼǾȀȂȄȆȈȊȌȎȐȒȔȖȘȚȜȞȠȢȤȦȨȪȬȮȰȲȺȻȽȾɁɃɄɅɆɈɊɌɎͰͲͶΆΈΉΊΌΎΏΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩΪΫϏϒϓϔϘϚϜϞϠϢϤϦϨϪϬϮϴϷϹϺϽϾϿЀЁЂЃЄЅІЇЈЉЊЋЌЍЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯѠѢѤѦѨѪѬѮѰѲѴѶѸѺѼѾҀҊҌҎҐҒҔҖҘҚҜҞҠҢҤҦҨҪҬҮҰҲҴҶҸҺҼҾӀӁӃӅӇӉӋӍӐӒӔӖӘӚӜӞӠӢӤӦӨӪӬӮӰӲӴӶӸӺӼӾԀԂԄԆԈԊԌԎԐԒԔԖԘԚԜԞԠԢԱԲԳԴԵԶԷԸԹԺԻԼԽԾԿՀՁՂՃՄՅՆՇՈՉՊՋՌՍՎՏՐՑՒՓՔՕՖႠႡႢႣႤႥႦႧႨႩႪႫႬႭႮႯႰႱႲႳႴႵႶႷႸႹႺႻႼႽႾႿჀჁჂჃჄჅḀḂḄḆḈḊḌḎḐḒḔḖḘḚḜḞḠḢḤḦḨḪḬḮḰḲḴḶḸḺḼḾṀṂṄṆṈṊṌṎṐṒṔṖṘṚṜṞṠṢṤṦṨṪṬṮṰṲṴṶṸṺṼṾẀẂẄẆẈẊẌẎẐẒẔẞẠẢẤẦẨẪẬẮẰẲẴẶẸẺẼẾỀỂỄỆỈỊỌỎỐỒỔỖỘỚỜỞỠỢỤỦỨỪỬỮỰỲỴỶỸỺỼỾἈἉἊἋἌἍἎἏἘἙἚἛἜἝἨἩἪἫἬἭἮἯἸἹἺἻἼἽἾἿὈὉὊὋὌὍὙὛὝὟὨὩὪὫὬὭὮὯᾸᾹᾺΆῈΈῊΉῘῙῚΊῨῩῪΎῬῸΌῺΏℂℇℋℌℍℐℑℒℕℙℚℛℜℝℤΩℨKÅℬℭℰℱℲℳℾℿⅅↃⰀⰁⰂⰃⰄⰅⰆⰇⰈⰉⰊⰋⰌⰍⰎⰏⰐⰑⰒⰓⰔⰕⰖⰗⰘⰙⰚⰛⰜⰝⰞⰟⰠⰡⰢⰣⰤⰥⰦⰧⰨⰩⰪⰫⰬⰭⰮⱠⱢⱣⱤⱧⱩⱫⱭⱮⱯⱲⱵⲀⲂⲄⲆⲈⲊⲌⲎⲐⲒⲔⲖⲘⲚⲜⲞⲠⲢⲤⲦⲨⲪⲬⲮⲰⲲⲴⲶⲸⲺⲼⲾⳀⳂⳄⳆⳈⳊⳌⳎⳐⳒⳔⳖⳘⳚⳜⳞⳠⳢꙀꙂꙄꙆꙈꙊꙌꙎꙐꙒꙔꙖꙘꙚꙜꙞꙢꙤꙦꙨꙪꙬꚀꚂꚄꚆꚈꚊꚌꚎꚐꚒꚔꚖꜢꜤꜦꜨꜪꜬꜮꜲꜴꜶꜸꜺꜼꜾꝀꝂꝄꝆꝈꝊꝌꝎꝐꝒꝔꝖꝘꝚꝜꝞꝠꝢꝤꝦꝨꝪꝬꝮꝹꝻꝽꝾꞀꞂꞄꞆꞋＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ]");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Mc() {
        var cacheKey = "Mc" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos).match(/^[ःािीॉॊोौংঃািীেৈোৌৗਃਾਿੀઃાિીૉોૌଂଃାୀେୈୋୌୗாிுூெேைொோௌௗఁంఃుూృౄಂಃಾೀುೂೃೄೇೈೊೋೕೖംഃാിീെേൈൊോൌൗංඃාැෑෘෙේෛොෝෞෟෲෳ༾༿ཿါာေးျြၖၗၢၣၤၧၨၩၪၫၬၭႃႄႇႈႉႊႋႌႏាើឿៀេែៃោៅះៈᤣᤤᤥᤦᤩᤪᤫᤰᤱᤳᤴᤵᤶᤷᤸᦰᦱᦲᦳᦴᦵᦶᦷᦸᦹᦺᦻᦼᦽᦾᦿᧀᧈᧉᨙᨚᨛᬄᬵᬻᬽᬾᬿᭀᭁᭃ᭄ᮂᮡᮦᮧ᮪ᰤᰥᰦᰧᰨᰩᰪᰫᰴᰵꠣꠤꠧꢀꢁꢴꢵꢶꢷꢸꢹꢺꢻꢼꢽꢾꢿꣀꣁꣂꣃꥒ꥓ꨯꨰꨳꨴꩍ]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[ःािीॉॊोौংঃািীেৈোৌৗਃਾਿੀઃાિીૉોૌଂଃାୀେୈୋୌୗாிுூெேைொோௌௗఁంఃుూృౄಂಃಾೀುೂೃೄೇೈೊೋೕೖംഃാിീെേൈൊോൌൗංඃාැෑෘෙේෛොෝෞෟෲෳ༾༿ཿါာေးျြၖၗၢၣၤၧၨၩၪၫၬၭႃႄႇႈႉႊႋႌႏាើឿៀេែៃោៅះៈᤣᤤᤥᤦᤩᤪᤫᤰᤱᤳᤴᤵᤶᤷᤸᦰᦱᦲᦳᦴᦵᦶᦷᦸᦹᦺᦻᦼᦽᦾᦿᧀᧈᧉᨙᨚᨛᬄᬵᬻᬽᬾᬿᭀᭁᭃ᭄ᮂᮡᮦᮧ᮪ᰤᰥᰦᰧᰨᰩᰪᰫᰴᰵꠣꠤꠧꢀꢁꢴꢵꢶꢷꢸꢹꢺꢻꢼꢽꢾꢿꣀꣁꣂꣃꥒ꥓ꨯꨰꨳꨴꩍ]");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Mn() {
        var cacheKey = "Mn" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos).match(/^[̴̵̶̷̸̡̢̧̨̛̖̗̘̙̜̝̞̟̠̣̤̥̦̩̪̫̬̭̮̯̰̱̲̳̹̺̻̼͇͈͉͍͎̀́̂̃̄̅̆̇̈̉̊̋̌̍̎̏̐̑̒̓̔̽̾̿̀́͂̓̈́͆͊͋͌̕̚ͅ͏ְֱֲֳִֵֶַָׇֹֺֻּֽֿׁׂًٌٍؘَؙُؚِّْٰܑ͓͔͕͖͙͚֑֖֛֢֣֤֥֦֧֪ׅٕٖٜۣ۪ۭܱܴܷܸܹܻܼܾ݂݄݆݈֚֭֮͐͑͒͗͛ͣͤͥͦͧͨͩͪͫͬͭͮͯ҃҄҅҆҇֒֓֔֕֗֘֙֜֝֞֟֠֡֨֩֫֬֯ׄؐؑؒؓؔؕؖؗٓٔٗ٘ٙٚٛٝٞۖۗۘۙۚۛۜ۟۠ۡۢۤۧۨ۫۬ܰܲܳܵܶܺܽܿ݀݁݃݅݇݉݊͘͜͟͢͝͞͠͡ަާިީުޫެޭޮޯް߲߫߬߭߮߯߰߱߳ँं़ुूृॄॅॆेै्॒॑॓॔ॢॣঁ়ুূৃৄ্ৢৣਁਂ਼ੁੂੇੈੋੌ੍ੑੰੱੵઁં઼ુૂૃૄૅેૈ્ૢૣଁ଼ିୁୂୃୄ୍ୖୢୣஂீ்ాిీెేైొోౌ్ౕౖౢౣ಼ಿೆೌ್ೢೣുൂൃൄ്ൢൣ්ිීුූัิีึืฺุู็่้๊๋์ํ๎ັິີຶືຸູົຼ່້໊໋໌ໍཱཱཱིིུུ༹༘༙༵༷ྲྀཷླྀཹེཻོཽཾ྄ཱྀྀྂྃ྆྇ྐྑྒྒྷྔྕྖྗྙྚྛྜྜྷྞྟྠྡྡྷྣྤྥྦྦྷྨྩྪྫྫྷྭྮྯྰྱྲླྴྵྶྷྸྐྵྺྻྼ࿆ိီုူဲဳဴဵံ့္်ွှၘၙၞၟၠၱၲၳၴႂႅႆႍ፟ᜒᜓ᜔ᜲᜳ᜴ᝒᝓᝲᝳិីឹឺុូួំ៉៊់៌៍៎៏័៑្៓៝᠋᠌᠍ᢩᤠᤡᤢᤧᤨᤲ᤻ᨘ᤹᤺ᨗᬀᬁᬂᬃ᬴ᬶᬷᬸᬹᬺᬼᭂ᭬᭫᭭᭮᭯᭰᭱᭲᭳ᮀᮁᮢᮣᮤᮥᮨᮩᰬᰭᰮᰯᰰᰱᰲᰳᰶ⃒⃓⃘⃙⃚⃥⃦⃪⃫᰷゙゚᷐᷎〪᷂᷊᷏᷿⃨⃬⃭⃮⃯〭〮〯〫᷀᷁᷃᷄᷅᷆᷇᷈᷉᷋᷌᷑᷒ᷓᷔᷕᷖᷗᷘᷙᷚᷛᷜᷝᷞᷟᷠᷡᷢᷣᷤᷥᷦ᷾⃐⃑⃔⃕⃖⃗⃛⃜⃡⃧⃩⃰ⷠⷡⷢⷣⷤⷥⷦⷧⷨⷩⷪⷫⷬⷭⷮⷯⷰⷱⷲⷳⷴⷵⷶⷷⷸⷹⷺⷻⷼⷽⷾⷿ꙯꙼꙽〬᷍ꠂ꠆ꠋꠥꠦ꣄ꤦꤧꤨꤩꤪ꤫꤬꤭ꥇꥈꥉꥊꥋꥌꥍꥎꥏꥐꥑꨩꨪꨫꨬꨭꨮꨱꨲꨵꨶꩃꩌﬞ︀︁︂︃︄︅︆︇︈︉︊︋︌︍︎️︠︡︢︣︤︥︦]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[̴̵̶̷̸̡̢̧̨̛̖̗̘̙̜̝̞̟̠̣̤̥̦̩̪̫̬̭̮̯̰̱̲̳̹̺̻̼͇͈͉͍͎̀́̂̃̄̅̆̇̈̉̊̋̌̍̎̏̐̑̒̓̔̽̾̿̀́͂̓̈́͆͊͋͌̕̚ͅ͏ְֱֲֳִֵֶַָׇֹֺֻּֽֿׁׂًٌٍؘَؙُؚِّْٰܑ͓͔͕͖͙͚֑֖֛֢֣֤֥֦֧֪ׅٕٖٜۣ۪ۭܱܴܷܸܹܻܼܾ݂݄݆݈֚֭֮͐͑͒͗͛ͣͤͥͦͧͨͩͪͫͬͭͮͯ҃҄҅҆҇֒֓֔֕֗֘֙֜֝֞֟֠֡֨֩֫֬֯ׄؐؑؒؓؔؕؖؗٓٔٗ٘ٙٚٛٝٞۖۗۘۙۚۛۜ۟۠ۡۢۤۧۨ۫۬ܰܲܳܵܶܺܽܿ݀݁݃݅݇݉݊͘͜͟͢͝͞͠͡ަާިީުޫެޭޮޯް߲߫߬߭߮߯߰߱߳ँं़ुूृॄॅॆेै्॒॑॓॔ॢॣঁ়ুূৃৄ্ৢৣਁਂ਼ੁੂੇੈੋੌ੍ੑੰੱੵઁં઼ુૂૃૄૅેૈ્ૢૣଁ଼ିୁୂୃୄ୍ୖୢୣஂீ்ాిీెేైొోౌ్ౕౖౢౣ಼ಿೆೌ್ೢೣുൂൃൄ്ൢൣ්ිීුූัิีึืฺุู็่้๊๋์ํ๎ັິີຶືຸູົຼ່້໊໋໌ໍཱཱཱིིུུ༹༘༙༵༷ྲྀཷླྀཹེཻོཽཾ྄ཱྀྀྂྃ྆྇ྐྑྒྒྷྔྕྖྗྙྚྛྜྜྷྞྟྠྡྡྷྣྤྥྦྦྷྨྩྪྫྫྷྭྮྯྰྱྲླྴྵྶྷྸྐྵྺྻྼ࿆ိီုူဲဳဴဵံ့္်ွှၘၙၞၟၠၱၲၳၴႂႅႆႍ፟ᜒᜓ᜔ᜲᜳ᜴ᝒᝓᝲᝳិីឹឺុូួំ៉៊់៌៍៎៏័៑្៓៝᠋᠌᠍ᢩᤠᤡᤢᤧᤨᤲ᤻ᨘ᤹᤺ᨗᬀᬁᬂᬃ᬴ᬶᬷᬸᬹᬺᬼᭂ᭬᭫᭭᭮᭯᭰᭱᭲᭳ᮀᮁᮢᮣᮤᮥᮨᮩᰬᰭᰮᰯᰰᰱᰲᰳᰶ⃒⃓⃘⃙⃚⃥⃦⃪⃫᰷゙゚᷐᷎〪᷂᷊᷏᷿⃨⃬⃭⃮⃯〭〮〯〫᷀᷁᷃᷄᷅᷆᷇᷈᷉᷋᷌᷑᷒ᷓᷔᷕᷖᷗᷘᷙᷚᷛᷜᷝᷞᷟᷠᷡᷢᷣᷤᷥᷦ᷾⃐⃑⃔⃕⃖⃗⃛⃜⃡⃧⃩⃰ⷠⷡⷢⷣⷤⷥⷦⷧⷨⷩⷪⷫⷬⷭⷮⷯⷰⷱⷲⷳⷴⷵⷶⷷⷸⷹⷺⷻⷼⷽⷾⷿ꙯꙼꙽〬᷍ꠂ꠆ꠋꠥꠦ꣄ꤦꤧꤨꤩꤪ꤫꤬꤭ꥇꥈꥉꥊꥋꥌꥍꥎꥏꥐꥑꨩꨪꨫꨬꨭꨮꨱꨲꨵꨶꩃꩌﬞ︀︁︂︃︄︅︆︇︈︉︊︋︌︍︎️︠︡︢︣︤︥︦]");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Nd() {
        var cacheKey = "Nd" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos).match(/^[0123456789٠١٢٣٤٥٦٧٨٩۰۱۲۳۴۵۶۷۸۹߀߁߂߃߄߅߆߇߈߉०१२३४५६७८९০১২৩৪৫৬৭৮৯੦੧੨੩੪੫੬੭੮੯૦૧૨૩૪૫૬૭૮૯୦୧୨୩୪୫୬୭୮୯௦௧௨௩௪௫௬௭௮௯౦౧౨౩౪౫౬౭౮౯೦೧೨೩೪೫೬೭೮೯൦൧൨൩൪൫൬൭൮൯๐๑๒๓๔๕๖๗๘๙໐໑໒໓໔໕໖໗໘໙༠༡༢༣༤༥༦༧༨༩၀၁၂၃၄၅၆၇၈၉႐႑႒႓႔႕႖႗႘႙០១២៣៤៥៦៧៨៩᠐᠑᠒᠓᠔᠕᠖᠗᠘᠙᥆᥇᥈᥉᥊᥋᥌᥍᥎᥏᧐᧑᧒᧓᧔᧕᧖᧗᧘᧙᭐᭑᭒᭓᭔᭕᭖᭗᭘᭙᮰᮱᮲᮳᮴᮵᮶᮷᮸᮹᱀᱁᱂᱃᱄᱅᱆᱇᱈᱉᱐᱑᱒᱓᱔᱕᱖᱗᱘᱙꘠꘡꘢꘣꘤꘥꘦꘧꘨꘩꣐꣑꣒꣓꣔꣕꣖꣗꣘꣙꤀꤁꤂꤃꤄꤅꤆꤇꤈꤉꩐꩑꩒꩓꩔꩕꩖꩗꩘꩙０１２３４５６７８９]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[0123456789٠١٢٣٤٥٦٧٨٩۰۱۲۳۴۵۶۷۸۹߀߁߂߃߄߅߆߇߈߉०१२३४५६७८९০১২৩৪৫৬৭৮৯੦੧੨੩੪੫੬੭੮੯૦૧૨૩૪૫૬૭૮૯୦୧୨୩୪୫୬୭୮୯௦௧௨௩௪௫௬௭௮௯౦౧౨౩౪౫౬౭౮౯೦೧೨೩೪೫೬೭೮೯൦൧൨൩൪൫൬൭൮൯๐๑๒๓๔๕๖๗๘๙໐໑໒໓໔໕໖໗໘໙༠༡༢༣༤༥༦༧༨༩၀၁၂၃၄၅၆၇၈၉႐႑႒႓႔႕႖႗႘႙០១២៣៤៥៦៧៨៩᠐᠑᠒᠓᠔᠕᠖᠗᠘᠙᥆᥇᥈᥉᥊᥋᥌᥍᥎᥏᧐᧑᧒᧓᧔᧕᧖᧗᧘᧙᭐᭑᭒᭓᭔᭕᭖᭗᭘᭙᮰᮱᮲᮳᮴᮵᮶᮷᮸᮹᱀᱁᱂᱃᱄᱅᱆᱇᱈᱉᱐᱑᱒᱓᱔᱕᱖᱗᱘᱙꘠꘡꘢꘣꘤꘥꘦꘧꘨꘩꣐꣑꣒꣓꣔꣕꣖꣗꣘꣙꤀꤁꤂꤃꤄꤅꤆꤇꤈꤉꩐꩑꩒꩓꩔꩕꩖꩗꩘꩙０１２３４５６７８９]");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Nl() {
        var cacheKey = "Nl" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos).match(/^[ᛮᛯᛰⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫⅬⅭⅮⅯⅰⅱⅲⅳⅴⅵⅶⅷⅸⅹⅺⅻⅼⅽⅾⅿↀↁↂↅↆↇↈ〇〡〢〣〤〥〦〧〨〩〸〹〺]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[ᛮᛯᛰⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫⅬⅭⅮⅯⅰⅱⅲⅳⅴⅵⅶⅷⅸⅹⅺⅻⅼⅽⅾⅿↀↁↂↅↆↇↈ〇〡〢〣〤〥〦〧〨〩〸〹〺]");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Pc() {
        var cacheKey = "Pc" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos).match(/^[_‿⁀⁔︳︴﹍﹎﹏＿]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[_‿⁀⁔︳︴﹍﹎﹏＿]");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Zs() {
        var cacheKey = "Zs" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos).match(/^[   ᠎             　]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[   ᠎             　]");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_EOS() {
        var cacheKey = "EOS" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos4 = pos;
        var result12 = parse___();
        if (result12 !== null) {
          if (input.substr(pos, 1) === ";") {
            var result13 = ";";
            pos += 1;
          } else {
            var result13 = null;
            if (reportMatchFailures) {
              matchFailed("\";\"");
            }
          }
          if (result13 !== null) {
            var result11 = [result12, result13];
          } else {
            var result11 = null;
            pos = savedPos4;
          }
        } else {
          var result11 = null;
          pos = savedPos4;
        }
        if (result11 !== null) {
          var result0 = result11;
        } else {
          var savedPos3 = pos;
          var result9 = parse__();
          if (result9 !== null) {
            var result10 = parse_LineTerminatorSequence();
            if (result10 !== null) {
              var result8 = [result9, result10];
            } else {
              var result8 = null;
              pos = savedPos3;
            }
          } else {
            var result8 = null;
            pos = savedPos3;
          }
          if (result8 !== null) {
            var result0 = result8;
          } else {
            var savedPos1 = pos;
            var result5 = parse__();
            if (result5 !== null) {
              var savedPos2 = pos;
              var savedReportMatchFailuresVar0 = reportMatchFailures;
              reportMatchFailures = false;
              if (input.substr(pos, 1) === "}") {
                var result7 = "}";
                pos += 1;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\"}\"");
                }
              }
              reportMatchFailures = savedReportMatchFailuresVar0;
              if (result7 !== null) {
                var result6 = '';
                pos = savedPos2;
              } else {
                var result6 = null;
              }
              if (result6 !== null) {
                var result4 = [result5, result6];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            if (result4 !== null) {
              var result0 = result4;
            } else {
              var savedPos0 = pos;
              var result2 = parse___();
              if (result2 !== null) {
                var result3 = parse_EOF();
                if (result3 !== null) {
                  var result1 = [result2, result3];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_EOSNoLineTerminator() {
        var cacheKey = "EOSNoLineTerminator" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos4 = pos;
        var result12 = parse__();
        if (result12 !== null) {
          if (input.substr(pos, 1) === ";") {
            var result13 = ";";
            pos += 1;
          } else {
            var result13 = null;
            if (reportMatchFailures) {
              matchFailed("\";\"");
            }
          }
          if (result13 !== null) {
            var result11 = [result12, result13];
          } else {
            var result11 = null;
            pos = savedPos4;
          }
        } else {
          var result11 = null;
          pos = savedPos4;
        }
        if (result11 !== null) {
          var result0 = result11;
        } else {
          var savedPos3 = pos;
          var result9 = parse__();
          if (result9 !== null) {
            var result10 = parse_LineTerminatorSequence();
            if (result10 !== null) {
              var result8 = [result9, result10];
            } else {
              var result8 = null;
              pos = savedPos3;
            }
          } else {
            var result8 = null;
            pos = savedPos3;
          }
          if (result8 !== null) {
            var result0 = result8;
          } else {
            var savedPos1 = pos;
            var result5 = parse__();
            if (result5 !== null) {
              var savedPos2 = pos;
              var savedReportMatchFailuresVar0 = reportMatchFailures;
              reportMatchFailures = false;
              if (input.substr(pos, 1) === "}") {
                var result7 = "}";
                pos += 1;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\"}\"");
                }
              }
              reportMatchFailures = savedReportMatchFailuresVar0;
              if (result7 !== null) {
                var result6 = '';
                pos = savedPos2;
              } else {
                var result6 = null;
              }
              if (result6 !== null) {
                var result4 = [result5, result6];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            if (result4 !== null) {
              var result0 = result4;
            } else {
              var savedPos0 = pos;
              var result2 = parse__();
              if (result2 !== null) {
                var result3 = parse_EOF();
                if (result3 !== null) {
                  var result1 = [result2, result3];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_EOF() {
        var cacheKey = "EOF" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedReportMatchFailuresVar0 = reportMatchFailures;
        reportMatchFailures = false;
        if (input.length > pos) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed('any character');
          }
        }
        reportMatchFailures = savedReportMatchFailuresVar0;
        if (result1 === null) {
          var result0 = '';
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse__() {
        var cacheKey = "_" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result0 = [];
        var result4 = parse_WhiteSpace();
        if (result4 !== null) {
          var result1 = result4;
        } else {
          var result3 = parse_MultiLineCommentNoLineTerminator();
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result2 = parse_SingleLineComment();
            if (result2 !== null) {
              var result1 = result2;
            } else {
              var result1 = null;;
            };
          };
        }
        while (result1 !== null) {
          result0.push(result1);
          var result4 = parse_WhiteSpace();
          if (result4 !== null) {
            var result1 = result4;
          } else {
            var result3 = parse_MultiLineCommentNoLineTerminator();
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result2 = parse_SingleLineComment();
              if (result2 !== null) {
                var result1 = result2;
              } else {
                var result1 = null;;
              };
            };
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse___() {
        var cacheKey = "__" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result0 = [];
        var result4 = parse_WhiteSpace();
        if (result4 !== null) {
          var result1 = result4;
        } else {
          var result3 = parse_LineTerminatorSequence();
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result2 = parse_Comment();
            if (result2 !== null) {
              var result1 = result2;
            } else {
              var result1 = null;;
            };
          };
        }
        while (result1 !== null) {
          result0.push(result1);
          var result4 = parse_WhiteSpace();
          if (result4 !== null) {
            var result1 = result4;
          } else {
            var result3 = parse_LineTerminatorSequence();
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result2 = parse_Comment();
              if (result2 !== null) {
                var result1 = result2;
              } else {
                var result1 = null;;
              };
            };
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PrimaryExpression() {
        var cacheKey = "PrimaryExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result14 = parse_ThisToken();
        var result13 = result14 !== null
          ? (function() { return { type: "This" }; })()
          : null;
        if (result13 !== null) {
          var result0 = result13;
        } else {
          var result12 = parse_Identifier();
          var result11 = result12 !== null
            ? (function(name) { return { type: "Variable", name: name }; })(result12)
            : null;
          if (result11 !== null) {
            var result0 = result11;
          } else {
            var result10 = parse_Literal();
            if (result10 !== null) {
              var result0 = result10;
            } else {
              var result9 = parse_ArrayLiteral();
              if (result9 !== null) {
                var result0 = result9;
              } else {
                var result8 = parse_ObjectLiteral();
                if (result8 !== null) {
                  var result0 = result8;
                } else {
                  var savedPos0 = pos;
                  if (input.substr(pos, 1) === "(") {
                    var result3 = "(";
                    pos += 1;
                  } else {
                    var result3 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"(\"");
                    }
                  }
                  if (result3 !== null) {
                    var result4 = parse___();
                    if (result4 !== null) {
                      var result5 = parse_Expression();
                      if (result5 !== null) {
                        var result6 = parse___();
                        if (result6 !== null) {
                          if (input.substr(pos, 1) === ")") {
                            var result7 = ")";
                            pos += 1;
                          } else {
                            var result7 = null;
                            if (reportMatchFailures) {
                              matchFailed("\")\"");
                            }
                          }
                          if (result7 !== null) {
                            var result2 = [result3, result4, result5, result6, result7];
                          } else {
                            var result2 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result2 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result2 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result2 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos0;
                  }
                  var result1 = result2 !== null
                    ? (function(expression) { return expression; })(result2[2])
                    : null;
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ArrayLiteral() {
        var cacheKey = "ArrayLiteral" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 1) === "[") {
          var result2 = "[";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"[\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse___();
          if (result3 !== null) {
            var result11 = parse_ElementList();
            var result4 = result11 !== null ? result11 : '';
            if (result4 !== null) {
              var result5 = parse___();
              if (result5 !== null) {
                var savedPos1 = pos;
                var result9 = parse_Elision();
                if (result9 !== null) {
                  var result10 = parse___();
                  if (result10 !== null) {
                    var result8 = [result9, result10];
                  } else {
                    var result8 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos1;
                }
                var result6 = result8 !== null ? result8 : '';
                if (result6 !== null) {
                  if (input.substr(pos, 1) === "]") {
                    var result7 = "]";
                    pos += 1;
                  } else {
                    var result7 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"]\"");
                    }
                  }
                  if (result7 !== null) {
                    var result1 = [result2, result3, result4, result5, result6, result7];
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(elements) {
                return {
                  type:     "ArrayLiteral",
                  elements: elements !== "" ? elements : []
                };
              })(result1[2])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ElementList() {
        var cacheKey = "ElementList" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos2 = pos;
        var result14 = parse_Elision();
        if (result14 !== null) {
          var result15 = parse___();
          if (result15 !== null) {
            var result13 = [result14, result15];
          } else {
            var result13 = null;
            pos = savedPos2;
          }
        } else {
          var result13 = null;
          pos = savedPos2;
        }
        var result2 = result13 !== null ? result13 : '';
        if (result2 !== null) {
          var result3 = parse_AssignmentExpression();
          if (result3 !== null) {
            var result4 = [];
            var savedPos1 = pos;
            var result6 = parse___();
            if (result6 !== null) {
              if (input.substr(pos, 1) === ",") {
                var result7 = ",";
                pos += 1;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result7 !== null) {
                var result8 = parse___();
                if (result8 !== null) {
                  var result12 = parse_Elision();
                  var result9 = result12 !== null ? result12 : '';
                  if (result9 !== null) {
                    var result10 = parse___();
                    if (result10 !== null) {
                      var result11 = parse_AssignmentExpression();
                      if (result11 !== null) {
                        var result5 = [result6, result7, result8, result9, result10, result11];
                      } else {
                        var result5 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result5 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result5 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
            while (result5 !== null) {
              result4.push(result5);
              var savedPos1 = pos;
              var result6 = parse___();
              if (result6 !== null) {
                if (input.substr(pos, 1) === ",") {
                  var result7 = ",";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\",\"");
                  }
                }
                if (result7 !== null) {
                  var result8 = parse___();
                  if (result8 !== null) {
                    var result12 = parse_Elision();
                    var result9 = result12 !== null ? result12 : '';
                    if (result9 !== null) {
                      var result10 = parse___();
                      if (result10 !== null) {
                        var result11 = parse_AssignmentExpression();
                        if (result11 !== null) {
                          var result5 = [result6, result7, result8, result9, result10, result11];
                        } else {
                          var result5 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result5 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result5 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result5 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                var result = [head];
                for (var i = 0; i < tail.length; i++) {
                  result.push(tail[i][5]);
                }
                return result;
              })(result1[1], result1[2])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Elision() {
        var cacheKey = "Elision" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 1) === ",") {
          var result1 = ",";
          pos += 1;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\",\"");
          }
        }
        if (result1 !== null) {
          var result2 = [];
          var savedPos1 = pos;
          var result4 = parse___();
          if (result4 !== null) {
            if (input.substr(pos, 1) === ",") {
              var result5 = ",";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\",\"");
              }
            }
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          while (result3 !== null) {
            result2.push(result3);
            var savedPos1 = pos;
            var result4 = parse___();
            if (result4 !== null) {
              if (input.substr(pos, 1) === ",") {
                var result5 = ",";
                pos += 1;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result5 !== null) {
                var result3 = [result4, result5];
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ObjectLiteral() {
        var cacheKey = "ObjectLiteral" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 1) === "{") {
          var result2 = "{";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"{\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse___();
          if (result3 !== null) {
            var savedPos1 = pos;
            var result7 = parse_PropertyNameAndValueList();
            if (result7 !== null) {
              var result8 = parse___();
              if (result8 !== null) {
                var savedPos2 = pos;
                if (input.substr(pos, 1) === ",") {
                  var result11 = ",";
                  pos += 1;
                } else {
                  var result11 = null;
                  if (reportMatchFailures) {
                    matchFailed("\",\"");
                  }
                }
                if (result11 !== null) {
                  var result12 = parse___();
                  if (result12 !== null) {
                    var result10 = [result11, result12];
                  } else {
                    var result10 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result10 = null;
                  pos = savedPos2;
                }
                var result9 = result10 !== null ? result10 : '';
                if (result9 !== null) {
                  var result6 = [result7, result8, result9];
                } else {
                  var result6 = null;
                  pos = savedPos1;
                }
              } else {
                var result6 = null;
                pos = savedPos1;
              }
            } else {
              var result6 = null;
              pos = savedPos1;
            }
            var result4 = result6 !== null ? result6 : '';
            if (result4 !== null) {
              if (input.substr(pos, 1) === "}") {
                var result5 = "}";
                pos += 1;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("\"}\"");
                }
              }
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(properties) {
                return {
                  type:       "ObjectLiteral",
                  properties: properties !== "" ? properties[0] : []
                };
              })(result1[2])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PropertyNameAndValueList() {
        var cacheKey = "PropertyNameAndValueList" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_PropertyAssignment();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = parse___();
          if (result5 !== null) {
            if (input.substr(pos, 1) === ",") {
              var result6 = ",";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\",\"");
              }
            }
            if (result6 !== null) {
              var result7 = parse___();
              if (result7 !== null) {
                var result8 = parse_PropertyAssignment();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = parse___();
            if (result5 !== null) {
              if (input.substr(pos, 1) === ",") {
                var result6 = ",";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result6 !== null) {
                var result7 = parse___();
                if (result7 !== null) {
                  var result8 = parse_PropertyAssignment();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                var result = [head];
                for (var i = 0; i < tail.length; i++) {
                  result.push(tail[i][3]);
                }
                return result;
              })(result1[0], result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PropertyAssignment() {
        var cacheKey = "PropertyAssignment" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos2 = pos;
        var result35 = parse_PropertyName();
        if (result35 !== null) {
          var result36 = parse___();
          if (result36 !== null) {
            if (input.substr(pos, 1) === ":") {
              var result37 = ":";
              pos += 1;
            } else {
              var result37 = null;
              if (reportMatchFailures) {
                matchFailed("\":\"");
              }
            }
            if (result37 !== null) {
              var result38 = parse___();
              if (result38 !== null) {
                var result39 = parse_AssignmentExpression();
                if (result39 !== null) {
                  var result34 = [result35, result36, result37, result38, result39];
                } else {
                  var result34 = null;
                  pos = savedPos2;
                }
              } else {
                var result34 = null;
                pos = savedPos2;
              }
            } else {
              var result34 = null;
              pos = savedPos2;
            }
          } else {
            var result34 = null;
            pos = savedPos2;
          }
        } else {
          var result34 = null;
          pos = savedPos2;
        }
        var result33 = result34 !== null
          ? (function(name, value) {
                return {
                  type:  "PropertyAssignment",
                  name:  name,
                  value: value
                };
              })(result34[0], result34[4])
          : null;
        if (result33 !== null) {
          var result0 = result33;
        } else {
          var savedPos1 = pos;
          var result20 = parse_GetToken();
          if (result20 !== null) {
            var result21 = parse___();
            if (result21 !== null) {
              var result22 = parse_PropertyName();
              if (result22 !== null) {
                var result23 = parse___();
                if (result23 !== null) {
                  if (input.substr(pos, 1) === "(") {
                    var result24 = "(";
                    pos += 1;
                  } else {
                    var result24 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"(\"");
                    }
                  }
                  if (result24 !== null) {
                    var result25 = parse___();
                    if (result25 !== null) {
                      if (input.substr(pos, 1) === ")") {
                        var result26 = ")";
                        pos += 1;
                      } else {
                        var result26 = null;
                        if (reportMatchFailures) {
                          matchFailed("\")\"");
                        }
                      }
                      if (result26 !== null) {
                        var result27 = parse___();
                        if (result27 !== null) {
                          if (input.substr(pos, 1) === "{") {
                            var result28 = "{";
                            pos += 1;
                          } else {
                            var result28 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"{\"");
                            }
                          }
                          if (result28 !== null) {
                            var result29 = parse___();
                            if (result29 !== null) {
                              var result30 = parse_FunctionBody();
                              if (result30 !== null) {
                                var result31 = parse___();
                                if (result31 !== null) {
                                  if (input.substr(pos, 1) === "}") {
                                    var result32 = "}";
                                    pos += 1;
                                  } else {
                                    var result32 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"}\"");
                                    }
                                  }
                                  if (result32 !== null) {
                                    var result19 = [result20, result21, result22, result23, result24, result25, result26, result27, result28, result29, result30, result31, result32];
                                  } else {
                                    var result19 = null;
                                    pos = savedPos1;
                                  }
                                } else {
                                  var result19 = null;
                                  pos = savedPos1;
                                }
                              } else {
                                var result19 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result19 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result19 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result19 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result19 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result19 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result19 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result19 = null;
                  pos = savedPos1;
                }
              } else {
                var result19 = null;
                pos = savedPos1;
              }
            } else {
              var result19 = null;
              pos = savedPos1;
            }
          } else {
            var result19 = null;
            pos = savedPos1;
          }
          var result18 = result19 !== null
            ? (function(name, body) {
                  return {
                    type: "GetterDefinition",
                    name: name,
                    body: body
                  };
                })(result19[2], result19[10])
            : null;
          if (result18 !== null) {
            var result0 = result18;
          } else {
            var savedPos0 = pos;
            var result3 = parse_SetToken();
            if (result3 !== null) {
              var result4 = parse___();
              if (result4 !== null) {
                var result5 = parse_PropertyName();
                if (result5 !== null) {
                  var result6 = parse___();
                  if (result6 !== null) {
                    if (input.substr(pos, 1) === "(") {
                      var result7 = "(";
                      pos += 1;
                    } else {
                      var result7 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"(\"");
                      }
                    }
                    if (result7 !== null) {
                      var result8 = parse___();
                      if (result8 !== null) {
                        var result9 = parse_Identifier();
                        if (result9 !== null) {
                          var result10 = parse___();
                          if (result10 !== null) {
                            if (input.substr(pos, 1) === ")") {
                              var result11 = ")";
                              pos += 1;
                            } else {
                              var result11 = null;
                              if (reportMatchFailures) {
                                matchFailed("\")\"");
                              }
                            }
                            if (result11 !== null) {
                              var result12 = parse___();
                              if (result12 !== null) {
                                if (input.substr(pos, 1) === "{") {
                                  var result13 = "{";
                                  pos += 1;
                                } else {
                                  var result13 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"{\"");
                                  }
                                }
                                if (result13 !== null) {
                                  var result14 = parse___();
                                  if (result14 !== null) {
                                    var result15 = parse_FunctionBody();
                                    if (result15 !== null) {
                                      var result16 = parse___();
                                      if (result16 !== null) {
                                        if (input.substr(pos, 1) === "}") {
                                          var result17 = "}";
                                          pos += 1;
                                        } else {
                                          var result17 = null;
                                          if (reportMatchFailures) {
                                            matchFailed("\"}\"");
                                          }
                                        }
                                        if (result17 !== null) {
                                          var result2 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17];
                                        } else {
                                          var result2 = null;
                                          pos = savedPos0;
                                        }
                                      } else {
                                        var result2 = null;
                                        pos = savedPos0;
                                      }
                                    } else {
                                      var result2 = null;
                                      pos = savedPos0;
                                    }
                                  } else {
                                    var result2 = null;
                                    pos = savedPos0;
                                  }
                                } else {
                                  var result2 = null;
                                  pos = savedPos0;
                                }
                              } else {
                                var result2 = null;
                                pos = savedPos0;
                              }
                            } else {
                              var result2 = null;
                              pos = savedPos0;
                            }
                          } else {
                            var result2 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result2 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result2 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result2 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
            var result1 = result2 !== null
              ? (function(name, param, body) {
                    return {
                      type:  "SetterDefinition",
                      name:  name,
                      param: param,
                      body:  body
                    };
                  })(result2[2], result2[6], result2[12])
              : null;
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PropertyName() {
        var cacheKey = "PropertyName" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result3 = parse_IdentifierName();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_StringLiteral();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_NumericLiteral();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_MemberExpression() {
        var cacheKey = "MemberExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result27 = parse_PrimaryExpression();
        if (result27 !== null) {
          var result2 = result27;
        } else {
          var result26 = parse_FunctionExpression();
          if (result26 !== null) {
            var result2 = result26;
          } else {
            var savedPos3 = pos;
            var result21 = parse_NewToken();
            if (result21 !== null) {
              var result22 = parse___();
              if (result22 !== null) {
                var result23 = parse_MemberExpression();
                if (result23 !== null) {
                  var result24 = parse___();
                  if (result24 !== null) {
                    var result25 = parse_Arguments();
                    if (result25 !== null) {
                      var result20 = [result21, result22, result23, result24, result25];
                    } else {
                      var result20 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result20 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result20 = null;
                  pos = savedPos3;
                }
              } else {
                var result20 = null;
                pos = savedPos3;
              }
            } else {
              var result20 = null;
              pos = savedPos3;
            }
            var result19 = result20 !== null
              ? (function(constructor, arguments) {
                        return {
                          type:        "NewOperator",
                          constructor: constructor,
                          arguments:   arguments
                        };
                      })(result20[2], result20[4])
              : null;
            if (result19 !== null) {
              var result2 = result19;
            } else {
              var result2 = null;;
            };
          };
        }
        if (result2 !== null) {
          var result3 = [];
          var savedPos2 = pos;
          var result13 = parse___();
          if (result13 !== null) {
            if (input.substr(pos, 1) === "[") {
              var result14 = "[";
              pos += 1;
            } else {
              var result14 = null;
              if (reportMatchFailures) {
                matchFailed("\"[\"");
              }
            }
            if (result14 !== null) {
              var result15 = parse___();
              if (result15 !== null) {
                var result16 = parse_Expression();
                if (result16 !== null) {
                  var result17 = parse___();
                  if (result17 !== null) {
                    if (input.substr(pos, 1) === "]") {
                      var result18 = "]";
                      pos += 1;
                    } else {
                      var result18 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"]\"");
                      }
                    }
                    if (result18 !== null) {
                      var result12 = [result13, result14, result15, result16, result17, result18];
                    } else {
                      var result12 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result12 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result12 = null;
                  pos = savedPos2;
                }
              } else {
                var result12 = null;
                pos = savedPos2;
              }
            } else {
              var result12 = null;
              pos = savedPos2;
            }
          } else {
            var result12 = null;
            pos = savedPos2;
          }
          var result11 = result12 !== null
            ? (function(name) { return name; })(result12[3])
            : null;
          if (result11 !== null) {
            var result4 = result11;
          } else {
            var savedPos1 = pos;
            var result7 = parse___();
            if (result7 !== null) {
              if (input.substr(pos, 1) === ".") {
                var result8 = ".";
                pos += 1;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("\".\"");
                }
              }
              if (result8 !== null) {
                var result9 = parse___();
                if (result9 !== null) {
                  var result10 = parse_IdentifierName();
                  if (result10 !== null) {
                    var result6 = [result7, result8, result9, result10];
                  } else {
                    var result6 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos1;
                }
              } else {
                var result6 = null;
                pos = savedPos1;
              }
            } else {
              var result6 = null;
              pos = savedPos1;
            }
            var result5 = result6 !== null
              ? (function(name) { return name; })(result6[3])
              : null;
            if (result5 !== null) {
              var result4 = result5;
            } else {
              var result4 = null;;
            };
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos2 = pos;
            var result13 = parse___();
            if (result13 !== null) {
              if (input.substr(pos, 1) === "[") {
                var result14 = "[";
                pos += 1;
              } else {
                var result14 = null;
                if (reportMatchFailures) {
                  matchFailed("\"[\"");
                }
              }
              if (result14 !== null) {
                var result15 = parse___();
                if (result15 !== null) {
                  var result16 = parse_Expression();
                  if (result16 !== null) {
                    var result17 = parse___();
                    if (result17 !== null) {
                      if (input.substr(pos, 1) === "]") {
                        var result18 = "]";
                        pos += 1;
                      } else {
                        var result18 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"]\"");
                        }
                      }
                      if (result18 !== null) {
                        var result12 = [result13, result14, result15, result16, result17, result18];
                      } else {
                        var result12 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result12 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result12 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result12 = null;
                  pos = savedPos2;
                }
              } else {
                var result12 = null;
                pos = savedPos2;
              }
            } else {
              var result12 = null;
              pos = savedPos2;
            }
            var result11 = result12 !== null
              ? (function(name) { return name; })(result12[3])
              : null;
            if (result11 !== null) {
              var result4 = result11;
            } else {
              var savedPos1 = pos;
              var result7 = parse___();
              if (result7 !== null) {
                if (input.substr(pos, 1) === ".") {
                  var result8 = ".";
                  pos += 1;
                } else {
                  var result8 = null;
                  if (reportMatchFailures) {
                    matchFailed("\".\"");
                  }
                }
                if (result8 !== null) {
                  var result9 = parse___();
                  if (result9 !== null) {
                    var result10 = parse_IdentifierName();
                    if (result10 !== null) {
                      var result6 = [result7, result8, result9, result10];
                    } else {
                      var result6 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result6 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos1;
                }
              } else {
                var result6 = null;
                pos = savedPos1;
              }
              var result5 = result6 !== null
                ? (function(name) { return name; })(result6[3])
                : null;
              if (result5 !== null) {
                var result4 = result5;
              } else {
                var result4 = null;;
              };
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(base, accessors) {
                var result = base;
                for (var i = 0; i < accessors.length; i++) {
                  result = {
                    type: "PropertyAccess",
                    base: result,
                    name: accessors[i]
                  };
                }
                return result;
              })(result1[0], result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_NewExpression() {
        var cacheKey = "NewExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result6 = parse_MemberExpression();
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var savedPos0 = pos;
          var result3 = parse_NewToken();
          if (result3 !== null) {
            var result4 = parse___();
            if (result4 !== null) {
              var result5 = parse_NewExpression();
              if (result5 !== null) {
                var result2 = [result3, result4, result5];
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(constructor) {
                  return {
                    type:        "NewOperator",
                    constructor: constructor,
                    arguments:   []
                  };
                })(result2[2])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_CallExpression() {
        var cacheKey = "CallExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos4 = pos;
        var result24 = parse_MemberExpression();
        if (result24 !== null) {
          var result25 = parse___();
          if (result25 !== null) {
            var result26 = parse_Arguments();
            if (result26 !== null) {
              var result23 = [result24, result25, result26];
            } else {
              var result23 = null;
              pos = savedPos4;
            }
          } else {
            var result23 = null;
            pos = savedPos4;
          }
        } else {
          var result23 = null;
          pos = savedPos4;
        }
        var result2 = result23 !== null
          ? (function(name, arguments) {
                  return {
                    type:      "FunctionCall",
                    name:      name,
                    arguments: arguments
                  };
                })(result23[0], result23[2])
          : null;
        if (result2 !== null) {
          var result3 = [];
          var savedPos3 = pos;
          var result21 = parse___();
          if (result21 !== null) {
            var result22 = parse_Arguments();
            if (result22 !== null) {
              var result20 = [result21, result22];
            } else {
              var result20 = null;
              pos = savedPos3;
            }
          } else {
            var result20 = null;
            pos = savedPos3;
          }
          var result19 = result20 !== null
            ? (function(arguments) {
                      return {
                        type:      "FunctionCallArguments",
                        arguments: arguments
                      };
                    })(result20[1])
            : null;
          if (result19 !== null) {
            var result4 = result19;
          } else {
            var savedPos2 = pos;
            var result13 = parse___();
            if (result13 !== null) {
              if (input.substr(pos, 1) === "[") {
                var result14 = "[";
                pos += 1;
              } else {
                var result14 = null;
                if (reportMatchFailures) {
                  matchFailed("\"[\"");
                }
              }
              if (result14 !== null) {
                var result15 = parse___();
                if (result15 !== null) {
                  var result16 = parse_Expression();
                  if (result16 !== null) {
                    var result17 = parse___();
                    if (result17 !== null) {
                      if (input.substr(pos, 1) === "]") {
                        var result18 = "]";
                        pos += 1;
                      } else {
                        var result18 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"]\"");
                        }
                      }
                      if (result18 !== null) {
                        var result12 = [result13, result14, result15, result16, result17, result18];
                      } else {
                        var result12 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result12 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result12 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result12 = null;
                  pos = savedPos2;
                }
              } else {
                var result12 = null;
                pos = savedPos2;
              }
            } else {
              var result12 = null;
              pos = savedPos2;
            }
            var result11 = result12 !== null
              ? (function(name) {
                        return {
                          type: "PropertyAccessProperty",
                          name: name
                        };
                      })(result12[3])
              : null;
            if (result11 !== null) {
              var result4 = result11;
            } else {
              var savedPos1 = pos;
              var result7 = parse___();
              if (result7 !== null) {
                if (input.substr(pos, 1) === ".") {
                  var result8 = ".";
                  pos += 1;
                } else {
                  var result8 = null;
                  if (reportMatchFailures) {
                    matchFailed("\".\"");
                  }
                }
                if (result8 !== null) {
                  var result9 = parse___();
                  if (result9 !== null) {
                    var result10 = parse_IdentifierName();
                    if (result10 !== null) {
                      var result6 = [result7, result8, result9, result10];
                    } else {
                      var result6 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result6 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos1;
                }
              } else {
                var result6 = null;
                pos = savedPos1;
              }
              var result5 = result6 !== null
                ? (function(name) {
                          return {
                            type: "PropertyAccessProperty",
                            name: name
                          };
                        })(result6[3])
                : null;
              if (result5 !== null) {
                var result4 = result5;
              } else {
                var result4 = null;;
              };
            };
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos3 = pos;
            var result21 = parse___();
            if (result21 !== null) {
              var result22 = parse_Arguments();
              if (result22 !== null) {
                var result20 = [result21, result22];
              } else {
                var result20 = null;
                pos = savedPos3;
              }
            } else {
              var result20 = null;
              pos = savedPos3;
            }
            var result19 = result20 !== null
              ? (function(arguments) {
                        return {
                          type:      "FunctionCallArguments",
                          arguments: arguments
                        };
                      })(result20[1])
              : null;
            if (result19 !== null) {
              var result4 = result19;
            } else {
              var savedPos2 = pos;
              var result13 = parse___();
              if (result13 !== null) {
                if (input.substr(pos, 1) === "[") {
                  var result14 = "[";
                  pos += 1;
                } else {
                  var result14 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"[\"");
                  }
                }
                if (result14 !== null) {
                  var result15 = parse___();
                  if (result15 !== null) {
                    var result16 = parse_Expression();
                    if (result16 !== null) {
                      var result17 = parse___();
                      if (result17 !== null) {
                        if (input.substr(pos, 1) === "]") {
                          var result18 = "]";
                          pos += 1;
                        } else {
                          var result18 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"]\"");
                          }
                        }
                        if (result18 !== null) {
                          var result12 = [result13, result14, result15, result16, result17, result18];
                        } else {
                          var result12 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result12 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result12 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result12 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result12 = null;
                  pos = savedPos2;
                }
              } else {
                var result12 = null;
                pos = savedPos2;
              }
              var result11 = result12 !== null
                ? (function(name) {
                          return {
                            type: "PropertyAccessProperty",
                            name: name
                          };
                        })(result12[3])
                : null;
              if (result11 !== null) {
                var result4 = result11;
              } else {
                var savedPos1 = pos;
                var result7 = parse___();
                if (result7 !== null) {
                  if (input.substr(pos, 1) === ".") {
                    var result8 = ".";
                    pos += 1;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\".\"");
                    }
                  }
                  if (result8 !== null) {
                    var result9 = parse___();
                    if (result9 !== null) {
                      var result10 = parse_IdentifierName();
                      if (result10 !== null) {
                        var result6 = [result7, result8, result9, result10];
                      } else {
                        var result6 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result6 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result6 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos1;
                }
                var result5 = result6 !== null
                  ? (function(name) {
                            return {
                              type: "PropertyAccessProperty",
                              name: name
                            };
                          })(result6[3])
                  : null;
                if (result5 !== null) {
                  var result4 = result5;
                } else {
                  var result4 = null;;
                };
              };
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(base, argumentsOrAccessors) {
                var result = base;
                for (var i = 0; i < argumentsOrAccessors.length; i++) {
                  switch (argumentsOrAccessors[i].type) {
                    case "FunctionCallArguments":
                      result = {
                        type:      "FunctionCall",
                        name:      result,
                        arguments: argumentsOrAccessors[i].arguments
                      };
                      break;
                    case "PropertyAccessProperty":
                      result = {
                        type: "PropertyAccess",
                        base: result,
                        name: argumentsOrAccessors[i].name
                      };
                      break;
                    default:
                      throw new Error(
                        "Invalid expression type: " + argumentsOrAccessors[i].type
                      );
                  }
                }
                return result;
              })(result1[0], result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Arguments() {
        var cacheKey = "Arguments" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 1) === "(") {
          var result2 = "(";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"(\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse___();
          if (result3 !== null) {
            var result7 = parse_ArgumentList();
            var result4 = result7 !== null ? result7 : '';
            if (result4 !== null) {
              var result5 = parse___();
              if (result5 !== null) {
                if (input.substr(pos, 1) === ")") {
                  var result6 = ")";
                  pos += 1;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\")\"");
                  }
                }
                if (result6 !== null) {
                  var result1 = [result2, result3, result4, result5, result6];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(arguments) {
              return arguments !== "" ? arguments : [];
            })(result1[2])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ArgumentList() {
        var cacheKey = "ArgumentList" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_AssignmentExpression();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = parse___();
          if (result5 !== null) {
            if (input.substr(pos, 1) === ",") {
              var result6 = ",";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\",\"");
              }
            }
            if (result6 !== null) {
              var result7 = parse___();
              if (result7 !== null) {
                var result8 = parse_AssignmentExpression();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = parse___();
            if (result5 !== null) {
              if (input.substr(pos, 1) === ",") {
                var result6 = ",";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result6 !== null) {
                var result7 = parse___();
                if (result7 !== null) {
                  var result8 = parse_AssignmentExpression();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
              var result = [head];
              for (var i = 0; i < tail.length; i++) {
                result.push(tail[i][3]);
              }
              return result;
            })(result1[0], result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_LeftHandSideExpression() {
        var cacheKey = "LeftHandSideExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result2 = parse_CallExpression();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_NewExpression();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PostfixExpression() {
        var cacheKey = "PostfixExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result4 = parse_LeftHandSideExpression();
        if (result4 !== null) {
          var result5 = parse__();
          if (result5 !== null) {
            var result6 = parse_PostfixOperator();
            if (result6 !== null) {
              var result3 = [result4, result5, result6];
            } else {
              var result3 = null;
              pos = savedPos0;
            }
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        var result2 = result3 !== null
          ? (function(expression, operator) {
                return {
                  type:       "PostfixExpression",
                  operator:   operator,
                  expression: expression
                };
              })(result3[0], result3[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_LeftHandSideExpression();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PostfixOperator() {
        var cacheKey = "PostfixOperator" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos, 2) === "++") {
          var result2 = "++";
          pos += 2;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"++\"");
          }
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          if (input.substr(pos, 2) === "--") {
            var result1 = "--";
            pos += 2;
          } else {
            var result1 = null;
            if (reportMatchFailures) {
              matchFailed("\"--\"");
            }
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_UnaryExpression() {
        var cacheKey = "UnaryExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result6 = parse_PostfixExpression();
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var savedPos0 = pos;
          var result3 = parse_UnaryOperator();
          if (result3 !== null) {
            var result4 = parse___();
            if (result4 !== null) {
              var result5 = parse_UnaryExpression();
              if (result5 !== null) {
                var result2 = [result3, result4, result5];
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(operator, expression) {
                  return {
                    type:       "UnaryExpression",
                    operator:   operator,
                    expression: expression
                  };
                })(result2[0], result2[2])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_UnaryOperator() {
        var cacheKey = "UnaryOperator" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result9 = parse_DeleteToken();
        if (result9 !== null) {
          var result0 = result9;
        } else {
          var result8 = parse_VoidToken();
          if (result8 !== null) {
            var result0 = result8;
          } else {
            var result7 = parse_TypeofToken();
            if (result7 !== null) {
              var result0 = result7;
            } else {
              if (input.substr(pos, 2) === "++") {
                var result6 = "++";
                pos += 2;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"++\"");
                }
              }
              if (result6 !== null) {
                var result0 = result6;
              } else {
                if (input.substr(pos, 2) === "--") {
                  var result5 = "--";
                  pos += 2;
                } else {
                  var result5 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"--\"");
                  }
                }
                if (result5 !== null) {
                  var result0 = result5;
                } else {
                  if (input.substr(pos, 1) === "+") {
                    var result4 = "+";
                    pos += 1;
                  } else {
                    var result4 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"+\"");
                    }
                  }
                  if (result4 !== null) {
                    var result0 = result4;
                  } else {
                    if (input.substr(pos, 1) === "-") {
                      var result3 = "-";
                      pos += 1;
                    } else {
                      var result3 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"-\"");
                      }
                    }
                    if (result3 !== null) {
                      var result0 = result3;
                    } else {
                      if (input.substr(pos, 1) === "~") {
                        var result2 = "~";
                        pos += 1;
                      } else {
                        var result2 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"~\"");
                        }
                      }
                      if (result2 !== null) {
                        var result0 = result2;
                      } else {
                        if (input.substr(pos, 1) === "!") {
                          var result1 = "!";
                          pos += 1;
                        } else {
                          var result1 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"!\"");
                          }
                        }
                        if (result1 !== null) {
                          var result0 = result1;
                        } else {
                          var result0 = null;;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_MultiplicativeExpression() {
        var cacheKey = "MultiplicativeExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_UnaryExpression();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = parse___();
          if (result5 !== null) {
            var result6 = parse_MultiplicativeOperator();
            if (result6 !== null) {
              var result7 = parse___();
              if (result7 !== null) {
                var result8 = parse_UnaryExpression();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = parse___();
            if (result5 !== null) {
              var result6 = parse_MultiplicativeOperator();
              if (result6 !== null) {
                var result7 = parse___();
                if (result7 !== null) {
                  var result8 = parse_UnaryExpression();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                var result = head;
                for (var i = 0; i < tail.length; i++) {
                  result = {
                    type:     "BinaryExpression",
                    operator: tail[i][1],
                    left:     result,
                    right:    tail[i][3]
                  };
                }
                return result;
              })(result1[0], result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_MultiplicativeOperator() {
        var cacheKey = "MultiplicativeOperator" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 1) === "*") {
          var result7 = "*";
          pos += 1;
        } else {
          var result7 = null;
          if (reportMatchFailures) {
            matchFailed("\"*\"");
          }
        }
        if (result7 !== null) {
          var result2 = result7;
        } else {
          if (input.substr(pos, 1) === "/") {
            var result6 = "/";
            pos += 1;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\"/\"");
            }
          }
          if (result6 !== null) {
            var result2 = result6;
          } else {
            if (input.substr(pos, 1) === "%") {
              var result5 = "%";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"%\"");
              }
            }
            if (result5 !== null) {
              var result2 = result5;
            } else {
              var result2 = null;;
            };
          };
        }
        if (result2 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 1) === "=") {
            var result4 = "=";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"=\"");
            }
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result4 === null) {
            var result3 = '';
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(operator) { return operator; })(result1[0])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_AdditiveExpression() {
        var cacheKey = "AdditiveExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_MultiplicativeExpression();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = parse___();
          if (result5 !== null) {
            var result6 = parse_AdditiveOperator();
            if (result6 !== null) {
              var result7 = parse___();
              if (result7 !== null) {
                var result8 = parse_MultiplicativeExpression();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = parse___();
            if (result5 !== null) {
              var result6 = parse_AdditiveOperator();
              if (result6 !== null) {
                var result7 = parse___();
                if (result7 !== null) {
                  var result8 = parse_MultiplicativeExpression();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                var result = head;
                for (var i = 0; i < tail.length; i++) {
                  result = {
                    type:     "BinaryExpression",
                    operator: tail[i][1],
                    left:     result,
                    right:    tail[i][3]
                  };
                }
                return result;
              })(result1[0], result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_AdditiveOperator() {
        var cacheKey = "AdditiveOperator" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos2 = pos;
        if (input.substr(pos, 1) === "+") {
          var result10 = "+";
          pos += 1;
        } else {
          var result10 = null;
          if (reportMatchFailures) {
            matchFailed("\"+\"");
          }
        }
        if (result10 !== null) {
          var savedPos3 = pos;
          var savedReportMatchFailuresVar1 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 1) === "+") {
            var result14 = "+";
            pos += 1;
          } else {
            var result14 = null;
            if (reportMatchFailures) {
              matchFailed("\"+\"");
            }
          }
          if (result14 !== null) {
            var result12 = result14;
          } else {
            if (input.substr(pos, 1) === "=") {
              var result13 = "=";
              pos += 1;
            } else {
              var result13 = null;
              if (reportMatchFailures) {
                matchFailed("\"=\"");
              }
            }
            if (result13 !== null) {
              var result12 = result13;
            } else {
              var result12 = null;;
            };
          }
          reportMatchFailures = savedReportMatchFailuresVar1;
          if (result12 === null) {
            var result11 = '';
          } else {
            var result11 = null;
            pos = savedPos3;
          }
          if (result11 !== null) {
            var result9 = [result10, result11];
          } else {
            var result9 = null;
            pos = savedPos2;
          }
        } else {
          var result9 = null;
          pos = savedPos2;
        }
        var result8 = result9 !== null
          ? (function() { return "+"; })()
          : null;
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === "-") {
            var result3 = "-";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"-\"");
            }
          }
          if (result3 !== null) {
            var savedPos1 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            if (input.substr(pos, 1) === "-") {
              var result7 = "-";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"-\"");
              }
            }
            if (result7 !== null) {
              var result5 = result7;
            } else {
              if (input.substr(pos, 1) === "=") {
                var result6 = "=";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"=\"");
                }
              }
              if (result6 !== null) {
                var result5 = result6;
              } else {
                var result5 = null;;
              };
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result5 === null) {
              var result4 = '';
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            if (result4 !== null) {
              var result2 = [result3, result4];
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function() { return "-"; })()
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ShiftExpression() {
        var cacheKey = "ShiftExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_AdditiveExpression();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = parse___();
          if (result5 !== null) {
            var result6 = parse_ShiftOperator();
            if (result6 !== null) {
              var result7 = parse___();
              if (result7 !== null) {
                var result8 = parse_AdditiveExpression();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = parse___();
            if (result5 !== null) {
              var result6 = parse_ShiftOperator();
              if (result6 !== null) {
                var result7 = parse___();
                if (result7 !== null) {
                  var result8 = parse_AdditiveExpression();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                var result = head;
                for (var i = 0; i < tail.length; i++) {
                  result = {
                    type:     "BinaryExpression",
                    operator: tail[i][1],
                    left:     result,
                    right:    tail[i][3]
                  };
                }
                return result;
              })(result1[0], result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ShiftOperator() {
        var cacheKey = "ShiftOperator" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos, 2) === "<<") {
          var result3 = "<<";
          pos += 2;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"<<\"");
          }
        }
        if (result3 !== null) {
          var result0 = result3;
        } else {
          if (input.substr(pos, 3) === ">>>") {
            var result2 = ">>>";
            pos += 3;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\">>>\"");
            }
          }
          if (result2 !== null) {
            var result0 = result2;
          } else {
            if (input.substr(pos, 2) === ">>") {
              var result1 = ">>";
              pos += 2;
            } else {
              var result1 = null;
              if (reportMatchFailures) {
                matchFailed("\">>\"");
              }
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_RelationalExpression() {
        var cacheKey = "RelationalExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_ShiftExpression();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = parse___();
          if (result5 !== null) {
            var result6 = parse_RelationalOperator();
            if (result6 !== null) {
              var result7 = parse___();
              if (result7 !== null) {
                var result8 = parse_ShiftExpression();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = parse___();
            if (result5 !== null) {
              var result6 = parse_RelationalOperator();
              if (result6 !== null) {
                var result7 = parse___();
                if (result7 !== null) {
                  var result8 = parse_ShiftExpression();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                var result = head;
                for (var i = 0; i < tail.length; i++) {
                  result = {
                    type:     "BinaryExpression",
                    operator: tail[i][1],
                    left:     result,
                    right:    tail[i][3]
                  };
                }
                return result;
              })(result1[0], result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_RelationalOperator() {
        var cacheKey = "RelationalOperator" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos, 2) === "<=") {
          var result6 = "<=";
          pos += 2;
        } else {
          var result6 = null;
          if (reportMatchFailures) {
            matchFailed("\"<=\"");
          }
        }
        if (result6 !== null) {
          var result0 = result6;
        } else {
          if (input.substr(pos, 2) === ">=") {
            var result5 = ">=";
            pos += 2;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("\">=\"");
            }
          }
          if (result5 !== null) {
            var result0 = result5;
          } else {
            if (input.substr(pos, 1) === "<") {
              var result4 = "<";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"<\"");
              }
            }
            if (result4 !== null) {
              var result0 = result4;
            } else {
              if (input.substr(pos, 1) === ">") {
                var result3 = ">";
                pos += 1;
              } else {
                var result3 = null;
                if (reportMatchFailures) {
                  matchFailed("\">\"");
                }
              }
              if (result3 !== null) {
                var result0 = result3;
              } else {
                var result2 = parse_InstanceofToken();
                if (result2 !== null) {
                  var result0 = result2;
                } else {
                  var result1 = parse_InToken();
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_RelationalExpressionNoIn() {
        var cacheKey = "RelationalExpressionNoIn" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_ShiftExpression();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = parse___();
          if (result5 !== null) {
            var result6 = parse_RelationalOperatorNoIn();
            if (result6 !== null) {
              var result7 = parse___();
              if (result7 !== null) {
                var result8 = parse_ShiftExpression();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = parse___();
            if (result5 !== null) {
              var result6 = parse_RelationalOperatorNoIn();
              if (result6 !== null) {
                var result7 = parse___();
                if (result7 !== null) {
                  var result8 = parse_ShiftExpression();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                var result = head;
                for (var i = 0; i < tail.length; i++) {
                  result = {
                    type:     "BinaryExpression",
                    operator: tail[i][1],
                    left:     result,
                    right:    tail[i][3]
                  };
                }
                return result;
              })(result1[0], result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_RelationalOperatorNoIn() {
        var cacheKey = "RelationalOperatorNoIn" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos, 2) === "<=") {
          var result5 = "<=";
          pos += 2;
        } else {
          var result5 = null;
          if (reportMatchFailures) {
            matchFailed("\"<=\"");
          }
        }
        if (result5 !== null) {
          var result0 = result5;
        } else {
          if (input.substr(pos, 2) === ">=") {
            var result4 = ">=";
            pos += 2;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\">=\"");
            }
          }
          if (result4 !== null) {
            var result0 = result4;
          } else {
            if (input.substr(pos, 1) === "<") {
              var result3 = "<";
              pos += 1;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("\"<\"");
              }
            }
            if (result3 !== null) {
              var result0 = result3;
            } else {
              if (input.substr(pos, 1) === ">") {
                var result2 = ">";
                pos += 1;
              } else {
                var result2 = null;
                if (reportMatchFailures) {
                  matchFailed("\">\"");
                }
              }
              if (result2 !== null) {
                var result0 = result2;
              } else {
                var result1 = parse_InstanceofToken();
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_EqualityExpression() {
        var cacheKey = "EqualityExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_RelationalExpression();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = parse___();
          if (result5 !== null) {
            var result6 = parse_EqualityOperator();
            if (result6 !== null) {
              var result7 = parse___();
              if (result7 !== null) {
                var result8 = parse_RelationalExpression();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = parse___();
            if (result5 !== null) {
              var result6 = parse_EqualityOperator();
              if (result6 !== null) {
                var result7 = parse___();
                if (result7 !== null) {
                  var result8 = parse_RelationalExpression();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                var result = head;
                for (var i = 0; i < tail.length; i++) {
                  result = {
                    type:     "BinaryExpression",
                    operator: tail[i][1],
                    left:     result,
                    right:    tail[i][3]
                  };
                }
                return result;
              })(result1[0], result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_EqualityExpressionNoIn() {
        var cacheKey = "EqualityExpressionNoIn" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_RelationalExpressionNoIn();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = parse___();
          if (result5 !== null) {
            var result6 = parse_EqualityOperator();
            if (result6 !== null) {
              var result7 = parse___();
              if (result7 !== null) {
                var result8 = parse_RelationalExpressionNoIn();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = parse___();
            if (result5 !== null) {
              var result6 = parse_EqualityOperator();
              if (result6 !== null) {
                var result7 = parse___();
                if (result7 !== null) {
                  var result8 = parse_RelationalExpressionNoIn();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                var result = head;
                for (var i = 0; i < tail.length; i++) {
                  result = {
                    type:     "BinaryExpression",
                    operator: tail[i][1],
                    left:     result,
                    right:    tail[i][3]
                  };
                }
                return result;
              })(result1[0], result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_EqualityOperator() {
        var cacheKey = "EqualityOperator" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos, 3) === "===") {
          var result4 = "===";
          pos += 3;
        } else {
          var result4 = null;
          if (reportMatchFailures) {
            matchFailed("\"===\"");
          }
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          if (input.substr(pos, 3) === "!==") {
            var result3 = "!==";
            pos += 3;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"!==\"");
            }
          }
          if (result3 !== null) {
            var result0 = result3;
          } else {
            if (input.substr(pos, 2) === "==") {
              var result2 = "==";
              pos += 2;
            } else {
              var result2 = null;
              if (reportMatchFailures) {
                matchFailed("\"==\"");
              }
            }
            if (result2 !== null) {
              var result0 = result2;
            } else {
              if (input.substr(pos, 2) === "!=") {
                var result1 = "!=";
                pos += 2;
              } else {
                var result1 = null;
                if (reportMatchFailures) {
                  matchFailed("\"!=\"");
                }
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_BitwiseANDExpression() {
        var cacheKey = "BitwiseANDExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_EqualityExpression();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = parse___();
          if (result5 !== null) {
            var result6 = parse_BitwiseANDOperator();
            if (result6 !== null) {
              var result7 = parse___();
              if (result7 !== null) {
                var result8 = parse_EqualityExpression();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = parse___();
            if (result5 !== null) {
              var result6 = parse_BitwiseANDOperator();
              if (result6 !== null) {
                var result7 = parse___();
                if (result7 !== null) {
                  var result8 = parse_EqualityExpression();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                var result = head;
                for (var i = 0; i < tail.length; i++) {
                  result = {
                    type:     "BinaryExpression",
                    operator: tail[i][1],
                    left:     result,
                    right:    tail[i][3]
                  };
                }
                return result;
              })(result1[0], result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_BitwiseANDExpressionNoIn() {
        var cacheKey = "BitwiseANDExpressionNoIn" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_EqualityExpressionNoIn();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = parse___();
          if (result5 !== null) {
            var result6 = parse_BitwiseANDOperator();
            if (result6 !== null) {
              var result7 = parse___();
              if (result7 !== null) {
                var result8 = parse_EqualityExpressionNoIn();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = parse___();
            if (result5 !== null) {
              var result6 = parse_BitwiseANDOperator();
              if (result6 !== null) {
                var result7 = parse___();
                if (result7 !== null) {
                  var result8 = parse_EqualityExpressionNoIn();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                var result = head;
                for (var i = 0; i < tail.length; i++) {
                  result = {
                    type:     "BinaryExpression",
                    operator: tail[i][1],
                    left:     result,
                    right:    tail[i][3]
                  };
                }
                return result;
              })(result1[0], result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_BitwiseANDOperator() {
        var cacheKey = "BitwiseANDOperator" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 1) === "&") {
          var result2 = "&";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"&\"");
          }
        }
        if (result2 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 1) === "&") {
            var result6 = "&";
            pos += 1;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\"&\"");
            }
          }
          if (result6 !== null) {
            var result4 = result6;
          } else {
            if (input.substr(pos, 1) === "=") {
              var result5 = "=";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"=\"");
              }
            }
            if (result5 !== null) {
              var result4 = result5;
            } else {
              var result4 = null;;
            };
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result4 === null) {
            var result3 = '';
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() { return "&"; })()
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_BitwiseXORExpression() {
        var cacheKey = "BitwiseXORExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_BitwiseANDExpression();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = parse___();
          if (result5 !== null) {
            var result6 = parse_BitwiseXOROperator();
            if (result6 !== null) {
              var result7 = parse___();
              if (result7 !== null) {
                var result8 = parse_BitwiseANDExpression();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = parse___();
            if (result5 !== null) {
              var result6 = parse_BitwiseXOROperator();
              if (result6 !== null) {
                var result7 = parse___();
                if (result7 !== null) {
                  var result8 = parse_BitwiseANDExpression();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                var result = head;
                for (var i = 0; i < tail.length; i++) {
                  result = {
                    type:     "BinaryExpression",
                    operator: tail[i][1],
                    left:     result,
                    right:    tail[i][3]
                  };
                }
                return result;
              })(result1[0], result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_BitwiseXORExpressionNoIn() {
        var cacheKey = "BitwiseXORExpressionNoIn" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_BitwiseANDExpressionNoIn();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = parse___();
          if (result5 !== null) {
            var result6 = parse_BitwiseXOROperator();
            if (result6 !== null) {
              var result7 = parse___();
              if (result7 !== null) {
                var result8 = parse_BitwiseANDExpressionNoIn();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = parse___();
            if (result5 !== null) {
              var result6 = parse_BitwiseXOROperator();
              if (result6 !== null) {
                var result7 = parse___();
                if (result7 !== null) {
                  var result8 = parse_BitwiseANDExpressionNoIn();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                var result = head;
                for (var i = 0; i < tail.length; i++) {
                  result = {
                    type:     "BinaryExpression",
                    operator: tail[i][1],
                    left:     result,
                    right:    tail[i][3]
                  };
                }
                return result;
              })(result1[0], result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_BitwiseXOROperator() {
        var cacheKey = "BitwiseXOROperator" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 1) === "^") {
          var result2 = "^";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"^\"");
          }
        }
        if (result2 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 1) === "^") {
            var result6 = "^";
            pos += 1;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\"^\"");
            }
          }
          if (result6 !== null) {
            var result4 = result6;
          } else {
            if (input.substr(pos, 1) === "=") {
              var result5 = "=";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"=\"");
              }
            }
            if (result5 !== null) {
              var result4 = result5;
            } else {
              var result4 = null;;
            };
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result4 === null) {
            var result3 = '';
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() { return "^"; })()
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_BitwiseORExpression() {
        var cacheKey = "BitwiseORExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_BitwiseXORExpression();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = parse___();
          if (result5 !== null) {
            var result6 = parse_BitwiseOROperator();
            if (result6 !== null) {
              var result7 = parse___();
              if (result7 !== null) {
                var result8 = parse_BitwiseXORExpression();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = parse___();
            if (result5 !== null) {
              var result6 = parse_BitwiseOROperator();
              if (result6 !== null) {
                var result7 = parse___();
                if (result7 !== null) {
                  var result8 = parse_BitwiseXORExpression();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                var result = head;
                for (var i = 0; i < tail.length; i++) {
                  result = {
                    type:     "BinaryExpression",
                    operator: tail[i][1],
                    left:     result,
                    right:    tail[i][3]
                  };
                }
                return result;
              })(result1[0], result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_BitwiseORExpressionNoIn() {
        var cacheKey = "BitwiseORExpressionNoIn" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_BitwiseXORExpressionNoIn();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = parse___();
          if (result5 !== null) {
            var result6 = parse_BitwiseOROperator();
            if (result6 !== null) {
              var result7 = parse___();
              if (result7 !== null) {
                var result8 = parse_BitwiseXORExpressionNoIn();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = parse___();
            if (result5 !== null) {
              var result6 = parse_BitwiseOROperator();
              if (result6 !== null) {
                var result7 = parse___();
                if (result7 !== null) {
                  var result8 = parse_BitwiseXORExpressionNoIn();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                var result = head;
                for (var i = 0; i < tail.length; i++) {
                  result = {
                    type:     "BinaryExpression",
                    operator: tail[i][1],
                    left:     result,
                    right:    tail[i][3]
                  };
                }
                return result;
              })(result1[0], result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_BitwiseOROperator() {
        var cacheKey = "BitwiseOROperator" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 1) === "|") {
          var result2 = "|";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"|\"");
          }
        }
        if (result2 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 1) === "|") {
            var result6 = "|";
            pos += 1;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\"|\"");
            }
          }
          if (result6 !== null) {
            var result4 = result6;
          } else {
            if (input.substr(pos, 1) === "=") {
              var result5 = "=";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"=\"");
              }
            }
            if (result5 !== null) {
              var result4 = result5;
            } else {
              var result4 = null;;
            };
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result4 === null) {
            var result3 = '';
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() { return "|"; })()
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_LogicalANDExpression() {
        var cacheKey = "LogicalANDExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_BitwiseORExpression();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = parse___();
          if (result5 !== null) {
            var result6 = parse_LogicalANDOperator();
            if (result6 !== null) {
              var result7 = parse___();
              if (result7 !== null) {
                var result8 = parse_BitwiseORExpression();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = parse___();
            if (result5 !== null) {
              var result6 = parse_LogicalANDOperator();
              if (result6 !== null) {
                var result7 = parse___();
                if (result7 !== null) {
                  var result8 = parse_BitwiseORExpression();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                var result = head;
                for (var i = 0; i < tail.length; i++) {
                  result = {
                    type:     "BinaryExpression",
                    operator: tail[i][1],
                    left:     result,
                    right:    tail[i][3]
                  };
                }
                return result;
              })(result1[0], result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_LogicalANDExpressionNoIn() {
        var cacheKey = "LogicalANDExpressionNoIn" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_BitwiseORExpressionNoIn();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = parse___();
          if (result5 !== null) {
            var result6 = parse_LogicalANDOperator();
            if (result6 !== null) {
              var result7 = parse___();
              if (result7 !== null) {
                var result8 = parse_BitwiseORExpressionNoIn();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = parse___();
            if (result5 !== null) {
              var result6 = parse_LogicalANDOperator();
              if (result6 !== null) {
                var result7 = parse___();
                if (result7 !== null) {
                  var result8 = parse_BitwiseORExpressionNoIn();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                var result = head;
                for (var i = 0; i < tail.length; i++) {
                  result = {
                    type:     "BinaryExpression",
                    operator: tail[i][1],
                    left:     result,
                    right:    tail[i][3]
                  };
                }
                return result;
              })(result1[0], result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_LogicalANDOperator() {
        var cacheKey = "LogicalANDOperator" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 2) === "&&") {
          var result2 = "&&";
          pos += 2;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"&&\"");
          }
        }
        if (result2 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 1) === "=") {
            var result4 = "=";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"=\"");
            }
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result4 === null) {
            var result3 = '';
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() { return "&&"; })()
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_LogicalORExpression() {
        var cacheKey = "LogicalORExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_LogicalANDExpression();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = parse___();
          if (result5 !== null) {
            var result6 = parse_LogicalOROperator();
            if (result6 !== null) {
              var result7 = parse___();
              if (result7 !== null) {
                var result8 = parse_LogicalANDExpression();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = parse___();
            if (result5 !== null) {
              var result6 = parse_LogicalOROperator();
              if (result6 !== null) {
                var result7 = parse___();
                if (result7 !== null) {
                  var result8 = parse_LogicalANDExpression();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                var result = head;
                for (var i = 0; i < tail.length; i++) {
                  result = {
                    type:     "BinaryExpression",
                    operator: tail[i][1],
                    left:     result,
                    right:    tail[i][3]
                  };
                }
                return result;
              })(result1[0], result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_LogicalORExpressionNoIn() {
        var cacheKey = "LogicalORExpressionNoIn" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_LogicalANDExpressionNoIn();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = parse___();
          if (result5 !== null) {
            var result6 = parse_LogicalOROperator();
            if (result6 !== null) {
              var result7 = parse___();
              if (result7 !== null) {
                var result8 = parse_LogicalANDExpressionNoIn();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = parse___();
            if (result5 !== null) {
              var result6 = parse_LogicalOROperator();
              if (result6 !== null) {
                var result7 = parse___();
                if (result7 !== null) {
                  var result8 = parse_LogicalANDExpressionNoIn();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                var result = head;
                for (var i = 0; i < tail.length; i++) {
                  result = {
                    type:     "BinaryExpression",
                    operator: tail[i][1],
                    left:     result,
                    right:    tail[i][3]
                  };
                }
                return result;
              })(result1[0], result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_LogicalOROperator() {
        var cacheKey = "LogicalOROperator" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 2) === "||") {
          var result2 = "||";
          pos += 2;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"||\"");
          }
        }
        if (result2 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 1) === "=") {
            var result4 = "=";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"=\"");
            }
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result4 === null) {
            var result3 = '';
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() { return "||"; })()
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ConditionalExpression() {
        var cacheKey = "ConditionalExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result4 = parse_LogicalORExpression();
        if (result4 !== null) {
          var result5 = parse___();
          if (result5 !== null) {
            if (input.substr(pos, 1) === "?") {
              var result6 = "?";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\"?\"");
              }
            }
            if (result6 !== null) {
              var result7 = parse___();
              if (result7 !== null) {
                var result8 = parse_AssignmentExpression();
                if (result8 !== null) {
                  var result9 = parse___();
                  if (result9 !== null) {
                    if (input.substr(pos, 1) === ":") {
                      var result10 = ":";
                      pos += 1;
                    } else {
                      var result10 = null;
                      if (reportMatchFailures) {
                        matchFailed("\":\"");
                      }
                    }
                    if (result10 !== null) {
                      var result11 = parse___();
                      if (result11 !== null) {
                        var result12 = parse_AssignmentExpression();
                        if (result12 !== null) {
                          var result3 = [result4, result5, result6, result7, result8, result9, result10, result11, result12];
                        } else {
                          var result3 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result3 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result3 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result3 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result3 = null;
                  pos = savedPos0;
                }
              } else {
                var result3 = null;
                pos = savedPos0;
              }
            } else {
              var result3 = null;
              pos = savedPos0;
            }
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        var result2 = result3 !== null
          ? (function(condition, trueExpression, falseExpression) {
                return {
                  type:            "ConditionalExpression",
                  condition:       condition,
                  trueExpression:  trueExpression,
                  falseExpression: falseExpression
                };
              })(result3[0], result3[4], result3[8])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_LogicalORExpression();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ConditionalExpressionNoIn() {
        var cacheKey = "ConditionalExpressionNoIn" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result4 = parse_LogicalORExpressionNoIn();
        if (result4 !== null) {
          var result5 = parse___();
          if (result5 !== null) {
            if (input.substr(pos, 1) === "?") {
              var result6 = "?";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\"?\"");
              }
            }
            if (result6 !== null) {
              var result7 = parse___();
              if (result7 !== null) {
                var result8 = parse_AssignmentExpressionNoIn();
                if (result8 !== null) {
                  var result9 = parse___();
                  if (result9 !== null) {
                    if (input.substr(pos, 1) === ":") {
                      var result10 = ":";
                      pos += 1;
                    } else {
                      var result10 = null;
                      if (reportMatchFailures) {
                        matchFailed("\":\"");
                      }
                    }
                    if (result10 !== null) {
                      var result11 = parse___();
                      if (result11 !== null) {
                        var result12 = parse_AssignmentExpressionNoIn();
                        if (result12 !== null) {
                          var result3 = [result4, result5, result6, result7, result8, result9, result10, result11, result12];
                        } else {
                          var result3 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result3 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result3 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result3 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result3 = null;
                  pos = savedPos0;
                }
              } else {
                var result3 = null;
                pos = savedPos0;
              }
            } else {
              var result3 = null;
              pos = savedPos0;
            }
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        var result2 = result3 !== null
          ? (function(condition, trueExpression, falseExpression) {
                return {
                  type:            "ConditionalExpression",
                  condition:       condition,
                  trueExpression:  trueExpression,
                  falseExpression: falseExpression
                };
              })(result3[0], result3[4], result3[8])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_LogicalORExpressionNoIn();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_AssignmentExpression() {
        var cacheKey = "AssignmentExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result4 = parse_LeftHandSideExpression();
        if (result4 !== null) {
          var result5 = parse___();
          if (result5 !== null) {
            var result6 = parse_AssignmentOperator();
            if (result6 !== null) {
              var result7 = parse___();
              if (result7 !== null) {
                var result8 = parse_AssignmentExpression();
                if (result8 !== null) {
                  var result3 = [result4, result5, result6, result7, result8];
                } else {
                  var result3 = null;
                  pos = savedPos0;
                }
              } else {
                var result3 = null;
                pos = savedPos0;
              }
            } else {
              var result3 = null;
              pos = savedPos0;
            }
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        var result2 = result3 !== null
          ? (function(left, operator, right) {
                return {
                  type:     "AssignmentExpression",
                  operator: operator,
                  left:     left,
                  right:    right
                };
              })(result3[0], result3[2], result3[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_ConditionalExpression();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_AssignmentExpressionNoIn() {
        var cacheKey = "AssignmentExpressionNoIn" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result4 = parse_LeftHandSideExpression();
        if (result4 !== null) {
          var result5 = parse___();
          if (result5 !== null) {
            var result6 = parse_AssignmentOperator();
            if (result6 !== null) {
              var result7 = parse___();
              if (result7 !== null) {
                var result8 = parse_AssignmentExpressionNoIn();
                if (result8 !== null) {
                  var result3 = [result4, result5, result6, result7, result8];
                } else {
                  var result3 = null;
                  pos = savedPos0;
                }
              } else {
                var result3 = null;
                pos = savedPos0;
              }
            } else {
              var result3 = null;
              pos = savedPos0;
            }
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        var result2 = result3 !== null
          ? (function(left, operator, right) {
                return {
                  type:     "AssignmentExpression",
                  operator: operator,
                  left:     left,
                  right:    right
                };
              })(result3[0], result3[2], result3[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_ConditionalExpressionNoIn();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_AssignmentOperator() {
        var cacheKey = "AssignmentOperator" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 1) === "=") {
          var result14 = "=";
          pos += 1;
        } else {
          var result14 = null;
          if (reportMatchFailures) {
            matchFailed("\"=\"");
          }
        }
        if (result14 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 1) === "=") {
            var result16 = "=";
            pos += 1;
          } else {
            var result16 = null;
            if (reportMatchFailures) {
              matchFailed("\"=\"");
            }
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result16 === null) {
            var result15 = '';
          } else {
            var result15 = null;
            pos = savedPos1;
          }
          if (result15 !== null) {
            var result13 = [result14, result15];
          } else {
            var result13 = null;
            pos = savedPos0;
          }
        } else {
          var result13 = null;
          pos = savedPos0;
        }
        var result12 = result13 !== null
          ? (function() { return "="; })()
          : null;
        if (result12 !== null) {
          var result0 = result12;
        } else {
          if (input.substr(pos, 2) === "*=") {
            var result11 = "*=";
            pos += 2;
          } else {
            var result11 = null;
            if (reportMatchFailures) {
              matchFailed("\"*=\"");
            }
          }
          if (result11 !== null) {
            var result0 = result11;
          } else {
            if (input.substr(pos, 2) === "/=") {
              var result10 = "/=";
              pos += 2;
            } else {
              var result10 = null;
              if (reportMatchFailures) {
                matchFailed("\"/=\"");
              }
            }
            if (result10 !== null) {
              var result0 = result10;
            } else {
              if (input.substr(pos, 2) === "%=") {
                var result9 = "%=";
                pos += 2;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("\"%=\"");
                }
              }
              if (result9 !== null) {
                var result0 = result9;
              } else {
                if (input.substr(pos, 2) === "+=") {
                  var result8 = "+=";
                  pos += 2;
                } else {
                  var result8 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"+=\"");
                  }
                }
                if (result8 !== null) {
                  var result0 = result8;
                } else {
                  if (input.substr(pos, 2) === "-=") {
                    var result7 = "-=";
                    pos += 2;
                  } else {
                    var result7 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"-=\"");
                    }
                  }
                  if (result7 !== null) {
                    var result0 = result7;
                  } else {
                    if (input.substr(pos, 3) === "<<=") {
                      var result6 = "<<=";
                      pos += 3;
                    } else {
                      var result6 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"<<=\"");
                      }
                    }
                    if (result6 !== null) {
                      var result0 = result6;
                    } else {
                      if (input.substr(pos, 3) === ">>=") {
                        var result5 = ">>=";
                        pos += 3;
                      } else {
                        var result5 = null;
                        if (reportMatchFailures) {
                          matchFailed("\">>=\"");
                        }
                      }
                      if (result5 !== null) {
                        var result0 = result5;
                      } else {
                        if (input.substr(pos, 4) === ">>>=") {
                          var result4 = ">>>=";
                          pos += 4;
                        } else {
                          var result4 = null;
                          if (reportMatchFailures) {
                            matchFailed("\">>>=\"");
                          }
                        }
                        if (result4 !== null) {
                          var result0 = result4;
                        } else {
                          if (input.substr(pos, 2) === "&=") {
                            var result3 = "&=";
                            pos += 2;
                          } else {
                            var result3 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"&=\"");
                            }
                          }
                          if (result3 !== null) {
                            var result0 = result3;
                          } else {
                            if (input.substr(pos, 2) === "^=") {
                              var result2 = "^=";
                              pos += 2;
                            } else {
                              var result2 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"^=\"");
                              }
                            }
                            if (result2 !== null) {
                              var result0 = result2;
                            } else {
                              if (input.substr(pos, 2) === "|=") {
                                var result1 = "|=";
                                pos += 2;
                              } else {
                                var result1 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"|=\"");
                                }
                              }
                              if (result1 !== null) {
                                var result0 = result1;
                              } else {
                                var result0 = null;;
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Expression() {
        var cacheKey = "Expression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_AssignmentExpression();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = parse___();
          if (result5 !== null) {
            if (input.substr(pos, 1) === ",") {
              var result6 = ",";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\",\"");
              }
            }
            if (result6 !== null) {
              var result7 = parse___();
              if (result7 !== null) {
                var result8 = parse_AssignmentExpression();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = parse___();
            if (result5 !== null) {
              if (input.substr(pos, 1) === ",") {
                var result6 = ",";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result6 !== null) {
                var result7 = parse___();
                if (result7 !== null) {
                  var result8 = parse_AssignmentExpression();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                var result = head;
                for (var i = 0; i < tail.length; i++) {
                  result = {
                    type:     "BinaryExpression",
                    operator: tail[i][1],
                    left:     result,
                    right:    tail[i][3]
                  };
                }
                return result;
              })(result1[0], result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ExpressionNoIn() {
        var cacheKey = "ExpressionNoIn" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_AssignmentExpressionNoIn();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = parse___();
          if (result5 !== null) {
            if (input.substr(pos, 1) === ",") {
              var result6 = ",";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\",\"");
              }
            }
            if (result6 !== null) {
              var result7 = parse___();
              if (result7 !== null) {
                var result8 = parse_AssignmentExpressionNoIn();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = parse___();
            if (result5 !== null) {
              if (input.substr(pos, 1) === ",") {
                var result6 = ",";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result6 !== null) {
                var result7 = parse___();
                if (result7 !== null) {
                  var result8 = parse_AssignmentExpressionNoIn();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                var result = head;
                for (var i = 0; i < tail.length; i++) {
                  result = {
                    type:     "BinaryExpression",
                    operator: tail[i][1],
                    left:     result,
                    right:    tail[i][3]
                  };
                }
                return result;
              })(result1[0], result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Statement() {
        var cacheKey = "Statement" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result17 = parse_Block();
        if (result17 !== null) {
          var result0 = result17;
        } else {
          var result16 = parse_VariableStatement();
          if (result16 !== null) {
            var result0 = result16;
          } else {
            var result15 = parse_EmptyStatement();
            if (result15 !== null) {
              var result0 = result15;
            } else {
              var result14 = parse_ExpressionStatement();
              if (result14 !== null) {
                var result0 = result14;
              } else {
                var result13 = parse_IfStatement();
                if (result13 !== null) {
                  var result0 = result13;
                } else {
                  var result12 = parse_IterationStatement();
                  if (result12 !== null) {
                    var result0 = result12;
                  } else {
                    var result11 = parse_ContinueStatement();
                    if (result11 !== null) {
                      var result0 = result11;
                    } else {
                      var result10 = parse_BreakStatement();
                      if (result10 !== null) {
                        var result0 = result10;
                      } else {
                        var result9 = parse_ReturnStatement();
                        if (result9 !== null) {
                          var result0 = result9;
                        } else {
                          var result8 = parse_WithStatement();
                          if (result8 !== null) {
                            var result0 = result8;
                          } else {
                            var result7 = parse_LabelledStatement();
                            if (result7 !== null) {
                              var result0 = result7;
                            } else {
                              var result6 = parse_SwitchStatement();
                              if (result6 !== null) {
                                var result0 = result6;
                              } else {
                                var result5 = parse_ThrowStatement();
                                if (result5 !== null) {
                                  var result0 = result5;
                                } else {
                                  var result4 = parse_TryStatement();
                                  if (result4 !== null) {
                                    var result0 = result4;
                                  } else {
                                    var result3 = parse_DebuggerStatement();
                                    if (result3 !== null) {
                                      var result0 = result3;
                                    } else {
                                      var result2 = parse_FunctionDeclaration();
                                      if (result2 !== null) {
                                        var result0 = result2;
                                      } else {
                                        var result1 = parse_FunctionExpression();
                                        if (result1 !== null) {
                                          var result0 = result1;
                                        } else {
                                          var result0 = null;;
                                        };
                                      };
                                    };
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Block() {
        var cacheKey = "Block" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 1) === "{") {
          var result2 = "{";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"{\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse___();
          if (result3 !== null) {
            var savedPos1 = pos;
            var result7 = parse_StatementList();
            if (result7 !== null) {
              var result8 = parse___();
              if (result8 !== null) {
                var result6 = [result7, result8];
              } else {
                var result6 = null;
                pos = savedPos1;
              }
            } else {
              var result6 = null;
              pos = savedPos1;
            }
            var result4 = result6 !== null ? result6 : '';
            if (result4 !== null) {
              if (input.substr(pos, 1) === "}") {
                var result5 = "}";
                pos += 1;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("\"}\"");
                }
              }
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(statements) {
                return {
                  type:       "Block",
                  statements: statements !== "" ? statements[0] : []
                };
              })(result1[2])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_StatementList() {
        var cacheKey = "StatementList" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_Statement();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = parse___();
          if (result5 !== null) {
            var result6 = parse_Statement();
            if (result6 !== null) {
              var result4 = [result5, result6];
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = parse___();
            if (result5 !== null) {
              var result6 = parse_Statement();
              if (result6 !== null) {
                var result4 = [result5, result6];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                var result = [head];
                for (var i = 0; i < tail.length; i++) {
                  result.push(tail[i][1]);
                }
                return result;
              })(result1[0], result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_VariableStatement() {
        var cacheKey = "VariableStatement" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_VarToken();
        if (result2 !== null) {
          var result3 = parse___();
          if (result3 !== null) {
            var result4 = parse_VariableDeclarationList();
            if (result4 !== null) {
              var result5 = parse_EOS();
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(declarations) {
                return {
                  type:         "VariableStatement",
                  declarations: declarations
                };
              })(result1[2])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_VariableDeclarationList() {
        var cacheKey = "VariableDeclarationList" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_VariableDeclaration();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = parse___();
          if (result5 !== null) {
            if (input.substr(pos, 1) === ",") {
              var result6 = ",";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\",\"");
              }
            }
            if (result6 !== null) {
              var result7 = parse___();
              if (result7 !== null) {
                var result8 = parse_VariableDeclaration();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = parse___();
            if (result5 !== null) {
              if (input.substr(pos, 1) === ",") {
                var result6 = ",";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result6 !== null) {
                var result7 = parse___();
                if (result7 !== null) {
                  var result8 = parse_VariableDeclaration();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                var result = [head];
                for (var i = 0; i < tail.length; i++) {
                  result.push(tail[i][3]);
                }
                return result;
              })(result1[0], result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_VariableDeclarationListNoIn() {
        var cacheKey = "VariableDeclarationListNoIn" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_VariableDeclarationNoIn();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = parse___();
          if (result5 !== null) {
            if (input.substr(pos, 1) === ",") {
              var result6 = ",";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\",\"");
              }
            }
            if (result6 !== null) {
              var result7 = parse___();
              if (result7 !== null) {
                var result8 = parse_VariableDeclarationNoIn();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = parse___();
            if (result5 !== null) {
              if (input.substr(pos, 1) === ",") {
                var result6 = ",";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result6 !== null) {
                var result7 = parse___();
                if (result7 !== null) {
                  var result8 = parse_VariableDeclarationNoIn();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                var result = [head];
                for (var i = 0; i < tail.length; i++) {
                  result.push(tail[i][3]);
                }
                return result;
              })(result1[0], result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_VariableDeclaration() {
        var cacheKey = "VariableDeclaration" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_Identifier();
        if (result2 !== null) {
          var result3 = parse___();
          if (result3 !== null) {
            var result5 = parse_Initialiser();
            var result4 = result5 !== null ? result5 : '';
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(name, value) {
                return {
                  type:  "VariableDeclaration",
                  name:  name,
                  value: value !== "" ? value : null
                };
              })(result1[0], result1[2])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_VariableDeclarationNoIn() {
        var cacheKey = "VariableDeclarationNoIn" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_Identifier();
        if (result2 !== null) {
          var result3 = parse___();
          if (result3 !== null) {
            var result5 = parse_InitialiserNoIn();
            var result4 = result5 !== null ? result5 : '';
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(name, value) {
                return {
                  type:  "VariableDeclaration",
                  name:  name,
                  value: value !== "" ? value : null
                };
              })(result1[0], result1[2])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Initialiser() {
        var cacheKey = "Initialiser" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 1) === "=") {
          var result2 = "=";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"=\"");
          }
        }
        if (result2 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 1) === "=") {
            var result6 = "=";
            pos += 1;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\"=\"");
            }
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result6 === null) {
            var result3 = '';
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          if (result3 !== null) {
            var result4 = parse___();
            if (result4 !== null) {
              var result5 = parse_AssignmentExpression();
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(expression) { return expression; })(result1[3])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_InitialiserNoIn() {
        var cacheKey = "InitialiserNoIn" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 1) === "=") {
          var result2 = "=";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"=\"");
          }
        }
        if (result2 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 1) === "=") {
            var result6 = "=";
            pos += 1;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\"=\"");
            }
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result6 === null) {
            var result3 = '';
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          if (result3 !== null) {
            var result4 = parse___();
            if (result4 !== null) {
              var result5 = parse_AssignmentExpressionNoIn();
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(expression) { return expression; })(result1[3])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_EmptyStatement() {
        var cacheKey = "EmptyStatement" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos, 1) === ";") {
          var result1 = ";";
          pos += 1;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\";\"");
          }
        }
        var result0 = result1 !== null
          ? (function() { return { type: "EmptyStatement" }; })()
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ExpressionStatement() {
        var cacheKey = "ExpressionStatement" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var savedReportMatchFailuresVar0 = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos, 1) === "{") {
          var result7 = "{";
          pos += 1;
        } else {
          var result7 = null;
          if (reportMatchFailures) {
            matchFailed("\"{\"");
          }
        }
        if (result7 !== null) {
          var result5 = result7;
        } else {
          var result6 = parse_FunctionToken();
          if (result6 !== null) {
            var result5 = result6;
          } else {
            var result5 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailuresVar0;
        if (result5 === null) {
          var result2 = '';
        } else {
          var result2 = null;
          pos = savedPos1;
        }
        if (result2 !== null) {
          var result3 = parse_Expression();
          if (result3 !== null) {
            var result4 = parse_EOS();
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(expression) { return expression; })(result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_IfStatement() {
        var cacheKey = "IfStatement" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_IfToken();
        if (result2 !== null) {
          var result3 = parse___();
          if (result3 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result4 = "(";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result4 !== null) {
              var result5 = parse___();
              if (result5 !== null) {
                var result6 = parse_Expression();
                if (result6 !== null) {
                  var result7 = parse___();
                  if (result7 !== null) {
                    if (input.substr(pos, 1) === ")") {
                      var result8 = ")";
                      pos += 1;
                    } else {
                      var result8 = null;
                      if (reportMatchFailures) {
                        matchFailed("\")\"");
                      }
                    }
                    if (result8 !== null) {
                      var result9 = parse___();
                      if (result9 !== null) {
                        var result10 = parse_Statement();
                        if (result10 !== null) {
                          var savedPos1 = pos;
                          var result13 = parse___();
                          if (result13 !== null) {
                            var result14 = parse_ElseToken();
                            if (result14 !== null) {
                              var result15 = parse___();
                              if (result15 !== null) {
                                var result16 = parse_Statement();
                                if (result16 !== null) {
                                  var result12 = [result13, result14, result15, result16];
                                } else {
                                  var result12 = null;
                                  pos = savedPos1;
                                }
                              } else {
                                var result12 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result12 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result12 = null;
                            pos = savedPos1;
                          }
                          var result11 = result12 !== null ? result12 : '';
                          if (result11 !== null) {
                            var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10, result11];
                          } else {
                            var result1 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(condition, ifStatement, elseStatement) {
                return {
                  type:          "IfStatement",
                  condition:     condition,
                  ifStatement:   ifStatement,
                  elseStatement: elseStatement !== "" ? elseStatement[3] : null
                };
              })(result1[4], result1[8], result1[9])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_IterationStatement() {
        var cacheKey = "IterationStatement" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result4 = parse_DoWhileStatement();
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var result3 = parse_WhileStatement();
          if (result3 !== null) {
            var result0 = result3;
          } else {
            var result2 = parse_ForStatement();
            if (result2 !== null) {
              var result0 = result2;
            } else {
              var result1 = parse_ForInStatement();
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_DoWhileStatement() {
        var cacheKey = "DoWhileStatement" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_DoToken();
        if (result2 !== null) {
          var result3 = parse___();
          if (result3 !== null) {
            var result4 = parse_Statement();
            if (result4 !== null) {
              var result5 = parse___();
              if (result5 !== null) {
                var result6 = parse_WhileToken();
                if (result6 !== null) {
                  var result7 = parse___();
                  if (result7 !== null) {
                    if (input.substr(pos, 1) === "(") {
                      var result8 = "(";
                      pos += 1;
                    } else {
                      var result8 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"(\"");
                      }
                    }
                    if (result8 !== null) {
                      var result9 = parse___();
                      if (result9 !== null) {
                        var result10 = parse_Expression();
                        if (result10 !== null) {
                          var result11 = parse___();
                          if (result11 !== null) {
                            if (input.substr(pos, 1) === ")") {
                              var result12 = ")";
                              pos += 1;
                            } else {
                              var result12 = null;
                              if (reportMatchFailures) {
                                matchFailed("\")\"");
                              }
                            }
                            if (result12 !== null) {
                              var result13 = parse_EOS();
                              if (result13 !== null) {
                                var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13];
                              } else {
                                var result1 = null;
                                pos = savedPos0;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos0;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(statement, condition) {
                return {
                  type: "DoWhileStatement",
                  condition: condition,
                  statement: statement
                };
              })(result1[2], result1[8])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_WhileStatement() {
        var cacheKey = "WhileStatement" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_WhileToken();
        if (result2 !== null) {
          var result3 = parse___();
          if (result3 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result4 = "(";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result4 !== null) {
              var result5 = parse___();
              if (result5 !== null) {
                var result6 = parse_Expression();
                if (result6 !== null) {
                  var result7 = parse___();
                  if (result7 !== null) {
                    if (input.substr(pos, 1) === ")") {
                      var result8 = ")";
                      pos += 1;
                    } else {
                      var result8 = null;
                      if (reportMatchFailures) {
                        matchFailed("\")\"");
                      }
                    }
                    if (result8 !== null) {
                      var result9 = parse___();
                      if (result9 !== null) {
                        var result10 = parse_Statement();
                        if (result10 !== null) {
                          var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10];
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(condition, statement) {
                return {
                  type: "WhileStatement",
                  condition: condition,
                  statement: statement
                };
              })(result1[4], result1[8])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ForStatement() {
        var cacheKey = "ForStatement" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_ForToken();
        if (result2 !== null) {
          var result3 = parse___();
          if (result3 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result4 = "(";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result4 !== null) {
              var result5 = parse___();
              if (result5 !== null) {
                var savedPos1 = pos;
                var result25 = parse_VarToken();
                if (result25 !== null) {
                  var result26 = parse___();
                  if (result26 !== null) {
                    var result27 = parse_VariableDeclarationListNoIn();
                    if (result27 !== null) {
                      var result24 = [result25, result26, result27];
                    } else {
                      var result24 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result24 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result24 = null;
                  pos = savedPos1;
                }
                var result23 = result24 !== null
                  ? (function(declarations) {
                            return {
                              type:         "VariableStatement",
                              declarations: declarations
                            };
                          })(result24[2])
                  : null;
                if (result23 !== null) {
                  var result6 = result23;
                } else {
                  var result22 = parse_ExpressionNoIn();
                  var result21 = result22 !== null ? result22 : '';
                  if (result21 !== null) {
                    var result6 = result21;
                  } else {
                    var result6 = null;;
                  };
                }
                if (result6 !== null) {
                  var result7 = parse___();
                  if (result7 !== null) {
                    if (input.substr(pos, 1) === ";") {
                      var result8 = ";";
                      pos += 1;
                    } else {
                      var result8 = null;
                      if (reportMatchFailures) {
                        matchFailed("\";\"");
                      }
                    }
                    if (result8 !== null) {
                      var result9 = parse___();
                      if (result9 !== null) {
                        var result20 = parse_Expression();
                        var result10 = result20 !== null ? result20 : '';
                        if (result10 !== null) {
                          var result11 = parse___();
                          if (result11 !== null) {
                            if (input.substr(pos, 1) === ";") {
                              var result12 = ";";
                              pos += 1;
                            } else {
                              var result12 = null;
                              if (reportMatchFailures) {
                                matchFailed("\";\"");
                              }
                            }
                            if (result12 !== null) {
                              var result13 = parse___();
                              if (result13 !== null) {
                                var result19 = parse_Expression();
                                var result14 = result19 !== null ? result19 : '';
                                if (result14 !== null) {
                                  var result15 = parse___();
                                  if (result15 !== null) {
                                    if (input.substr(pos, 1) === ")") {
                                      var result16 = ")";
                                      pos += 1;
                                    } else {
                                      var result16 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\")\"");
                                      }
                                    }
                                    if (result16 !== null) {
                                      var result17 = parse___();
                                      if (result17 !== null) {
                                        var result18 = parse_Statement();
                                        if (result18 !== null) {
                                          var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18];
                                        } else {
                                          var result1 = null;
                                          pos = savedPos0;
                                        }
                                      } else {
                                        var result1 = null;
                                        pos = savedPos0;
                                      }
                                    } else {
                                      var result1 = null;
                                      pos = savedPos0;
                                    }
                                  } else {
                                    var result1 = null;
                                    pos = savedPos0;
                                  }
                                } else {
                                  var result1 = null;
                                  pos = savedPos0;
                                }
                              } else {
                                var result1 = null;
                                pos = savedPos0;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos0;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(initializer, test, counter, statement) {
                return {
                  type:        "ForStatement",
                  initializer: initializer !== "" ? initializer : null,
                  test:        test !== "" ? test : null,
                  counter:     counter !== "" ? counter : null,
                  statement:   statement
                };
              })(result1[4], result1[8], result1[12], result1[16])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ForInStatement() {
        var cacheKey = "ForInStatement" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_ForToken();
        if (result2 !== null) {
          var result3 = parse___();
          if (result3 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result4 = "(";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result4 !== null) {
              var result5 = parse___();
              if (result5 !== null) {
                var savedPos1 = pos;
                var result18 = parse_VarToken();
                if (result18 !== null) {
                  var result19 = parse___();
                  if (result19 !== null) {
                    var result20 = parse_VariableDeclarationNoIn();
                    if (result20 !== null) {
                      var result17 = [result18, result19, result20];
                    } else {
                      var result17 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result17 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result17 = null;
                  pos = savedPos1;
                }
                var result16 = result17 !== null
                  ? (function(declaration) { return declaration; })(result17[2])
                  : null;
                if (result16 !== null) {
                  var result6 = result16;
                } else {
                  var result15 = parse_LeftHandSideExpression();
                  if (result15 !== null) {
                    var result6 = result15;
                  } else {
                    var result6 = null;;
                  };
                }
                if (result6 !== null) {
                  var result7 = parse___();
                  if (result7 !== null) {
                    var result8 = parse_InToken();
                    if (result8 !== null) {
                      var result9 = parse___();
                      if (result9 !== null) {
                        var result10 = parse_Expression();
                        if (result10 !== null) {
                          var result11 = parse___();
                          if (result11 !== null) {
                            if (input.substr(pos, 1) === ")") {
                              var result12 = ")";
                              pos += 1;
                            } else {
                              var result12 = null;
                              if (reportMatchFailures) {
                                matchFailed("\")\"");
                              }
                            }
                            if (result12 !== null) {
                              var result13 = parse___();
                              if (result13 !== null) {
                                var result14 = parse_Statement();
                                if (result14 !== null) {
                                  var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14];
                                } else {
                                  var result1 = null;
                                  pos = savedPos0;
                                }
                              } else {
                                var result1 = null;
                                pos = savedPos0;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos0;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(iterator, collection, statement) {
                return {
                  type:       "ForInStatement",
                  iterator:   iterator,
                  collection: collection,
                  statement:  statement
                };
              })(result1[4], result1[8], result1[12])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ContinueStatement() {
        var cacheKey = "ContinueStatement" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_ContinueToken();
        if (result2 !== null) {
          var result3 = parse__();
          if (result3 !== null) {
            var savedPos1 = pos;
            var result9 = parse_Identifier();
            if (result9 !== null) {
              var result10 = parse_EOS();
              if (result10 !== null) {
                var result8 = [result9, result10];
              } else {
                var result8 = null;
                pos = savedPos1;
              }
            } else {
              var result8 = null;
              pos = savedPos1;
            }
            var result7 = result8 !== null
              ? (function(identifier) { return identifier; })(result8[0])
              : null;
            if (result7 !== null) {
              var result4 = result7;
            } else {
              var result6 = parse_EOSNoLineTerminator();
              var result5 = result6 !== null
                ? (function() { return "";         })()
                : null;
              if (result5 !== null) {
                var result4 = result5;
              } else {
                var result4 = null;;
              };
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(label) {
                return {
                  type:  "ContinueStatement",
                  label: label !== "" ? label : null
                };
              })(result1[2])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_BreakStatement() {
        var cacheKey = "BreakStatement" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_BreakToken();
        if (result2 !== null) {
          var result3 = parse__();
          if (result3 !== null) {
            var savedPos1 = pos;
            var result9 = parse_Identifier();
            if (result9 !== null) {
              var result10 = parse_EOS();
              if (result10 !== null) {
                var result8 = [result9, result10];
              } else {
                var result8 = null;
                pos = savedPos1;
              }
            } else {
              var result8 = null;
              pos = savedPos1;
            }
            var result7 = result8 !== null
              ? (function(identifier) { return identifier; })(result8[0])
              : null;
            if (result7 !== null) {
              var result4 = result7;
            } else {
              var result6 = parse_EOSNoLineTerminator();
              var result5 = result6 !== null
                ? (function() { return ""; })()
                : null;
              if (result5 !== null) {
                var result4 = result5;
              } else {
                var result4 = null;;
              };
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(label) {
                return {
                  type:  "BreakStatement",
                  label: label !== "" ? label : null
                };
              })(result1[2])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ReturnStatement() {
        var cacheKey = "ReturnStatement" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_ReturnToken();
        if (result2 !== null) {
          var result3 = parse__();
          if (result3 !== null) {
            var savedPos1 = pos;
            var result9 = parse_Expression();
            if (result9 !== null) {
              var result10 = parse_EOS();
              if (result10 !== null) {
                var result8 = [result9, result10];
              } else {
                var result8 = null;
                pos = savedPos1;
              }
            } else {
              var result8 = null;
              pos = savedPos1;
            }
            var result7 = result8 !== null
              ? (function(expression) { return expression; })(result8[0])
              : null;
            if (result7 !== null) {
              var result4 = result7;
            } else {
              var result6 = parse_EOSNoLineTerminator();
              var result5 = result6 !== null
                ? (function() { return ""; })()
                : null;
              if (result5 !== null) {
                var result4 = result5;
              } else {
                var result4 = null;;
              };
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(value) {
                return {
                  type:  "ReturnStatement",
                  value: value !== "" ? value : null
                };
              })(result1[2])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_WithStatement() {
        var cacheKey = "WithStatement" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_WithToken();
        if (result2 !== null) {
          var result3 = parse___();
          if (result3 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result4 = "(";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result4 !== null) {
              var result5 = parse___();
              if (result5 !== null) {
                var result6 = parse_Expression();
                if (result6 !== null) {
                  var result7 = parse___();
                  if (result7 !== null) {
                    if (input.substr(pos, 1) === ")") {
                      var result8 = ")";
                      pos += 1;
                    } else {
                      var result8 = null;
                      if (reportMatchFailures) {
                        matchFailed("\")\"");
                      }
                    }
                    if (result8 !== null) {
                      var result9 = parse___();
                      if (result9 !== null) {
                        var result10 = parse_Statement();
                        if (result10 !== null) {
                          var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10];
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(environment, statement) {
                return {
                  type:        "WithStatement",
                  environment: environment,
                  statement:   statement
                };
              })(result1[4], result1[8])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_SwitchStatement() {
        var cacheKey = "SwitchStatement" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_SwitchToken();
        if (result2 !== null) {
          var result3 = parse___();
          if (result3 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result4 = "(";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result4 !== null) {
              var result5 = parse___();
              if (result5 !== null) {
                var result6 = parse_Expression();
                if (result6 !== null) {
                  var result7 = parse___();
                  if (result7 !== null) {
                    if (input.substr(pos, 1) === ")") {
                      var result8 = ")";
                      pos += 1;
                    } else {
                      var result8 = null;
                      if (reportMatchFailures) {
                        matchFailed("\")\"");
                      }
                    }
                    if (result8 !== null) {
                      var result9 = parse___();
                      if (result9 !== null) {
                        var result10 = parse_CaseBlock();
                        if (result10 !== null) {
                          var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10];
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(expression, clauses) {
                return {
                  type:       "SwitchStatement",
                  expression: expression,
                  clauses:    clauses
                };
              })(result1[4], result1[8])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_CaseBlock() {
        var cacheKey = "CaseBlock" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 1) === "{") {
          var result2 = "{";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"{\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse___();
          if (result3 !== null) {
            var result14 = parse_CaseClauses();
            var result4 = result14 !== null ? result14 : '';
            if (result4 !== null) {
              var savedPos1 = pos;
              var result9 = parse___();
              if (result9 !== null) {
                var result10 = parse_DefaultClause();
                if (result10 !== null) {
                  var result11 = parse___();
                  if (result11 !== null) {
                    var result13 = parse_CaseClauses();
                    var result12 = result13 !== null ? result13 : '';
                    if (result12 !== null) {
                      var result8 = [result9, result10, result11, result12];
                    } else {
                      var result8 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result8 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos1;
                }
              } else {
                var result8 = null;
                pos = savedPos1;
              }
              var result5 = result8 !== null ? result8 : '';
              if (result5 !== null) {
                var result6 = parse___();
                if (result6 !== null) {
                  if (input.substr(pos, 1) === "}") {
                    var result7 = "}";
                    pos += 1;
                  } else {
                    var result7 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"}\"");
                    }
                  }
                  if (result7 !== null) {
                    var result1 = [result2, result3, result4, result5, result6, result7];
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(before, defaultAndAfter) {
                var before = before !== "" ? before : [];
                if (defaultAndAfter !== "") {
                  var defaultClause = defaultAndAfter[1];
                  var clausesAfter = defaultAndAfter[3] !== ""
                    ? defaultAndAfter[3]
                    : [];
                } else {
                  var defaultClause = null;
                  var clausesAfter = [];
                }

                return (defaultClause ? before.concat(defaultClause) : before).concat(clausesAfter);
              })(result1[2], result1[3])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_CaseClauses() {
        var cacheKey = "CaseClauses" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_CaseClause();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = parse___();
          if (result5 !== null) {
            var result6 = parse_CaseClause();
            if (result6 !== null) {
              var result4 = [result5, result6];
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = parse___();
            if (result5 !== null) {
              var result6 = parse_CaseClause();
              if (result6 !== null) {
                var result4 = [result5, result6];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                var result = [head];
                for (var i = 0; i < tail.length; i++) {
                  result.push(tail[i][1]);
                }
                return result;
              })(result1[0], result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_CaseClause() {
        var cacheKey = "CaseClause" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_CaseToken();
        if (result2 !== null) {
          var result3 = parse___();
          if (result3 !== null) {
            var result4 = parse_Expression();
            if (result4 !== null) {
              var result5 = parse___();
              if (result5 !== null) {
                if (input.substr(pos, 1) === ":") {
                  var result6 = ":";
                  pos += 1;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\":\"");
                  }
                }
                if (result6 !== null) {
                  var savedPos1 = pos;
                  var result9 = parse___();
                  if (result9 !== null) {
                    var result10 = parse_StatementList();
                    if (result10 !== null) {
                      var result8 = [result9, result10];
                    } else {
                      var result8 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result8 = null;
                    pos = savedPos1;
                  }
                  var result7 = result8 !== null ? result8 : '';
                  if (result7 !== null) {
                    var result1 = [result2, result3, result4, result5, result6, result7];
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(selector, statements) {
                return {
                  type:       "CaseClause",
                  selector:   selector,
                  statements: statements !== "" ? statements[1] : []
                };
              })(result1[2], result1[5])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_DefaultClause() {
        var cacheKey = "DefaultClause" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_DefaultToken();
        if (result2 !== null) {
          var result3 = parse___();
          if (result3 !== null) {
            if (input.substr(pos, 1) === ":") {
              var result4 = ":";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\":\"");
              }
            }
            if (result4 !== null) {
              var savedPos1 = pos;
              var result7 = parse___();
              if (result7 !== null) {
                var result8 = parse_StatementList();
                if (result8 !== null) {
                  var result6 = [result7, result8];
                } else {
                  var result6 = null;
                  pos = savedPos1;
                }
              } else {
                var result6 = null;
                pos = savedPos1;
              }
              var result5 = result6 !== null ? result6 : '';
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(statements) {
                return {
                  type:       "DefaultClause",
                  statements: statements !== "" ? statements[1] : []
                };
              })(result1[3])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_LabelledStatement() {
        var cacheKey = "LabelledStatement" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_Identifier();
        if (result2 !== null) {
          var result3 = parse___();
          if (result3 !== null) {
            if (input.substr(pos, 1) === ":") {
              var result4 = ":";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\":\"");
              }
            }
            if (result4 !== null) {
              var result5 = parse___();
              if (result5 !== null) {
                var result6 = parse_Statement();
                if (result6 !== null) {
                  var result1 = [result2, result3, result4, result5, result6];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(label, statement) {
                return {
                  type:      "LabelledStatement",
                  label:     label,
                  statement: statement
                };
              })(result1[0], result1[4])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ThrowStatement() {
        var cacheKey = "ThrowStatement" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_ThrowToken();
        if (result2 !== null) {
          var result3 = parse__();
          if (result3 !== null) {
            var result4 = parse_Expression();
            if (result4 !== null) {
              var result5 = parse_EOSNoLineTerminator();
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(exception) {
                return {
                  type:      "ThrowStatement",
                  exception: exception
                };
              })(result1[2])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_TryStatement() {
        var cacheKey = "TryStatement" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos2 = pos;
        var result17 = parse_TryToken();
        if (result17 !== null) {
          var result18 = parse___();
          if (result18 !== null) {
            var result19 = parse_Block();
            if (result19 !== null) {
              var result20 = parse___();
              if (result20 !== null) {
                var result21 = parse_Catch();
                if (result21 !== null) {
                  var result22 = parse___();
                  if (result22 !== null) {
                    var result23 = parse_Finally();
                    if (result23 !== null) {
                      var result16 = [result17, result18, result19, result20, result21, result22, result23];
                    } else {
                      var result16 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result16 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result16 = null;
                  pos = savedPos2;
                }
              } else {
                var result16 = null;
                pos = savedPos2;
              }
            } else {
              var result16 = null;
              pos = savedPos2;
            }
          } else {
            var result16 = null;
            pos = savedPos2;
          }
        } else {
          var result16 = null;
          pos = savedPos2;
        }
        var result15 = result16 !== null
          ? (function(block, catch_, finally_) {
                return {
                  type:      "TryStatement",
                  block:     block,
                  "catch":   catch_,
                  "finally": finally_
                };
              })(result16[2], result16[4], result16[6])
          : null;
        if (result15 !== null) {
          var result0 = result15;
        } else {
          var savedPos1 = pos;
          var result10 = parse_TryToken();
          if (result10 !== null) {
            var result11 = parse___();
            if (result11 !== null) {
              var result12 = parse_Block();
              if (result12 !== null) {
                var result13 = parse___();
                if (result13 !== null) {
                  var result14 = parse_Catch();
                  if (result14 !== null) {
                    var result9 = [result10, result11, result12, result13, result14];
                  } else {
                    var result9 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result9 = null;
                  pos = savedPos1;
                }
              } else {
                var result9 = null;
                pos = savedPos1;
              }
            } else {
              var result9 = null;
              pos = savedPos1;
            }
          } else {
            var result9 = null;
            pos = savedPos1;
          }
          var result8 = result9 !== null
            ? (function(block, catch_) {
                  return {
                    type:      "TryStatement",
                    block:     block,
                    "catch":   catch_,
                    "finally": null
                  };
                })(result9[2], result9[4])
            : null;
          if (result8 !== null) {
            var result0 = result8;
          } else {
            var savedPos0 = pos;
            var result3 = parse_TryToken();
            if (result3 !== null) {
              var result4 = parse___();
              if (result4 !== null) {
                var result5 = parse_Block();
                if (result5 !== null) {
                  var result6 = parse___();
                  if (result6 !== null) {
                    var result7 = parse_Finally();
                    if (result7 !== null) {
                      var result2 = [result3, result4, result5, result6, result7];
                    } else {
                      var result2 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
            var result1 = result2 !== null
              ? (function(block, finally_) {
                    return {
                      type:      "TryStatement",
                      block:     block,
                      "catch":   null,
                      "finally": finally_
                    };
                  })(result2[2], result2[4])
              : null;
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Catch() {
        var cacheKey = "Catch" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_CatchToken();
        if (result2 !== null) {
          var result3 = parse___();
          if (result3 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result4 = "(";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result4 !== null) {
              var result5 = parse___();
              if (result5 !== null) {
                var result6 = parse_Identifier();
                if (result6 !== null) {
                  var result7 = parse___();
                  if (result7 !== null) {
                    if (input.substr(pos, 1) === ")") {
                      var result8 = ")";
                      pos += 1;
                    } else {
                      var result8 = null;
                      if (reportMatchFailures) {
                        matchFailed("\")\"");
                      }
                    }
                    if (result8 !== null) {
                      var result9 = parse___();
                      if (result9 !== null) {
                        var result10 = parse_Block();
                        if (result10 !== null) {
                          var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10];
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(identifier, block) {
                return {
                  type:       "Catch",
                  identifier: identifier,
                  block:      block
                };
              })(result1[4], result1[8])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Finally() {
        var cacheKey = "Finally" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_FinallyToken();
        if (result2 !== null) {
          var result3 = parse___();
          if (result3 !== null) {
            var result4 = parse_Block();
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(block) {
                return {
                  type:  "Finally",
                  block: block
                };
              })(result1[2])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_DebuggerStatement() {
        var cacheKey = "DebuggerStatement" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_DebuggerToken();
        if (result2 !== null) {
          var result3 = parse_EOS();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() { return { type: "DebuggerStatement" }; })()
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_FunctionDeclaration() {
        var cacheKey = "FunctionDeclaration" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_FunctionToken();
        if (result2 !== null) {
          var result3 = parse___();
          if (result3 !== null) {
            var result4 = parse_Identifier();
            if (result4 !== null) {
              var result5 = parse___();
              if (result5 !== null) {
                if (input.substr(pos, 1) === "(") {
                  var result6 = "(";
                  pos += 1;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"(\"");
                  }
                }
                if (result6 !== null) {
                  var result7 = parse___();
                  if (result7 !== null) {
                    var result17 = parse_FormalParameterList();
                    var result8 = result17 !== null ? result17 : '';
                    if (result8 !== null) {
                      var result9 = parse___();
                      if (result9 !== null) {
                        if (input.substr(pos, 1) === ")") {
                          var result10 = ")";
                          pos += 1;
                        } else {
                          var result10 = null;
                          if (reportMatchFailures) {
                            matchFailed("\")\"");
                          }
                        }
                        if (result10 !== null) {
                          var result11 = parse___();
                          if (result11 !== null) {
                            if (input.substr(pos, 1) === "{") {
                              var result12 = "{";
                              pos += 1;
                            } else {
                              var result12 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"{\"");
                              }
                            }
                            if (result12 !== null) {
                              var result13 = parse___();
                              if (result13 !== null) {
                                var result14 = parse_FunctionBody();
                                if (result14 !== null) {
                                  var result15 = parse___();
                                  if (result15 !== null) {
                                    if (input.substr(pos, 1) === "}") {
                                      var result16 = "}";
                                      pos += 1;
                                    } else {
                                      var result16 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"}\"");
                                      }
                                    }
                                    if (result16 !== null) {
                                      var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16];
                                    } else {
                                      var result1 = null;
                                      pos = savedPos0;
                                    }
                                  } else {
                                    var result1 = null;
                                    pos = savedPos0;
                                  }
                                } else {
                                  var result1 = null;
                                  pos = savedPos0;
                                }
                              } else {
                                var result1 = null;
                                pos = savedPos0;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos0;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(name, params, elements) {
                return {
                  type:     "Function",
                  name:     name,
                  params:   params !== "" ? params : [],
                  elements: elements
                };
              })(result1[2], result1[6], result1[12])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_FunctionExpression() {
        var cacheKey = "FunctionExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_FunctionToken();
        if (result2 !== null) {
          var result3 = parse___();
          if (result3 !== null) {
            var result18 = parse_Identifier();
            var result4 = result18 !== null ? result18 : '';
            if (result4 !== null) {
              var result5 = parse___();
              if (result5 !== null) {
                if (input.substr(pos, 1) === "(") {
                  var result6 = "(";
                  pos += 1;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"(\"");
                  }
                }
                if (result6 !== null) {
                  var result7 = parse___();
                  if (result7 !== null) {
                    var result17 = parse_FormalParameterList();
                    var result8 = result17 !== null ? result17 : '';
                    if (result8 !== null) {
                      var result9 = parse___();
                      if (result9 !== null) {
                        if (input.substr(pos, 1) === ")") {
                          var result10 = ")";
                          pos += 1;
                        } else {
                          var result10 = null;
                          if (reportMatchFailures) {
                            matchFailed("\")\"");
                          }
                        }
                        if (result10 !== null) {
                          var result11 = parse___();
                          if (result11 !== null) {
                            if (input.substr(pos, 1) === "{") {
                              var result12 = "{";
                              pos += 1;
                            } else {
                              var result12 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"{\"");
                              }
                            }
                            if (result12 !== null) {
                              var result13 = parse___();
                              if (result13 !== null) {
                                var result14 = parse_FunctionBody();
                                if (result14 !== null) {
                                  var result15 = parse___();
                                  if (result15 !== null) {
                                    if (input.substr(pos, 1) === "}") {
                                      var result16 = "}";
                                      pos += 1;
                                    } else {
                                      var result16 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"}\"");
                                      }
                                    }
                                    if (result16 !== null) {
                                      var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16];
                                    } else {
                                      var result1 = null;
                                      pos = savedPos0;
                                    }
                                  } else {
                                    var result1 = null;
                                    pos = savedPos0;
                                  }
                                } else {
                                  var result1 = null;
                                  pos = savedPos0;
                                }
                              } else {
                                var result1 = null;
                                pos = savedPos0;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos0;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(name, params, elements) {
                return {
                  type:     "Function",
                  name:     name !== "" ? name : null,
                  params:   params !== "" ? params : [],
                  elements: elements
                };
              })(result1[2], result1[6], result1[12])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_FormalParameterList() {
        var cacheKey = "FormalParameterList" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_Identifier();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = parse___();
          if (result5 !== null) {
            if (input.substr(pos, 1) === ",") {
              var result6 = ",";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\",\"");
              }
            }
            if (result6 !== null) {
              var result7 = parse___();
              if (result7 !== null) {
                var result8 = parse_Identifier();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = parse___();
            if (result5 !== null) {
              if (input.substr(pos, 1) === ",") {
                var result6 = ",";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result6 !== null) {
                var result7 = parse___();
                if (result7 !== null) {
                  var result8 = parse_Identifier();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                var result = [head];
                for (var i = 0; i < tail.length; i++) {
                  result.push(tail[i][3]);
                }
                return result;
              })(result1[0], result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_FunctionBody() {
        var cacheKey = "FunctionBody" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result2 = parse_SourceElements();
        var result1 = result2 !== null ? result2 : '';
        var result0 = result1 !== null
          ? (function(elements) { return elements !== "" ? elements : []; })(result1)
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Program() {
        var cacheKey = "Program" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result2 = parse_SourceElements();
        var result1 = result2 !== null ? result2 : '';
        var result0 = result1 !== null
          ? (function(elements) {
                return {
                  type:     "Program",
                  elements: elements !== "" ? elements : []
                };
              })(result1)
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_SourceElements() {
        var cacheKey = "SourceElements" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_Statement();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = parse___();
          if (result5 !== null) {
            var result6 = parse_Statement();
            if (result6 !== null) {
              var result4 = [result5, result6];
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = parse___();
            if (result5 !== null) {
              var result6 = parse_Statement();
              if (result6 !== null) {
                var result4 = [result5, result6];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                var result = [head];
                for (var i = 0; i < tail.length; i++) {
                  result.push(tail[i][1]);
                }
                return result;
              })(result1[0], result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          switch (failuresExpected.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpected[0];
            default:
              failuresExpected.sort();
              return failuresExpected.slice(0, failuresExpected.length - 1).join(', ')
                + ' or '
                + failuresExpected[failuresExpected.length - 1];
          }
        }

        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';

        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }

      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */

        var line = 1;
        var column = 1;
        var seenCR = false;

        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }

        return { line: line, column: column };
      }



      var result = parse_start();

      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }

      return result;
    },

    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };

  /* Thrown when a parser encounters a syntax error. */

  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };

  result.SyntaxError.prototype = Error.prototype;

  return result;
})();
